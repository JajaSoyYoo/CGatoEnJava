package act5;
import java_cup.runtime.*;
 
parser code
{:
    public static TablaSimbolos tabla=new TablaSimbolos();
    public static Simbolo simbolo;

    public void syntax_error(Symbol s) {
        report_error("Error de sintaxis en linea: " + (s.left) + " , columna: " + (s.right + 1) + ", simbolo: " + s.value, null);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("", null);
    }

    Object resultado;


    public static int contador = 0;
    public static String ope;
    public static Boolean siono;
    public static String tempID;

    public void temp(String decimal1, String decimal2){
        int temp1 = Integer.parseInt(decimal1);
        int temp2 = Integer.parseInt(decimal2);
        String tempLabel = "t" + contador;
        System.out.println(tempLabel + " = " + decimal1 + " " + ope + " " + decimal2);
    }

:}

// Reservadas terminales
terminal PACKAGE,USING, NAMESPACE, CLASS;
terminal PUBLIC, PRIVATE, PROTECTED, INTERNAL;
terminal VOID, INT, STRING, BOOL, FLOAT, CHAR, TRUE, FALSE;
terminal IF, ELSE, FOR, WHILE, RETURN, SWITCH, CASE, DEFAULT;
terminal STATIC, NEW, CONST, BREAK, MAIN;

// Simbolos terminales
terminal PUNTO_COMA, PUNTO, COMA, PARENTESIS_IZQUIERDO, PARENTESIS_DERECHO;
terminal LLAVE_IZQUIERDA, LLAVE_DERECHA, CORCHETE_IZQUIERDO, CORCHETE_DERECHO;
terminal SUMA, RESTA, MULTIPLICACION, DIVISION;
terminal ASIGNACION, IGUALDAD, DESIGUALDAD;
terminal MENOR_QUE, MAYOR_QUE, MENOR_O_IGUAL_QUE, MAYOR_O_IGUAL_QUE;
terminal Y_LOGICO, O_LOGICO, INCREMENTO, NEGACION, DECREMENTO, DOS_PUNTOS;

// Otros terminales
terminal CADENA, CARACTER, CWRITE, CWLINE, CRLINE;
terminal String NENTERO, CONSTANTE; 
terminal String NDECIMAL;
terminal String IDENTIFICADOR;

non terminal dec_using, dec_namespace, dec_clase, cuerpo, declaraciones, dec_variables, termino_logico, 
            estructura_control, sentencia_if, sentencia_while, sentencia_for, for_init, for_update, tipo_metodo, parametros, cuerpo_clase, parametro, metodos, metodo_int, metodo_char, 
            metodo_string, metodo_bool, metodo_void, metodo_float, val, dec_constantes, mod_acceso, impresion, imprimir, lecturas, llamar_funcion , pasar_parametros,
            tipo_int, tipo_char, tipo_float, tipo_string, tipo_bool, boleano;

non terminal ope_int, operador, ope_float, compa, metodo_main, exp_log, con_float, con_int,dec_usingpunto, default_case , sentencia_switch, lista_casos, caso; 

start with declaraciones;

declaraciones ::= dec_usingpunto dec_namespace
                | dec_usingpunto dec_clase 
                ;

dec_using ::= USING IDENTIFICADOR
            {:
                System.out.println("---Declaracion de using---");
            :}
            ;

dec_usingpunto ::= dec_using PUNTO_COMA
                | USING IDENTIFICADOR PUNTO IDENTIFICADOR PUNTO_COMA 
                {:
                System.out.println("---Declaracion de using con punto---");
                :}
                | dec_using PUNTO_COMA dec_usingpunto
                | USING IDENTIFICADOR PUNTO IDENTIFICADOR PUNTO_COMA dec_usingpunto 
                ;

dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase LLAVE_DERECHA 
                {:
                    System.out.println("---Declaracion de namespace---");
                :}
                | NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase error
                {:
                    System.err.println("  Error: Falta '}' en namespace");
                :}
                | NAMESPACE IDENTIFICADOR dec_clase LLAVE_DERECHA error
                {:
                    System.err.println("  Error: Falta '{' en namespace");
                :}
                ;

dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase LLAVE_DERECHA 
            {:
                System.out.println("---Declaracion de clase---");
            :}
            | CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase error
            {:
                System.err.println("  Error: Falta '}' en clase");
            :}
            | CLASS IDENTIFICADOR cuerpo_clase error
            {:
                System.err.println("  Error: Falta '{' en clase");
            :}
            ;

cuerpo_clase ::= metodos cuerpo_clase
            | metodos 
            | dec_constantes 
            | dec_constantes cuerpo_clase 
            ;


//----------------------------------------------------------------------------//

metodos ::= metodo_int 
            | metodo_char 
            | metodo_string 
            | metodo_float 
            | metodo_void 
            | metodo_bool 
            | metodo_main
            ;


metodo_int ::= mod_acceso INT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION ENTERA----------------\n\n");
        :}
        ;

metodo_string ::= mod_acceso STRING IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION STRING----------------\n\n");
        :}
        ;

metodo_float ::= mod_acceso FLOAT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION FLOAT----------------\n\n");
        :}
        ;

metodo_bool ::= mod_acceso BOOL IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION BOLEANO----------------\n\n");
        :}
        ;

metodo_char ::= mod_acceso CHAR IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION CARACTER----------------\n\n");
        :}
        ;

metodo_void ::= mod_acceso VOID IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION VACIA----------------\n\n");;
        :}
        ;

metodo_main ::= STATIC VOID MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION PRINCIPAL----------------\n\n");;
        :}
        ;

tipo_metodo ::= INT | FLOAT | STRING | CHAR | BOOL | VOID 
        ;

parametros ::= parametro 
            | parametro COMA parametros
            |
            ;

parametro ::= tipo_metodo IDENTIFICADOR 
            ;

cuerpo ::= estructura_control cuerpo
        | estructura_control
        | dec_variables
        | dec_variables cuerpo
        | impresion
        | impresion cuerpo
        | llamar_funcion
        | llamar_funcion cuerpo
        ;



//----------------------------------------------------------------------------//



dec_constantes ::= con_int
                | con_float
                ;

con_int ::= mod_acceso CONST INT CONSTANTE:id ASIGNACION NENTERO:entero PUNTO_COMA
            {:
                System.out.println("\n---Constante entero---\n");
            
            parser.simbolo=new Simbolo(id, "int", entero , "clase", true);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Constante agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = "+entero);
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Constante NO agregada");
            }
            :}
            ;

con_float ::= mod_acceso CONST FLOAT CONSTANTE:id ASIGNACION NDECIMAL:decimal PUNTO_COMA
            {:
                System.out.println("\n---Constante flotante---\n");
            
            parser.simbolo=new Simbolo(id, "float", decimal , "clase", true);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Constante agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = "+decimal);
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Constante NO agregada");
            }
            :}
            ;

mod_acceso ::= PUBLIC
            | PRIVATE
            | PROTECTED
            ;

val ::= NENTERO
    | NDECIMAL
    ;

//----------------------------------------------------------------------------//

impresion ::= CWLINE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {:
                System.out.println("---Impresion de consola con salto de linea---");
            :}
            | CWRITE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {:
                System.out.println("---Impresion de consola sin salto de linea---");
            :}
            ;

imprimir ::= CADENA
            | IDENTIFICADOR 
            | CADENA SUMA imprimir
            | IDENTIFICADOR SUMA imprimir
            ;


lecturas ::= CRLINE PARENTESIS_IZQUIERDO PARENTESIS_DERECHO;
            


//----------------------------------------------------------------------------//


dec_variables ::= tipo_int
                | tipo_string
                | tipo_char
                | tipo_float
                | tipo_bool
                ;

tipo_int ::= INT IDENTIFICADOR:id ASIGNACION NENTERO:entero PUNTO_COMA
        {:
            System.out.println("--Variable entera inicializada--");
            
            parser.simbolo=new Simbolo(id, "int", entero , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = "+entero);
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        | INT IDENTIFICADOR:id ASIGNACION ope_int PUNTO_COMA
        {:
            System.out.println("--Variable entera inicializada con operacion--");
            if ("error".equals(resultado)) {
                System.err.println("Error division entre 0");
            } else {
                parser.simbolo = new Simbolo(id, "int", "" + resultado, "metodo", false);
                if (parser.tabla.agregar(id, parser.simbolo)) {
                    System.out.println("Variable agregada correctamente " + id);
                    System.out.println(tabla.mostrar());
                    System.out.println("");
                    parser.contador++;
                    System.out.println("t" + (parser.contador) + " = " + resultado);
                    System.out.println("" + id + " = " + "t" + (parser.contador));
                    System.out.println("");
                    tempID = id;
                } else {
                    System.out.println("Variable NO agregada");
                }
            }
        :}
        | INT IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA
        {:
            System.out.println("--Variable entera de lectura--");
        :}
        | INT IDENTIFICADOR:id PUNTO_COMA
        {:
            System.out.println("--Variable entera--");
            parser.simbolo=new Simbolo(id, "int", "0" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = 0");
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        | IDENTIFICADOR INCREMENTO PUNTO_COMA
        ;

tipo_float ::= FLOAT IDENTIFICADOR:id ASIGNACION NDECIMAL:flotante PUNTO_COMA
        {:
            System.out.println("--Variable flotante--");
            parser.simbolo=new Simbolo(id, "float", ""+flotante , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        | FLOAT IDENTIFICADOR:id ASIGNACION ope_float PUNTO_COMA
        {:
            System.out.println("--Variable float inicializada con operacion--");
            if("error".equals(resultado)){
                System.err.println("Error division entre 0");
            }else{
                parser.simbolo=new Simbolo(id, "float", ""+resultado , "metodo", false);
                if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = "+resultado);
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                tempID = id;
            }else{
                System.out.println("Variable NO agregada");
            }
            }
            
        :}
        | FLOAT IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA
        {:
            System.out.println("--Variable flotante de lectura--");
        :}
        | FLOAT IDENTIFICADOR:id PUNTO_COMA
        {:
            System.out.println("--Variable flotante--");
            parser.simbolo=new Simbolo(id, "float", "0" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        ;

tipo_bool ::= BOOL IDENTIFICADOR ASIGNACION boleano PUNTO_COMA
        {:
            System.out.println("--Variable boleano--");
            
        :}
        | BOOL IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA
        {:
            System.out.println("--Variable boleano de lectura--");
        :}
        | BOOL IDENTIFICADOR:id PUNTO_COMA
        {:
            System.out.println("--Variable boleano--");
            
        :}
        ;

boleano ::= TRUE | FALSE ;

tipo_string ::= STRING IDENTIFICADOR:id ASIGNACION CADENA:cadena PUNTO_COMA
        {:
            System.out.println("--Variable cadena--");
            parser.simbolo=new Simbolo(id, "string", ""+cadena , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        | STRING IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA
        {:
            System.out.println("--Variable boleano de lectura--");
        :}
        | STRING IDENTIFICADOR:id PUNTO_COMA
        {:
            System.out.println("--Variable cadena--");
            parser.simbolo=new Simbolo(id, "string", "" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        ;

tipo_char ::= CHAR IDENTIFICADOR:id ASIGNACION CARACTER:caracter PUNTO_COMA
        {:
            System.out.println("--Variable caracter--");
            parser.simbolo=new Simbolo(id, "char", ""+caracter , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        | CHAR IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA
        {:
            System.out.println("--Variable caracter de lectura--");
        :}
        | CHAR IDENTIFICADOR:id PUNTO_COMA
        {:
            System.out.println("--Variable caracter--");
            parser.simbolo=new Simbolo(id, "char", "" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        ;

//----------------------------------------------------------------------------------//


estructura_control ::= sentencia_if
                    | sentencia_while
                    | sentencia_for
                    | sentencia_switch
                    ;


sentencia_if ::= IF PARENTESIS_IZQUIERDO exp_log PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA
            {:
                System.out.println("---Sentencia if---");
                if(siono){
                    System.out.println("expresion verdadera");
                }
                else
                    System.out.println("expresion falsa");
            :}
            | IF PARENTESIS_IZQUIERDO exp_log PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA ELSE LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA
            {:
                System.out.println("---Sentencia if con else---");
                if(siono){
                    System.out.println("expresion verdadera");
                }
                else
                    System.out.println("expresion falsa");
            :}
            ;


sentencia_while ::= WHILE PARENTESIS_IZQUIERDO exp_log PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA
                {:
                    System.out.println("---Sentencia while---");
                    if(siono){
                    System.out.println("expresion verdadera");
                }
                else
                    System.out.println("expresion falsa");
                :}
                ;

sentencia_for ::= FOR PARENTESIS_IZQUIERDO tipo_int exp_log PUNTO_COMA for_update PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA
    {:
        System.out.println("---Sentencia for---");
    :};

for_init ::= INT IDENTIFICADOR ASIGNACION NENTERO;

for_update ::= IDENTIFICADOR INCREMENTO 
            | IDENTIFICADOR DECREMENTO
            ;



sentencia_switch ::= SWITCH PARENTESIS_IZQUIERDO IDENTIFICADOR PARENTESIS_DERECHO LLAVE_IZQUIERDA lista_casos LLAVE_DERECHA
            {:
                System.out.println("---Sentencia switch---");
                
            :}
            ;

lista_casos ::= caso
              | lista_casos caso
              | lista_casos caso  default_case
              ;

caso ::= CASE NENTERO:valor DOS_PUNTOS cuerpo BREAK PUNTO_COMA
          {:
              System.out.println("Caso: " + valor);
              
          :}
        | CASE IDENTIFICADOR:id LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA
          {:
              String nombre = parser.tabla.consultaValor("" + id);
              System.out.println("Caso: " + nombre);
              
          :}
        ;

default_case ::= DEFAULT DOS_PUNTOS cuerpo BREAK PUNTO_COMA
                {:
                    System.out.println("Caso por defecto");
                    
                :}
                ;



//----------------------------------------------------------------------------//

llamar_funcion ::= IDENTIFICADOR PARENTESIS_IZQUIERDO pasar_parametros PARENTESIS_DERECHO PUNTO_COMA 
                {:
                    System.out.println("---Se llama a funcion---");
                :}
                | IDENTIFICADOR ASIGNACION IDENTIFICADOR PARENTESIS_IZQUIERDO pasar_parametros PARENTESIS_DERECHO PUNTO_COMA
                {:
                    System.out.println("---Se llama a funcion y se asigna a variable---");
                :}
                | IDENTIFICADOR PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA 
                {:
                    System.out.println("---Se llama a funcion sin parametros---");
                :}
                ;

pasar_parametros ::= IDENTIFICADOR
                    | CONSTANTE
                    | IDENTIFICADOR COMA pasar_parametros
                    | CONSTANTE COMA pasar_parametros
                    ;

//----------------------------------------------------------------------------//


ope_int ::= NENTERO:entero1 operador NENTERO:entero2
            {:
                temp(entero1, entero2);
            :}
            ;

// Regla para operaciones de punto flotante
ope_float ::= NDECIMAL:decimal1 operador NDECIMAL:decimal2
            {:
                
                String tempLabel = "t" + parser.contador;
                resultado = Operacion.convFloat(decimal1, "" + ope, decimal2);
                
                
                System.out.println(""+tempID + " = " + tempLabel); // Asignar a la variable
            :}
            | NENTERO:decimal1 operador NDECIMAL:decimal2
            {:
                parser.contador++;
                String tempLabel = "t" + parser.contador;
                resultado = Operacion.convFloat(decimal1, "" + ope, decimal2);
                
                System.out.println(tempLabel + " = " + decimal1 + " " + ope + " " + decimal2);
                System.out.println(""+tempID + " = " + tempLabel); // Asignar a la variable
            :}
            | NDECIMAL:decimal1 operador NENTERO:decimal2
            {:
                parser.contador++;
                String tempLabel = "t" + parser.contador;
                resultado = Operacion.convFloat(decimal1, "" + ope, decimal2);
                
                System.out.println(tempLabel + " = " + decimal1 + " " + ope + " " + decimal2);
                System.out.println(""+tempID + " = " + tempLabel); // Asignar a la variable
            :}
            | NENTERO:decimal1 operador NENTERO:decimal2
            {:
                parser.contador++;
                String tempLabel = "t" + parser.contador;
                resultado = Operacion.convFloat(decimal1, "" + ope, decimal2);
                
                System.out.println(tempLabel + " = " + decimal1 + " " + ope + " " + decimal2);
                System.out.println(""+tempID + " = " + tempLabel); // Asignar a la variable
            :}
            ;


operador ::= SUMA:suma
            {:ope = ""+suma;:}
            | RESTA:resta
            {:ope = ""+resta;:}
            | MULTIPLICACION:multi
            {:ope = ""+multi;:}
            | DIVISION:divi
            {:ope = ""+divi;:}
            ;


termino_logico ::= IGUALDAD:igual
                {:ope = "" + igual;:}
                | DESIGUALDAD:noigual
                {:ope = "" + noigual;:}
                | MAYOR_QUE:mayor
                {:ope = "" + mayor;:}
                | MENOR_QUE:menor
                {:ope = "" + menor;:}
                | MENOR_O_IGUAL_QUE:menigual
                {:ope = "" + menigual;:}
                | MAYOR_O_IGUAL_QUE:maigual
                {:ope = "" + maigual;:}
                ;

// Regla para expresiones lógicas
exp_log ::= NENTERO:num1 termino_logico NENTERO:num2
            {:
                parser.contador++;
                String tempLabel = "t" + parser.contador; 
                siono = Operacion.verifico(num1, "" + ope, num2);
                System.out.println(tempLabel + " = " + num1 + " " + ope + " " + num2);
            :}
            | NENTERO:num1 termino_logico IDENTIFICADOR:id
            {:
                String nombre = parser.tabla.consultaValor("" + id);
                parser.contador++;
                String tempLabel = "t" + parser.contador;
                siono = Operacion.verifico(num1, "" + ope, nombre);
                System.out.println(tempLabel + " = " + num1 + " " + ope + " " + nombre);
            :}
            | IDENTIFICADOR:id termino_logico NENTERO:num1
            {:
                String nombre = parser.tabla.consultaValor("" + id);
                parser.contador++;
                String tempLabel = "t" + parser.contador;
                siono = Operacion.verifico(nombre, "" + ope, num1);
                System.out.println(tempLabel + " = " + nombre + " " + ope + " " + num1);
            :}
            | IDENTIFICADOR:id1 termino_logico IDENTIFICADOR:id2
            {:
                String nombre1 = parser.tabla.consultaValor("" + id1);
                String nombre2 = parser.tabla.consultaValor("" + id2);
                parser.contador++;
                String tempLabel = "t" + parser.contador;
                siono = Operacion.verifico(nombre1, "" + ope, nombre2);
                System.out.println(tempLabel + " = " + nombre1 + " " + ope + " " + nombre2);
            :}
            ;