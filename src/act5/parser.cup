package act5;
import java_cup.runtime.*;
 
parser code
{:
    public static TablaSimbolos tabla=new TablaSimbolos();
    public static Simbolo simbolo;

    public void syntax_error(Symbol s) {
        report_error("Error de sintaxis en linea: " + (s.left) + " , columna: " + (s.right + 1) + ", simbolo: " + s.value, null);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("", null);
    }

    Object resultado;


    public static int contador = 0;


    
:}

// Reservadas terminales
terminal PACKAGE, USING, NAMESPACE, CLASS;
terminal PUBLIC, PRIVATE, PROTECTED, INTERNAL;
terminal VOID, INT, STRING, BOOL, FLOAT, CHAR, TRUE, FALSE;
terminal IF, ELSE, FOR, WHILE, RETURN;
terminal STATIC, NEW, CONST;

// Simbolos terminales
terminal PUNTO_COMA, PUNTO, COMA, PARENTESIS_IZQUIERDO, PARENTESIS_DERECHO;
terminal LLAVE_IZQUIERDA, LLAVE_DERECHA, CORCHETE_IZQUIERDO, CORCHETE_DERECHO;
terminal SUMA, RESTA, MULTIPLICACION, DIVISION;
terminal ASIGNACION, IGUALDAD, DESIGUALDAD;
terminal MENOR_QUE, MAYOR_QUE, MENOR_O_IGUAL_QUE, MAYOR_O_IGUAL_QUE;
terminal Y_LOGICO, O_LOGICO, INCREMENTO, NEGACION, DECREMENTO;

// Otros terminales
terminal CADENA, CARACTER, CONSTANTE, CWRITE, CWLINE, CRLINE;
terminal String NENTERO; 
terminal String NDECIMAL;
terminal String IDENTIFICADOR;

non terminal dec_using, dec_namespace, dec_clase, cuerpo, declaraciones, dec_variables, tipo_variable, expresion, exp_aritmetica, exp_logica, termino, factor, termino_logico, 
            estructura_control, sentencia_if, sentencia_while, sentencia_for, for_init, for_update, tipo_metodo, parametros, cuerpo_clase, parametro, metodos, metodo_int, metodo_char, 
            metodo_string, metodo_bool, metodo_void, metodo_float, val, variables, dec_constantes, mod_acceso, impresion, imprimir, lecturas, llamar_funcion , pasar_parametros,
            varias_dec, tipo_int, tipo_char, tipo_float, tipo_string, tipo_bool, boleano;

non terminal exp_int, ope_int, parente, uso_exp, operador; 

start with declaraciones;

declaraciones ::= dec_using dec_namespace
                | dec_using dec_clase 
                ;

dec_using ::= USING IDENTIFICADOR PUNTO_COMA 
            {:
                System.out.println("---Declaracion de using---");
            :}
            | USING IDENTIFICADOR error
            {:
                System.err.println("  Error: Falta ';'");
            :}            
            ;

dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase LLAVE_DERECHA 
                {:
                    System.out.println("---Declaracion de namespace---");
                :}
                | NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase error
                {:
                    System.err.println("  Error: Falta '}' en namespace");
                :}
                | NAMESPACE IDENTIFICADOR dec_clase LLAVE_DERECHA error
                {:
                    System.err.println("  Error: Falta '{' en namespace");
                :}
                ;

dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase LLAVE_DERECHA 
            {:
                System.out.println("---Declaracion de clase---");
            :}
            | CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase error
            {:
                System.err.println("  Error: Falta '}' en clase");
            :}
            | CLASS IDENTIFICADOR cuerpo_clase error
            {:
                System.err.println("  Error: Falta '{' en clase");
            :}
            ;

cuerpo_clase ::= metodos cuerpo_clase
            | metodos 
            | dec_constantes 
            | dec_constantes cuerpo_clase 
            ;


//----------------------------------------------------------------------------//

metodos ::= metodo_int 
            | metodo_char 
            | metodo_string 
            | metodo_float 
            | metodo_void 
            | metodo_bool 
            ;


metodo_int ::= mod_acceso INT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION ENTERA----------------\n\n");
        :}
        ;

metodo_string ::= mod_acceso STRING IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION STRING----------------\n\n");
        :}
        ;

metodo_float ::= mod_acceso FLOAT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION FLOAT----------------\n\n");
        :}
        ;

metodo_bool ::= mod_acceso BOOL IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION BOLEANO----------------\n\n");
        :}
        ;

metodo_char ::= mod_acceso CHAR IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION CARACTER----------------\n\n");
        :}
        ;

metodo_void ::= mod_acceso VOID IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
        {:
            System.out.println("\n\n------------------DECLARACION DE FUNCION VACIA----------------\n\n");;
        :}
        ;


tipo_metodo ::= INT | FLOAT | STRING | CHAR | BOOL | VOID 
        ;

parametros ::= parametro 
            | parametro COMA parametros
            |
            ;

parametro ::= tipo_metodo IDENTIFICADOR 
            ;

cuerpo ::= estructura_control cuerpo
        | estructura_control
        | dec_variables
        | dec_variables cuerpo
        | impresion
        | impresion cuerpo
        | llamar_funcion
        | llamar_funcion cuerpo
        ;



//----------------------------------------------------------------------------//



dec_constantes ::= mod_acceso CONST INT CONSTANTE ASIGNACION val PUNTO_COMA
                {:
                    System.out.println("Declaracion de constante");
                :}
                ;

mod_acceso ::= PUBLIC
            | PRIVATE
            | PROTECTED
            ;

val ::= NENTERO
    | NDECIMAL
    ;

//----------------------------------------------------------------------------//

impresion ::= CWLINE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {:
                System.out.println("---Impresion de consola con salto de linea---");
            :}
            | CWRITE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {:
                System.out.println("---Impresion de consola sin salto de linea---");
            :}
            ;

imprimir ::= CADENA
            | IDENTIFICADOR 
            | CADENA SUMA imprimir
            | IDENTIFICADOR SUMA imprimir
            ;


lecturas ::= CRLINE PARENTESIS_IZQUIERDO PARENTESIS_DERECHO;
            


//----------------------------------------------------------------------------//


dec_variables ::= tipo_int
                | tipo_string
                | tipo_char
                | tipo_float
                | tipo_bool
                ;

tipo_int ::= INT IDENTIFICADOR:id ASIGNACION NENTERO:entero PUNTO_COMA
        {:
            System.out.println("--Variable entera inicializada--");
            //String ent = String.valueOf(resultado);
            parser.simbolo=new Simbolo(id, "int", entero , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = "+entero);
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        | INT IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA
        {:
            System.out.println("--Variable entera de lectura--");
        :}
        | INT IDENTIFICADOR:id PUNTO_COMA
        {:
            System.out.println("--Variable entera--");
            parser.simbolo=new Simbolo(id, "int", "0" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = 0");
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        ;

tipo_float ::= FLOAT IDENTIFICADOR:id ASIGNACION NDECIMAL:flotante PUNTO_COMA
        {:
            System.out.println("--Variable flotante--");
            parser.simbolo=new Simbolo(id, "float", ""+flotante , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        | FLOAT IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA
        {:
            System.out.println("--Variable flotante de lectura--");
        :}
        | FLOAT IDENTIFICADOR:id PUNTO_COMA
        {:
            System.out.println("--Variable flotante--");
            parser.simbolo=new Simbolo(id, "float", "0" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        ;

tipo_bool ::= BOOL IDENTIFICADOR ASIGNACION boleano PUNTO_COMA
        {:
            System.out.println("--Variable boleano--");
            
        :}
        | BOOL IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA
        {:
            System.out.println("--Variable boleano de lectura--");
        :}
        | BOOL IDENTIFICADOR:id PUNTO_COMA
        {:
            System.out.println("--Variable boleano--");
            
        :}
        ;

boleano ::= TRUE | FALSE ;

tipo_string ::= STRING IDENTIFICADOR:id ASIGNACION CADENA:cadena PUNTO_COMA
        {:
            System.out.println("--Variable cadena--");
            parser.simbolo=new Simbolo(id, "string", ""+cadena , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        | STRING IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA
        {:
            System.out.println("--Variable boleano de lectura--");
        :}
        | STRING IDENTIFICADOR:id PUNTO_COMA
        {:
            System.out.println("--Variable cadena--");
            parser.simbolo=new Simbolo(id, "string", "" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        ;

tipo_char ::= CHAR IDENTIFICADOR:id ASIGNACION CARACTER:caracter PUNTO_COMA
        {:
            System.out.println("--Variable caracter--");
            parser.simbolo=new Simbolo(id, "char", ""+caracter , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        | CHAR IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA
        {:
            System.out.println("--Variable caracter de lectura--");
        :}
        | CHAR IDENTIFICADOR:id PUNTO_COMA
        {:
            System.out.println("--Variable caracter--");
            parser.simbolo=new Simbolo(id, "char", "" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        :}
        ;

//----------------------------------------------------------------------------------//


estructura_control ::= sentencia_if
                    | sentencia_while
                    | sentencia_for;


sentencia_if ::= IF PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA
            {:
                System.out.println("---Sentencia if---");
            :}
            | IF PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA ELSE LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA
            {:
                System.out.println("---Sentencia if con else---");
            :}
            ;


sentencia_while ::= WHILE PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA
                {:
                    System.out.println("---Sentencia while---");
                :}
                ;

sentencia_for ::= FOR PARENTESIS_IZQUIERDO for_init PUNTO_COMA termino_logico PUNTO_COMA for_update PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA
    {:
        System.out.println("---Sentencia for---");
    :};

for_init ::= INT IDENTIFICADOR ASIGNACION NENTERO;

for_update ::= IDENTIFICADOR INCREMENTO 
            | IDENTIFICADOR DECREMENTO
            ;


//----------------------------------------------------------------------------//


expresion ::= exp_aritmetica 
            | exp_logica
            ;

exp_aritmetica ::= termino 
                | exp_aritmetica SUMA termino 
                | exp_aritmetica RESTA termino 
                ;

termino ::= factor 
        | termino MULTIPLICACION factor 
        | termino DIVISION factor 
        ;

factor ::= IDENTIFICADOR 
        | CONSTANTE
        | NENTERO 
        | NDECIMAL 
        | PARENTESIS_IZQUIERDO exp_aritmetica PARENTESIS_DERECHO 
        ;

exp_logica ::= termino_logico Y_LOGICO termino_logico 
            | termino_logico O_LOGICO termino_logico  
            ;

termino_logico ::= exp_aritmetica IGUALDAD exp_aritmetica 
                | exp_aritmetica DESIGUALDAD exp_aritmetica 
                | exp_aritmetica MAYOR_QUE exp_aritmetica 
                | exp_aritmetica MENOR_QUE exp_aritmetica 
                | exp_aritmetica MENOR_O_IGUAL_QUE exp_aritmetica 
                | exp_aritmetica MAYOR_O_IGUAL_QUE exp_aritmetica 
                ;

//----------------------------------------------------------------------------//

llamar_funcion ::= IDENTIFICADOR PARENTESIS_IZQUIERDO pasar_parametros PARENTESIS_DERECHO PUNTO_COMA 
                {:
                    System.out.println("---Se llama a funcion---");
                :}
                | IDENTIFICADOR ASIGNACION IDENTIFICADOR PARENTESIS_IZQUIERDO pasar_parametros PARENTESIS_DERECHO PUNTO_COMA
                {:
                    System.out.println("---Se llama a funcion y se asigna a variable---");
                :}
                ;

pasar_parametros ::= IDENTIFICADOR
                    | CONSTANTE
                    | IDENTIFICADOR COMA pasar_parametros
                    | CONSTANTE COMA pasar_parametros
                    ;

//----------------------------------------------------------------------------//

exp_int ::=NENTERO:entero
        {:
            resultado = entero;
        :}
        | IDENTIFICADOR:valor
        {:
            
        :}
        ;

ope_int ::= exp_int:entero1 operador:op exp_int:entero2
            {:
                
                System.out.println("entero1");
                resultado = ((Integer) entero1).intValue() + ((Integer) entero2).intValue();
            :}
            | exp_int operador exp_int operador ope_int
            | exp_int
            ;

parente ::= PARENTESIS_IZQUIERDO ope_int PARENTESIS_DERECHO
            | PARENTESIS_IZQUIERDO ope_int PARENTESIS_DERECHO operador parente
            | operador exp_int parente
            | exp_int operador parente
            ;

operador ::= SUMA:suma
            | RESTA:resta
            | MULTIPLICACION:multi
            | DIVISION:divi
            ;

uso_exp ::= ope_int
            | parente
            ;