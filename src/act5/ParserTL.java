
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package act5;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserTL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserTL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserTL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserTL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\006\004\000\002\006" +
    "\004\000\002\002\005\000\002\002\005\000\002\003\007" +
    "\000\002\003\007\000\002\003\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\006\000\002\021\004\000\002" +
    "\021\003\000\002\021\003\000\002\021\004\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\024\016\000" +
    "\002\026\016\000\002\031\016\000\002\027\016\000\002" +
    "\025\016\000\002\030\013\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\020\003\000\002\020\005\000" +
    "\002\020\002\000\002\022\004\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\033\011\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\032\003\000\002\032\003\000\002" +
    "\035\007\000\002\035\007\000\002\036\003\000\002\036" +
    "\003\000\002\036\005\000\002\036\005\000\002\037\005" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\042\007\000\002" +
    "\042\007\000\002\042\007\000\002\042\005\000\002\044" +
    "\007\000\002\044\007\000\002\044\007\000\002\044\005" +
    "\000\002\046\007\000\002\046\007\000\002\046\005\000" +
    "\002\047\003\000\002\047\003\000\002\045\007\000\002" +
    "\045\007\000\002\045\005\000\002\043\007\000\002\043" +
    "\007\000\002\043\005\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\011\000\002\012\015\000" +
    "\002\013\011\000\002\014\015\000\002\015\006\000\002" +
    "\016\004\000\002\016\004\000\002\040\007\000\002\040" +
    "\011\000\002\041\003\000\002\041\003\000\002\041\005" +
    "\000\002\041\005\000\002\050\005\000\002\052\005\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\054\005\000\002\054\005\000\002\054\005\000\002" +
    "\054\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\004\005\006\001\002\000\004\002\u011e\001" +
    "\002\000\006\006\012\007\015\001\002\000\004\075\007" +
    "\001\002\000\006\003\010\034\011\001\002\000\006\006" +
    "\ufffd\007\ufffd\001\002\000\006\006\ufffe\007\ufffe\001\002" +
    "\000\004\075\u0116\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\075\016\001\002\000\012" +
    "\010\017\011\032\012\025\041\020\001\002\000\020\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\033\uffd3" +
    "\001\002\000\010\010\017\011\032\012\025\001\002\000" +
    "\014\003\ufff5\010\017\011\032\012\025\042\ufff5\001\002" +
    "\000\014\003\ufff0\010\ufff0\011\ufff0\012\ufff0\042\ufff0\001" +
    "\002\000\014\003\ufff1\010\ufff1\011\ufff1\012\ufff1\042\ufff1" +
    "\001\002\000\014\003\uffed\010\uffed\011\uffed\012\uffed\042" +
    "\uffed\001\002\000\020\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\033\uffd1\001\002\000\014\003\uffef\010" +
    "\uffef\011\uffef\012\uffef\042\uffef\001\002\000\014\003\ufff4" +
    "\010\017\011\032\012\025\042\ufff4\001\002\000\014\003" +
    "\uffee\010\uffee\011\uffee\012\uffee\042\uffee\001\002\000\014" +
    "\003\ufff2\010\ufff2\011\ufff2\012\ufff2\042\ufff2\001\002\000" +
    "\020\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\033\uffd2\001\002\000\004\003\u0110\001\002\000\020\014" +
    "\042\015\043\016\036\017\037\020\041\021\040\033\035" +
    "\001\002\000\004\015\u0109\001\002\000\004\075\377\001" +
    "\002\000\004\075\365\001\002\000\004\075\353\001\002" +
    "\000\004\075\341\001\002\000\004\075\332\001\002\000" +
    "\004\075\044\001\002\000\004\037\045\001\002\000\020" +
    "\014\050\015\046\016\052\017\047\020\055\021\056\040" +
    "\uffde\001\002\000\004\075\uffe6\001\002\000\004\075\uffe2" +
    "\001\002\000\004\075\uffe1\001\002\000\006\036\330\040" +
    "\uffe0\001\002\000\004\075\uffe4\001\002\000\004\075\327" +
    "\001\002\000\004\040\057\001\002\000\004\075\uffe5\001" +
    "\002\000\004\075\uffe3\001\002\000\004\041\060\001\002" +
    "\000\030\015\064\016\072\017\103\020\073\021\065\024" +
    "\071\026\105\027\066\070\110\071\061\075\100\001\002" +
    "\000\004\037\323\001\002\000\034\015\064\016\072\017" +
    "\103\020\073\021\065\024\071\026\105\027\066\030\uffdb" +
    "\042\uffdb\070\110\071\061\075\100\001\002\000\004\030" +
    "\316\001\002\000\004\075\303\001\002\000\004\075\274" +
    "\001\002\000\004\037\266\001\002\000\034\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\024\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\042\uffc3\070\uffc3\071\uffc3\075\uffc3\001\002\000" +
    "\034\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\024\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\042\uffaf\070\uffaf\071\uffaf\075" +
    "\uffaf\001\002\000\004\037\244\001\002\000\004\075\235" +
    "\001\002\000\004\075\211\001\002\000\034\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\024\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\042\uffc7\070\uffc7\071\uffc7\075\uffc7\001\002\000" +
    "\034\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad\024\uffad" +
    "\026\uffad\027\uffad\030\uffad\042\uffad\070\uffad\071\uffad\075" +
    "\uffad\001\002\000\034\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5\042\uffc5\070" +
    "\uffc5\071\uffc5\075\uffc5\001\002\000\034\015\064\016\072" +
    "\017\103\020\073\021\065\024\071\026\105\027\066\030" +
    "\uffd8\042\uffd8\070\110\071\061\075\100\001\002\000\006" +
    "\037\171\051\170\001\002\000\034\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\042\uffc4\070\uffc4\071\uffc4\075\uffc4\001\002\000\034\015" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\uffae\024\uffae\026\uffae" +
    "\027\uffae\030\uffae\042\uffae\070\uffae\071\uffae\075\uffae\001" +
    "\002\000\004\075\154\001\002\000\034\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\024\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\042\uffc6\070\uffc6\071\uffc6\075\uffc6\001\002\000\004" +
    "\037\125\001\002\000\034\015\064\016\072\017\103\020" +
    "\073\021\065\024\071\026\105\027\066\030\uffd6\042\uffd6" +
    "\070\110\071\061\075\100\001\002\000\034\015\064\016" +
    "\072\017\103\020\073\021\065\024\071\026\105\027\066" +
    "\030\uffda\042\uffda\070\110\071\061\075\100\001\002\000" +
    "\004\037\111\001\002\000\006\065\114\075\112\001\002" +
    "\000\006\040\uffcb\045\121\001\002\000\004\040\117\001" +
    "\002\000\006\040\uffcc\045\115\001\002\000\006\065\114" +
    "\075\112\001\002\000\004\040\uffca\001\002\000\004\034" +
    "\120\001\002\000\034\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\042\uffcd\070" +
    "\uffcd\071\uffcd\075\uffcd\001\002\000\006\065\114\075\112" +
    "\001\002\000\004\040\uffc9\001\002\000\006\030\uffd9\042" +
    "\uffd9\001\002\000\006\030\uffd5\042\uffd5\001\002\000\004" +
    "\015\127\001\002\000\004\034\133\001\002\000\004\075" +
    "\130\001\002\000\004\051\131\001\002\000\004\073\132" +
    "\001\002\000\004\034\uffa8\001\002\000\016\052\142\053" +
    "\134\054\136\055\135\056\141\057\137\001\002\000\010" +
    "\034\uff95\073\uff95\075\uff95\001\002\000\010\034\uff94\073" +
    "\uff94\075\uff94\001\002\000\010\034\uff93\073\uff93\075\uff93" +
    "\001\002\000\010\034\uff91\073\uff91\075\uff91\001\002\000" +
    "\004\034\143\001\002\000\010\034\uff92\073\uff92\075\uff92" +
    "\001\002\000\010\034\uff96\073\uff96\075\uff96\001\002\000" +
    "\004\075\145\001\002\000\004\040\150\001\002\000\006" +
    "\062\147\064\146\001\002\000\004\040\uffa6\001\002\000" +
    "\004\040\uffa7\001\002\000\004\041\151\001\002\000\030" +
    "\015\064\016\072\017\103\020\073\021\065\024\071\026" +
    "\105\027\066\070\110\071\061\075\100\001\002\000\004" +
    "\042\153\001\002\000\034\015\uffa9\016\uffa9\017\uffa9\020" +
    "\uffa9\021\uffa9\024\uffa9\026\uffa9\027\uffa9\030\uffa9\042\uffa9" +
    "\070\uffa9\071\uffa9\075\uffa9\001\002\000\006\034\156\051" +
    "\155\001\002\000\010\022\162\023\163\072\157\001\002" +
    "\000\034\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\024" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\042\uffb8\070\uffb8\071\uffb8" +
    "\075\uffb8\001\002\000\004\037\166\001\002\000\004\034" +
    "\165\001\002\000\004\034\164\001\002\000\004\034\uffb7" +
    "\001\002\000\004\034\uffb6\001\002\000\034\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\024\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\042\uffb9\070\uffb9\071\uffb9\075\uffb9\001\002\000" +
    "\034\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\024\uffba" +
    "\026\uffba\027\uffba\030\uffba\042\uffba\070\uffba\071\uffba\075" +
    "\uffba\001\002\000\004\040\167\001\002\000\004\034\uffc8" +
    "\001\002\000\004\075\203\001\002\000\006\067\174\075" +
    "\173\001\002\000\004\040\201\001\002\000\006\036\177" +
    "\040\uffa3\001\002\000\006\036\175\040\uffa2\001\002\000" +
    "\006\067\174\075\173\001\002\000\004\040\uffa0\001\002" +
    "\000\006\067\174\075\173\001\002\000\004\040\uffa1\001" +
    "\002\000\004\034\202\001\002\000\034\015\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\024\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\042\uffa5\070\uffa5\071\uffa5\075\uffa5\001\002\000\004" +
    "\037\204\001\002\000\006\067\174\075\173\001\002\000" +
    "\004\040\206\001\002\000\004\034\207\001\002\000\034" +
    "\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\024\uffa4\026" +
    "\uffa4\027\uffa4\030\uffa4\042\uffa4\070\uffa4\071\uffa4\075\uffa4" +
    "\001\002\000\006\030\uffd7\042\uffd7\001\002\000\006\034" +
    "\213\051\212\001\002\000\010\072\157\073\214\074\215" +
    "\001\002\000\034\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021" +
    "\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb\042\uffbb\070\uffbb" +
    "\071\uffbb\075\uffbb\001\002\000\012\045\226\046\224\047" +
    "\222\050\227\001\002\000\014\034\225\045\226\046\224" +
    "\047\222\050\227\001\002\000\004\034\221\001\002\000" +
    "\004\034\220\001\002\000\034\015\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\024\uffbd\026\uffbd\027\uffbd\030\uffbd\042" +
    "\uffbd\070\uffbd\071\uffbd\075\uffbd\001\002\000\034\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\024\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\042\uffbc\070\uffbc\071\uffbc\075\uffbc\001\002" +
    "\000\006\073\uff98\074\uff98\001\002\000\006\073\231\074" +
    "\230\001\002\000\006\073\uff99\074\uff99\001\002\000\034" +
    "\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\024\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\042\uffbe\070\uffbe\071\uffbe\075\uffbe" +
    "\001\002\000\006\073\uff9a\074\uff9a\001\002\000\006\073" +
    "\uff97\074\uff97\001\002\000\004\034\uff9e\001\002\000\004" +
    "\034\uff9c\001\002\000\006\073\233\074\234\001\002\000" +
    "\004\034\uff9b\001\002\000\004\034\uff9d\001\002\000\006" +
    "\034\237\051\236\001\002\000\006\065\241\072\157\001" +
    "\002\000\034\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\024\uffb3\026\uffb3\027\uffb3\030\uffb3\042\uffb3\070\uffb3\071" +
    "\uffb3\075\uffb3\001\002\000\004\034\243\001\002\000\004" +
    "\034\242\001\002\000\034\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\042\uffb5" +
    "\070\uffb5\071\uffb5\075\uffb5\001\002\000\034\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\024\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\042\uffb4\070\uffb4\071\uffb4\075\uffb4\001\002\000" +
    "\006\073\245\075\246\001\002\000\016\052\142\053\134" +
    "\054\136\055\135\056\141\057\137\001\002\000\016\052" +
    "\142\053\134\054\136\055\135\056\141\057\137\001\002" +
    "\000\004\040\250\001\002\000\004\041\251\001\002\000" +
    "\030\015\064\016\072\017\103\020\073\021\065\024\071" +
    "\026\105\027\066\070\110\071\061\075\100\001\002\000" +
    "\004\042\253\001\002\000\036\015\uffac\016\uffac\017\uffac" +
    "\020\uffac\021\uffac\024\uffac\025\254\026\uffac\027\uffac\030" +
    "\uffac\042\uffac\070\uffac\071\uffac\075\uffac\001\002\000\004" +
    "\041\255\001\002\000\030\015\064\016\072\017\103\020" +
    "\073\021\065\024\071\026\105\027\066\070\110\071\061" +
    "\075\100\001\002\000\004\042\257\001\002\000\034\015" +
    "\uffab\016\uffab\017\uffab\020\uffab\021\uffab\024\uffab\026\uffab" +
    "\027\uffab\030\uffab\042\uffab\070\uffab\071\uffab\075\uffab\001" +
    "\002\000\006\073\261\075\262\001\002\000\004\040\uff8e" +
    "\001\002\000\004\040\uff8d\001\002\000\006\073\264\075" +
    "\265\001\002\000\004\040\uff90\001\002\000\004\040\uff8f" +
    "\001\002\000\006\073\245\075\246\001\002\000\004\040" +
    "\270\001\002\000\004\041\271\001\002\000\030\015\064" +
    "\016\072\017\103\020\073\021\065\024\071\026\105\027" +
    "\066\070\110\071\061\075\100\001\002\000\004\042\273" +
    "\001\002\000\034\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa\042\uffaa\070\uffaa" +
    "\071\uffaa\075\uffaa\001\002\000\006\034\276\051\275\001" +
    "\002\000\006\066\300\072\157\001\002\000\034\015\uffb0" +
    "\016\uffb0\017\uffb0\020\uffb0\021\uffb0\024\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\042\uffb0\070\uffb0\071\uffb0\075\uffb0\001\002" +
    "\000\004\034\302\001\002\000\004\034\301\001\002\000" +
    "\034\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\024\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\042\uffb2\070\uffb2\071\uffb2\075" +
    "\uffb2\001\002\000\034\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\042\uffb1\070" +
    "\uffb1\071\uffb1\075\uffb1\001\002\000\006\034\305\051\304" +
    "\001\002\000\006\072\157\073\306\001\002\000\034\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\024\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\042\uffbf\070\uffbf\071\uffbf\075\uffbf\001" +
    "\002\000\014\034\314\045\226\046\224\047\222\050\227" +
    "\001\002\000\004\034\312\001\002\000\004\034\311\001" +
    "\002\000\034\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1" +
    "\024\uffc1\026\uffc1\027\uffc1\030\uffc1\042\uffc1\070\uffc1\071" +
    "\uffc1\075\uffc1\001\002\000\034\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\024\uffc0\026\uffc0\027\uffc0\030\uffc0\042" +
    "\uffc0\070\uffc0\071\uffc0\075\uffc0\001\002\000\004\073\315" +
    "\001\002\000\034\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\024\uffc2\026\uffc2\027\uffc2\030\uffc2\042\uffc2\070\uffc2" +
    "\071\uffc2\075\uffc2\001\002\000\004\034\uff9f\001\002\000" +
    "\004\075\317\001\002\000\004\034\320\001\002\000\004" +
    "\042\321\001\002\000\014\003\uffec\010\uffec\011\uffec\012" +
    "\uffec\042\uffec\001\002\000\006\030\uffdc\042\uffdc\001\002" +
    "\000\006\065\114\075\112\001\002\000\004\040\325\001" +
    "\002\000\004\034\326\001\002\000\034\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\024\uffce\026\uffce\027\uffce\030" +
    "\uffce\042\uffce\070\uffce\071\uffce\075\uffce\001\002\000\006" +
    "\036\uffdd\040\uffdd\001\002\000\020\014\050\015\046\016" +
    "\052\017\047\020\055\021\056\040\uffde\001\002\000\004" +
    "\040\uffdf\001\002\000\004\037\333\001\002\000\020\014" +
    "\050\015\046\016\052\017\047\020\055\021\056\040\uffde" +
    "\001\002\000\004\040\335\001\002\000\004\041\336\001" +
    "\002\000\030\015\064\016\072\017\103\020\073\021\065" +
    "\024\071\026\105\027\066\070\110\071\061\075\100\001" +
    "\002\000\004\042\340\001\002\000\014\003\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\042\uffe7\001\002\000\004\037\342\001" +
    "\002\000\020\014\050\015\046\016\052\017\047\020\055" +
    "\021\056\040\uffde\001\002\000\004\040\344\001\002\000" +
    "\004\041\345\001\002\000\030\015\064\016\072\017\103" +
    "\020\073\021\065\024\071\026\105\027\066\070\110\071" +
    "\061\075\100\001\002\000\004\030\347\001\002\000\004" +
    "\075\350\001\002\000\004\034\351\001\002\000\004\042" +
    "\352\001\002\000\014\003\uffea\010\uffea\011\uffea\012\uffea" +
    "\042\uffea\001\002\000\004\037\354\001\002\000\020\014" +
    "\050\015\046\016\052\017\047\020\055\021\056\040\uffde" +
    "\001\002\000\004\040\356\001\002\000\004\041\357\001" +
    "\002\000\030\015\064\016\072\017\103\020\073\021\065" +
    "\024\071\026\105\027\066\070\110\071\061\075\100\001" +
    "\002\000\004\030\361\001\002\000\004\075\362\001\002" +
    "\000\004\034\363\001\002\000\004\042\364\001\002\000" +
    "\014\003\uffe8\010\uffe8\011\uffe8\012\uffe8\042\uffe8\001\002" +
    "\000\004\037\366\001\002\000\020\014\050\015\046\016" +
    "\052\017\047\020\055\021\056\040\uffde\001\002\000\004" +
    "\040\370\001\002\000\004\041\371\001\002\000\030\015" +
    "\064\016\072\017\103\020\073\021\065\024\071\026\105" +
    "\027\066\070\110\071\061\075\100\001\002\000\004\030" +
    "\373\001\002\000\004\075\374\001\002\000\004\034\375" +
    "\001\002\000\004\042\376\001\002\000\014\003\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\042\uffe9\001\002\000\004\037\u0100" +
    "\001\002\000\020\014\050\015\046\016\052\017\047\020" +
    "\055\021\056\040\uffde\001\002\000\004\040\u0102\001\002" +
    "\000\004\041\u0103\001\002\000\030\015\064\016\072\017" +
    "\103\020\073\021\065\024\071\026\105\027\066\070\110" +
    "\071\061\075\100\001\002\000\004\030\u0105\001\002\000" +
    "\004\075\u0106\001\002\000\004\034\u0107\001\002\000\004" +
    "\042\u0108\001\002\000\014\003\uffeb\010\uffeb\011\uffeb\012" +
    "\uffeb\042\uffeb\001\002\000\004\067\u010a\001\002\000\004" +
    "\051\u010b\001\002\000\006\073\u010d\074\u010c\001\002\000" +
    "\004\034\uffcf\001\002\000\004\034\uffd0\001\002\000\004" +
    "\034\u010f\001\002\000\014\003\uffd4\010\uffd4\011\uffd4\012" +
    "\uffd4\042\uffd4\001\002\000\010\002\ufff7\003\ufff7\042\ufff7" +
    "\001\002\000\006\003\ufff3\042\ufff3\001\002\000\006\003" +
    "\ufff6\042\ufff6\001\002\000\006\003\u0114\042\u0115\001\002" +
    "\000\010\002\ufff8\003\ufff8\042\ufff8\001\002\000\010\002" +
    "\ufff9\003\ufff9\042\ufff9\001\002\000\006\007\015\041\u0118" +
    "\001\002\000\004\042\u011c\001\002\000\004\007\015\001" +
    "\002\000\006\003\u011a\042\u011b\001\002\000\004\002\ufffb" +
    "\001\002\000\004\002\ufffc\001\002\000\004\003\u011d\001" +
    "\002\000\004\002\ufffa\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\006\002\004\006\003\001\001\000\002\001" +
    "\001\000\006\003\013\004\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\021\032\023\020\024\030\025\022\026" +
    "\021\027\023\030\027\031\025\033\026\034\033\001\001" +
    "\000\002\001\001\000\026\021\u0112\023\020\024\030\025" +
    "\022\026\021\027\023\030\027\031\025\033\026\034\033" +
    "\001\001\000\026\021\u0111\023\020\024\030\025\022\026" +
    "\021\027\023\030\027\031\025\033\026\034\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\021\u0110\023\020" +
    "\024\030\025\022\026\021\027\023\030\027\031\025\033" +
    "\026\034\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\052\020\053\022\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\005\062\007\106\011\061\012\067" +
    "\013\101\014\074\035\076\040\105\042\073\043\075\044" +
    "\100\045\103\046\066\001\001\000\002\001\001\000\034" +
    "\005\321\007\106\011\061\012\067\013\101\014\074\035" +
    "\076\040\105\042\073\043\075\044\100\045\103\046\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\207\007\106\011\061\012\067\013\101\014\074\035" +
    "\076\040\105\042\073\043\075\044\100\045\103\046\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\123\007\106\011\061\012\067\013\101\014" +
    "\074\035\076\040\105\042\073\043\075\044\100\045\103" +
    "\046\066\001\001\000\034\005\122\007\106\011\061\012" +
    "\067\013\101\014\074\035\076\040\105\042\073\043\075" +
    "\044\100\045\103\046\066\001\001\000\002\001\001\000" +
    "\004\036\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\151" +
    "\007\106\011\061\012\067\013\101\014\074\035\076\040" +
    "\105\042\073\043\075\044\100\045\103\046\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\037\160\047\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\175\001\001\000\002\001" +
    "\001\000\004\041\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\204\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\215\052\216\001\001\000\002\001\001\000\004\051\231" +
    "\001\001\000\004\051\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\246\001\001" +
    "\000\004\010\262\001\001\000\004\010\257\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\251\007\106" +
    "\011\061\012\067\013\101\014\074\035\076\040\105\042" +
    "\073\043\075\044\100\045\103\046\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
    "\255\007\106\011\061\012\067\013\101\014\074\035\076" +
    "\040\105\042\073\043\075\044\100\045\103\046\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\005\271\007" +
    "\106\011\061\012\067\013\101\014\074\035\076\040\105" +
    "\042\073\043\075\044\100\045\103\046\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\037\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\037\306\050\307\001\001\000\002\001" +
    "\001\000\004\051\312\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\323\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\052\020\330\022\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\052\020\333\022\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\336" +
    "\007\106\011\061\012\067\013\101\014\074\035\076\040" +
    "\105\042\073\043\075\044\100\045\103\046\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\052\020\342\022\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\345\007\106\011\061\012" +
    "\067\013\101\014\074\035\076\040\105\042\073\043\075" +
    "\044\100\045\103\046\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\052\020\354\022" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\357\007\106\011\061\012\067\013\101\014\074\035" +
    "\076\040\105\042\073\043\075\044\100\045\103\046\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\052\020\366\022\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\371\007\106\011\061" +
    "\012\067\013\101\014\074\035\076\040\105\042\073\043" +
    "\075\044\100\045\103\046\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\052\020\u0100" +
    "\022\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\u0103\007\106\011\061\012\067\013\101\014\074" +
    "\035\076\040\105\042\073\043\075\044\100\045\103\046" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\u010d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\u0116\001\001\000\002\001\001\000\004\004\u0118" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserTL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserTL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserTL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static TablaSimbolos tabla=new TablaSimbolos();
    public static Simbolo simbolo;

    public void syntax_error(Symbol s) {
        report_error("Error de sintaxis en linea: " + (s.left) + " , columna: " + (s.right + 1) + ", simbolo: " + s.value, null);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("", null);
    }

    Object resultado;


    public static int contador = 0;
    public static String ope;
    public static Boolean siono;
    


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserTL$actions {
  private final ParserTL parser;

  /** Constructor */
  CUP$ParserTL$actions(ParserTL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action_part00000000(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserTL$result;

      /* select the action based on the action number */
      switch (CUP$ParserTL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaraciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		RESULT = start_val;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserTL$parser.done_parsing();
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaraciones ::= dec_using dec_namespace 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= dec_using dec_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_using ::= USING IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de using---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_using ::= USING IDENTIFICADOR error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta ';'");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                    System.out.println("---Declaracion de namespace---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta '}' en namespace");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_namespace ::= NAMESPACE IDENTIFICADOR dec_clase LLAVE_DERECHA error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta '{' en namespace");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de clase---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta '}' en clase");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_clase ::= CLASS IDENTIFICADOR cuerpo_clase error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta '{' en clase");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_clase ::= metodos cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_clase ::= metodos 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo_clase ::= dec_constantes 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo_clase ::= dec_constantes cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodos ::= metodo_int 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodos ::= metodo_char 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodos ::= metodo_string 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodos ::= metodo_float 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // metodos ::= metodo_void 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // metodos ::= metodo_bool 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // metodo_int ::= mod_acceso INT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION ENTERA----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_int",18, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // metodo_string ::= mod_acceso STRING IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION STRING----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_string",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // metodo_float ::= mod_acceso FLOAT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION FLOAT----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_float",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // metodo_bool ::= mod_acceso BOOL IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION BOLEANO----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_bool",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // metodo_char ::= mod_acceso CHAR IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION CARACTER----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_char",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // metodo_void ::= mod_acceso VOID IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION VACIA----------------\n\n");;
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_void",22, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_metodo ::= INT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_metodo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_metodo ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_metodo ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_metodo ::= BOOL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_metodo ::= VOID 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros ::= 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametro ::= tipo_metodo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametro",16, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cuerpo ::= estructura_control cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo ::= dec_variables 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo ::= dec_variables cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo ::= impresion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo ::= impresion cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo ::= llamar_funcion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cuerpo ::= llamar_funcion cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec_constantes ::= mod_acceso CONST INT CONSTANTE ASIGNACION val PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("Declaracion de constante");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_constantes",25, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // mod_acceso ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",26, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // mod_acceso ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",26, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // mod_acceso ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",26, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // val ::= NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",24, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // val ::= NDECIMAL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",24, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // impresion ::= CWLINE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Impresion de consola con salto de linea---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("impresion",27, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // impresion ::= CWRITE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Impresion de consola sin salto de linea---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("impresion",27, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // imprimir ::= CADENA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // imprimir ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // imprimir ::= CADENA SUMA imprimir 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // imprimir ::= IDENTIFICADOR SUMA imprimir 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lecturas ::= CRLINE PARENTESIS_IZQUIERDO PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("lecturas",29, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_variables ::= tipo_int 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dec_variables ::= tipo_string 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec_variables ::= tipo_char 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec_variables ::= tipo_float 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dec_variables ::= tipo_bool 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo_int ::= INT IDENTIFICADOR ASIGNACION NENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable entera inicializada--");
            
            parser.simbolo=new Simbolo(id, "int", entero , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = "+entero);
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_int ::= INT IDENTIFICADOR ASIGNACION ope_int PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		
            System.out.println("--Variable entera inicializada con operacion--");
            if("error".equals(resultado)){
                System.err.println("Error division entre 0");
            }else{
                parser.simbolo=new Simbolo(id, "int", ""+resultado , "metodo", false);
                if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = "+resultado);
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Variable NO agregada");
            }
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_int ::= INT IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable entera de lectura--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_int ::= INT IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable entera--");
            parser.simbolo=new Simbolo(id, "int", "0" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = 0");
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_float ::= FLOAT IDENTIFICADOR ASIGNACION NDECIMAL PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String flotante = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable flotante--");
            parser.simbolo=new Simbolo(id, "float", ""+flotante , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_float ::= FLOAT IDENTIFICADOR ASIGNACION ope_float PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		
            System.out.println("--Variable float inicializada con operacion--");
            if("error".equals(resultado)){
                System.err.println("Error division entre 0");
            }else{
                parser.simbolo=new Simbolo(id, "float", ""+resultado , "metodo", false);
                if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = "+resultado);
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Variable NO agregada");
            }
            }
            
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_float ::= FLOAT IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable flotante de lectura--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_float ::= FLOAT IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable flotante--");
            parser.simbolo=new Simbolo(id, "float", "0" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_bool ::= BOOL IDENTIFICADOR ASIGNACION boleano PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable boleano--");
            
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_bool",36, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo_bool ::= BOOL IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable boleano de lectura--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_bool",36, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_bool ::= BOOL IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable boleano--");
            
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_bool",36, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // boleano ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("boleano",37, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // boleano ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("boleano",37, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_string ::= STRING IDENTIFICADOR ASIGNACION CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable cadena--");
            parser.simbolo=new Simbolo(id, "string", ""+cadena , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_string",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo_string ::= STRING IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable boleano de lectura--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_string",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo_string ::= STRING IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable cadena--");
            parser.simbolo=new Simbolo(id, "string", "" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_string",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo_char ::= CHAR IDENTIFICADOR ASIGNACION CARACTER PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		Object caracter = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable caracter--");
            parser.simbolo=new Simbolo(id, "char", ""+caracter , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_char",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo_char ::= CHAR IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable caracter de lectura--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_char",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo_char ::= CHAR IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable caracter--");
            parser.simbolo=new Simbolo(id, "char", "" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_char",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia_if ::= IF PARENTESIS_IZQUIERDO exp_log PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia if---");
                if(siono){
                    System.out.println("expresion verdadera");
                }
                else
                    System.out.println("expresion falsa");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia_if ::= IF PARENTESIS_IZQUIERDO exp_log PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA ELSE LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia if con else---");
                if(siono){
                    System.out.println("expresion verdadera");
                }
                else
                    System.out.println("expresion falsa");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia_while ::= WHILE PARENTESIS_IZQUIERDO exp_log PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                    System.out.println("---Sentencia while---");
                    if(siono){
                    System.out.println("expresion verdadera");
                }
                else
                    System.out.println("expresion falsa");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_while",9, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia_for ::= FOR PARENTESIS_IZQUIERDO for_init PUNTO_COMA termino_logico PUNTO_COMA for_update PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.out.println("---Sentencia for---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_for",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_init ::= INT IDENTIFICADOR ASIGNACION NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_init",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // for_update ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_update",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // for_update ::= IDENTIFICADOR DECREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_update",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // llamar_funcion ::= IDENTIFICADOR PARENTESIS_IZQUIERDO pasar_parametros PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("---Se llama a funcion---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("llamar_funcion",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // llamar_funcion ::= IDENTIFICADOR ASIGNACION IDENTIFICADOR PARENTESIS_IZQUIERDO pasar_parametros PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("---Se llama a funcion y se asigna a variable---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("llamar_funcion",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // pasar_parametros ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // pasar_parametros ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // pasar_parametros ::= IDENTIFICADOR COMA pasar_parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // pasar_parametros ::= CONSTANTE COMA pasar_parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ope_int ::= NENTERO operador NENTERO 
            {
              Object RESULT =null;
		int entero1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int entero1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String entero1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int entero2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int entero2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String entero2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                resultado = Operacion.convInt(entero1, ""+ope, entero2);
                
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("ope_int",38, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ope_float ::= NDECIMAL operador NDECIMAL 
            {
              Object RESULT =null;
		int decimal1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int decimal1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String decimal1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int decimal2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int decimal2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String decimal2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                resultado = Operacion.convFloat(decimal1, ""+ope, decimal2);
                
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("ope_float",40, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ope_float ::= NENTERO operador NDECIMAL 
            {
              Object RESULT =null;
		int decimal1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int decimal1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String decimal1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int decimal2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int decimal2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String decimal2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                resultado = Operacion.convFloat(decimal1, ""+ope, decimal2);
                
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("ope_float",40, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ope_float ::= NDECIMAL operador NENTERO 
            {
              Object RESULT =null;
		int decimal1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int decimal1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String decimal1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int decimal2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int decimal2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String decimal2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                resultado = Operacion.convFloat(decimal1, ""+ope, decimal2);
                
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("ope_float",40, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ope_float ::= NENTERO operador NENTERO 
            {
              Object RESULT =null;
		int decimal1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int decimal1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String decimal1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int decimal2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int decimal2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String decimal2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                resultado = Operacion.convFloat(decimal1, ""+ope, decimal2);
                
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("ope_float",40, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operador ::= SUMA 
            {
              Object RESULT =null;
		int sumaleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int sumaright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object suma = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+suma;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("operador",39, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operador ::= RESTA 
            {
              Object RESULT =null;
		int restaleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object resta = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+resta;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("operador",39, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operador ::= MULTIPLICACION 
            {
              Object RESULT =null;
		int multileft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int multiright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object multi = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+multi;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("operador",39, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operador ::= DIVISION 
            {
              Object RESULT =null;
		int divileft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int diviright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object divi = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+divi;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("operador",39, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // termino_logico ::= IGUALDAD 
            {
              Object RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+igual;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // termino_logico ::= DESIGUALDAD 
            {
              Object RESULT =null;
		int noigualleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int noigualright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object noigual = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+noigual;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // termino_logico ::= MAYOR_QUE 
            {
              Object RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object mayor = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+mayor;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // termino_logico ::= MENOR_QUE 
            {
              Object RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+menor;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // termino_logico ::= MENOR_O_IGUAL_QUE 
            {
              Object RESULT =null;
		int menigualleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int menigualright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object menigual = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+menigual;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // termino_logico ::= MAYOR_O_IGUAL_QUE 
            {
              Object RESULT =null;
		int maigualleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int maigualright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object maigual = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+maigual;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // exp_log ::= NENTERO termino_logico NENTERO 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                siono = Operacion.verifico(num1, ""+ope, num2);
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_log",42, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // exp_log ::= NENTERO termino_logico IDENTIFICADOR 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                String nombre = parser.tabla.consultaValor(""+id);
                siono = Operacion.verifico(num1, ""+ope, nombre);
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_log",42, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // exp_log ::= IDENTIFICADOR termino_logico NENTERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                String nombre = parser.tabla.consultaValor(""+id);
                siono = Operacion.verifico(nombre, ""+ope, num1);
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_log",42, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // exp_log ::= IDENTIFICADOR termino_logico IDENTIFICADOR 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                String nombre1 = parser.tabla.consultaValor(""+id1);
                String nombre2 = parser.tabla.consultaValor(""+id2);
                siono = Operacion.verifico(nombre1, ""+ope, nombre2);
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_log",42, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserTL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
              return CUP$ParserTL$do_action_part00000000(
                               CUP$ParserTL$act_num,
                               CUP$ParserTL$parser,
                               CUP$ParserTL$stack,
                               CUP$ParserTL$top);
    }
}

}
