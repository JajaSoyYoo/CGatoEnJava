
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package act5;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserTL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserTL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserTL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserTL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\007\004\000\002\007" +
    "\004\000\002\003\005\000\002\003\005\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\006\000\002\042\004\000\002" +
    "\042\003\000\002\006\004\000\002\006\003\000\002\006" +
    "\003\000\002\006\004\000\002\037\011\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\041\003\000\002" +
    "\041\005\000\002\043\004\000\002\010\004\000\002\010" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\012\006\000" +
    "\002\016\006\000\002\015\006\000\002\021\003\000\002" +
    "\021\003\000\002\014\006\000\002\013\006\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\011" +
    "\000\002\031\015\000\002\032\011\000\002\033\015\000" +
    "\002\035\006\000\002\036\004\000\002\036\004\000\002" +
    "\022\003\000\002\022\003\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\025\003\000\002\025\005" +
    "\000\002\025\005\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\005\000\002\024\005\000\002" +
    "\024\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\005\006\001\002\000\004\002\230\001" +
    "\002\000\006\006\012\007\015\001\002\000\004\064\007" +
    "\001\002\000\006\003\010\033\011\001\002\000\006\006" +
    "\ufffd\007\ufffd\001\002\000\006\006\ufffe\007\ufffe\001\002" +
    "\000\004\064\220\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\064\016\001\002\000\026" +
    "\015\022\016\032\017\043\020\033\021\023\024\030\026" +
    "\044\027\024\040\034\064\041\001\002\000\024\015\022" +
    "\016\032\017\043\020\033\021\023\024\030\026\044\027" +
    "\024\064\041\001\002\000\026\003\ufff3\015\022\016\032" +
    "\017\043\020\033\021\023\024\030\026\044\027\024\041" +
    "\ufff3\001\002\000\006\003\ufff5\041\ufff5\001\002\000\004" +
    "\064\213\001\002\000\004\064\210\001\002\000\004\036" +
    "\202\001\002\000\006\003\uffe0\033\uffe0\001\002\000\026" +
    "\003\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\024" +
    "\uffd8\026\uffd8\027\uffd8\041\uffd8\001\002\000\004\003\201" +
    "\001\002\000\004\036\167\001\002\000\006\003\165\033" +
    "\166\001\002\000\004\064\162\001\002\000\004\064\157" +
    "\001\002\000\024\015\022\016\032\017\043\020\033\021" +
    "\023\024\030\026\044\027\024\064\041\001\002\000\006" +
    "\003\uffe4\033\uffe4\001\002\000\006\003\uffe2\033\uffe2\001" +
    "\002\000\026\003\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\024\uffd6\026\uffd6\027\uffd6\041\uffd6\001\002\000" +
    "\026\003\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7" +
    "\024\uffd7\026\uffd7\027\uffd7\041\uffd7\001\002\000\004\036" +
    "\133\001\002\000\006\003\uffe3\033\uffe3\001\002\000\004" +
    "\064\126\001\002\000\004\036\050\001\002\000\006\003" +
    "\uffe1\033\uffe1\001\002\000\026\003\ufff2\015\022\016\032" +
    "\017\043\020\033\021\023\024\030\026\044\027\024\041" +
    "\ufff2\001\002\000\006\003\ufff1\041\ufff1\001\002\000\004" +
    "\015\052\001\002\000\004\033\056\001\002\000\004\064" +
    "\053\001\002\000\004\050\054\001\002\000\004\066\055" +
    "\001\002\000\004\033\uffd1\001\002\000\012\036\064\064" +
    "\062\065\057\066\060\001\002\000\034\003\uffc4\033\uffc4" +
    "\037\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\001\002\000\034" +
    "\003\uffc5\033\uffc5\037\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\001\002\000\034\003\uffc9\033\uffc9\037\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\001\002\000\034\003\uffc6\033\uffc6\037" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000\004\033" +
    "\115\001\002\000\012\036\064\064\062\065\057\066\060" +
    "\001\002\000\022\044\100\045\073\051\102\052\074\053" +
    "\076\054\075\055\101\056\077\001\002\000\034\003\uffcc" +
    "\033\uffcc\037\uffcc\044\uffcc\045\uffcc\046\067\047\070\051" +
    "\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc\001\002" +
    "\000\012\036\064\064\062\065\057\066\060\001\002\000" +
    "\012\036\064\064\062\065\057\066\060\001\002\000\034" +
    "\003\uffc7\033\uffc7\037\uffc7\044\uffc7\045\uffc7\046\uffc7\047" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\001\002\000\034\003\uffc8\033\uffc8\037\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\001\002\000\012\036\064\064\062\065" +
    "\057\066\060\001\002\000\012\036\064\064\062\065\057" +
    "\066\060\001\002\000\012\036\064\064\062\065\057\066" +
    "\060\001\002\000\012\036\064\064\062\065\057\066\060" +
    "\001\002\000\012\036\064\064\062\065\057\066\060\001" +
    "\002\000\012\036\064\064\062\065\057\066\060\001\002" +
    "\000\012\036\064\064\062\065\057\066\060\001\002\000" +
    "\012\036\064\064\062\065\057\066\060\001\002\000\012" +
    "\033\uffc0\037\uffc0\044\100\045\073\001\002\000\012\033" +
    "\uffbc\037\uffbc\044\100\045\073\001\002\000\034\003\uffcb" +
    "\033\uffcb\037\uffcb\044\uffcb\045\uffcb\046\067\047\070\051" +
    "\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\001\002" +
    "\000\012\033\uffbb\037\uffbb\044\100\045\073\001\002\000" +
    "\012\033\uffbd\037\uffbd\044\100\045\073\001\002\000\012" +
    "\033\uffbe\037\uffbe\044\100\045\073\001\002\000\012\033" +
    "\uffbf\037\uffbf\044\100\045\073\001\002\000\034\003\uffca" +
    "\033\uffca\037\uffca\044\uffca\045\uffca\046\067\047\070\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\001\002" +
    "\000\010\037\114\044\100\045\073\001\002\000\034\003" +
    "\uffc3\033\uffc3\037\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\001" +
    "\002\000\004\064\117\001\002\000\004\037\122\001\002" +
    "\000\006\061\121\063\120\001\002\000\004\037\uffcf\001" +
    "\002\000\004\037\uffd0\001\002\000\004\040\123\001\002" +
    "\000\022\015\022\016\032\017\043\020\033\021\023\024" +
    "\030\026\044\027\024\001\002\000\004\041\125\001\002" +
    "\000\026\003\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\024\uffd2\026\uffd2\027\uffd2\041\uffd2\001\002\000\004" +
    "\050\127\001\002\000\006\022\131\023\132\001\002\000" +
    "\006\003\uffdd\033\uffdd\001\002\000\006\003\uffdc\033\uffdc" +
    "\001\002\000\006\003\uffdb\033\uffdb\001\002\000\016\014" +
    "\136\015\134\016\140\017\135\020\143\021\144\001\002" +
    "\000\004\064\uffef\001\002\000\004\064\uffeb\001\002\000" +
    "\004\064\uffea\001\002\000\006\035\152\037\uffe9\001\002" +
    "\000\004\064\uffed\001\002\000\004\064\151\001\002\000" +
    "\004\037\145\001\002\000\004\064\uffee\001\002\000\004" +
    "\064\uffec\001\002\000\004\040\146\001\002\000\022\015" +
    "\022\016\032\017\043\020\033\021\023\024\030\026\044" +
    "\027\024\001\002\000\004\041\150\001\002\000\024\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\024\ufff0\026\ufff0" +
    "\027\ufff0\064\ufff0\001\002\000\006\035\uffe7\037\uffe7\001" +
    "\002\000\016\014\136\015\134\016\140\017\135\020\143" +
    "\021\144\001\002\000\004\037\uffe8\001\002\000\006\003" +
    "\155\041\156\001\002\000\010\002\ufff8\003\ufff8\041\ufff8" +
    "\001\002\000\010\002\ufff9\003\ufff9\041\ufff9\001\002\000" +
    "\004\050\160\001\002\000\012\036\064\064\062\065\057" +
    "\066\060\001\002\000\012\003\uffde\033\uffde\044\100\045" +
    "\073\001\002\000\004\050\163\001\002\000\004\067\164" +
    "\001\002\000\006\003\uffd9\033\uffd9\001\002\000\026\003" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\024\uffe5" +
    "\026\uffe5\027\uffe5\041\uffe5\001\002\000\026\003\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\024\uffe6\026\uffe6" +
    "\027\uffe6\041\uffe6\001\002\000\012\036\064\064\062\065" +
    "\057\066\060\001\002\000\004\037\171\001\002\000\004" +
    "\040\172\001\002\000\022\015\022\016\032\017\043\020" +
    "\033\021\023\024\030\026\044\027\024\001\002\000\004" +
    "\041\174\001\002\000\030\003\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\024\uffd5\025\175\026\uffd5\027\uffd5" +
    "\041\uffd5\001\002\000\004\040\176\001\002\000\022\015" +
    "\022\016\032\017\043\020\033\021\023\024\030\026\044" +
    "\027\024\001\002\000\004\041\200\001\002\000\026\003" +
    "\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\024\uffd4" +
    "\026\uffd4\027\uffd4\041\uffd4\001\002\000\010\002\ufff7\003" +
    "\ufff7\041\ufff7\001\002\000\012\036\064\064\062\065\057" +
    "\066\060\001\002\000\004\037\204\001\002\000\004\040" +
    "\205\001\002\000\022\015\022\016\032\017\043\020\033" +
    "\021\023\024\030\026\044\027\024\001\002\000\004\041" +
    "\207\001\002\000\026\003\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\024\uffd3\026\uffd3\027\uffd3\041\uffd3\001" +
    "\002\000\004\050\211\001\002\000\004\070\212\001\002" +
    "\000\006\003\uffda\033\uffda\001\002\000\004\050\214\001" +
    "\002\000\004\066\215\001\002\000\006\003\uffdf\033\uffdf" +
    "\001\002\000\006\003\ufff4\041\ufff4\001\002\000\006\003" +
    "\ufff6\041\ufff6\001\002\000\006\007\015\040\222\001\002" +
    "\000\004\041\226\001\002\000\004\007\015\001\002\000" +
    "\006\003\224\041\225\001\002\000\004\002\ufffb\001\002" +
    "\000\004\002\ufffc\001\002\000\004\003\227\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\006\003\004\007\003\001\001\000\002\001" +
    "\001\000\006\004\013\005\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\006\020\010\045\011\030\012\034\013" +
    "\044\014\035\015\024\016\041\030\017\031\025\032\037" +
    "\033\036\037\016\042\026\001\001\000\036\006\020\010" +
    "\045\011\030\012\034\013\044\014\035\015\024\016\041" +
    "\030\017\031\025\032\037\033\036\037\016\042\216\001" +
    "\001\000\032\006\215\010\045\011\030\012\034\013\044" +
    "\014\035\015\024\016\041\030\017\031\025\032\037\033" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\006\020\010" +
    "\045\011\030\012\034\013\044\014\035\015\024\016\041" +
    "\030\017\031\025\032\037\033\036\037\016\042\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\046\010\045\011\030\012\034\013\044\014\035\015" +
    "\024\016\041\030\017\031\025\032\037\033\036\001\001" +
    "\000\002\001\001\000\004\035\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\064\025\065\026\060\027" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\023" +
    "\112\025\065\026\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\071\001\001\000\004\026\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\111" +
    "\026\060\001\001\000\010\023\110\025\065\026\060\001" +
    "\001\000\010\023\107\025\065\026\060\001\001\000\010" +
    "\023\106\025\065\026\060\001\001\000\010\023\105\025" +
    "\065\026\060\001\001\000\006\025\104\026\060\001\001" +
    "\000\010\023\103\025\065\026\060\001\001\000\010\023" +
    "\102\025\065\026\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\123\010" +
    "\045\011\030\012\034\013\044\014\035\015\024\016\041" +
    "\030\017\031\025\032\037\033\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\040\140\041\141\043\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\146\010\045\011\030\012\034\013\044\014\035" +
    "\015\024\016\041\030\017\031\025\032\037\033\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\040\140\041\152\043\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\160\025\065\026\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\064\025\065\026\060\027\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\172\010\045\011" +
    "\030\012\034\013\044\014\035\015\024\016\041\030\017" +
    "\031\025\032\037\033\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\176\010\045" +
    "\011\030\012\034\013\044\014\035\015\024\016\041\030" +
    "\017\031\025\032\037\033\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\064\025" +
    "\065\026\060\027\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\205\010\045\011\030\012\034\013" +
    "\044\014\035\015\024\016\041\030\017\031\025\032\037" +
    "\033\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\220\001\001\000\002" +
    "\001\001\000\004\005\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserTL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserTL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserTL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        report_error("Error de sintaxis en linea: " + (s.left) + " , columna: " + (s.right + 1) + ", simbolo: " + s.value, null);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("", null);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserTL$actions {
  private final ParserTL parser;

  /** Constructor */
  CUP$ParserTL$actions(ParserTL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action_part00000000(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserTL$result;

      /* select the action based on the action number */
      switch (CUP$ParserTL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaraciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		RESULT = start_val;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserTL$parser.done_parsing();
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaraciones ::= dec_using dec_namespace 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= dec_using dec_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_using ::= USING IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de using---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_using ::= USING IDENTIFICADOR error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta ';'");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                    System.out.println("---Declaracion de namespace---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta '}' en namespace");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_namespace ::= NAMESPACE IDENTIFICADOR dec_clase LLAVE_DERECHA error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta '{' en namespace");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de clase---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta '}' en clase");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_clase ::= CLASS IDENTIFICADOR cuerpo_clase error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta '{' en clase");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_clase ::= metodo cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_clase ::= cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo ::= estructura_control cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo ::= dec_variables 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo ::= dec_variables cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodo ::= IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("---Declaracion de metodo---");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo",29, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_metodo ::= INT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo_metodo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo_metodo ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo_metodo ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo_metodo ::= BOOL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_metodo ::= VOID 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametro ::= tipo_metodo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametro",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // dec_variables ::= tipo_variable PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dec_variables ::= tipo_variable error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta ';' en variable");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_variable ::= tipo_int 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_variable ::= tipo_float 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_variable ::= tipo_char 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_variable ::= tipo_string 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_variable ::= tipo_bool 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_int ::= INT IDENTIFICADOR ASIGNACION NENTERO 
            {
              Object RESULT =null;
		
            System.out.println("--Variable entera--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_float ::= FLOAT IDENTIFICADOR ASIGNACION exp_aritmetica 
            {
              Object RESULT =null;
		
            System.out.println("--Variable flotante--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_bool ::= BOOL IDENTIFICADOR ASIGNACION valor_bool 
            {
              Object RESULT =null;
		
            System.out.println("--Variable boleana--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_bool",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valor_bool ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("valor_bool",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valor_bool ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("valor_bool",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo_char ::= CHAR IDENTIFICADOR ASIGNACION CARACTER 
            {
              Object RESULT =null;
		
            System.out.println("--Variable caracter--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_char",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipo_string ::= STRING IDENTIFICADOR ASIGNACION CADENA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable cadena--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_string",9, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",22, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_if ::= IF PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia if---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_if ::= IF PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA ELSE LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia if con else---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sentencia_while ::= WHILE PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                    System.out.println("---Sentencia while---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_while",24, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia_for ::= FOR PARENTESIS_IZQUIERDO for_init PUNTO_COMA termino_logico PUNTO_COMA for_update PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.out.println("---Sentencia for---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_for",25, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // for_init ::= INT IDENTIFICADOR ASIGNACION NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_init",27, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // for_update ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_update",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // for_update ::= IDENTIFICADOR DECREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_update",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= exp_logica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion",16, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp_aritmetica ::= termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp_aritmetica ::= exp_aritmetica SUMA termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp_aritmetica ::= exp_aritmetica RESTA termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // termino ::= termino MULTIPLICACION factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // termino ::= termino DIVISION factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= NDECIMAL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= PARENTESIS_IZQUIERDO exp_aritmetica PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // exp_logica ::= termino_logico Y_LOGICO termino_logico 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_logica",18, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // exp_logica ::= termino_logico O_LOGICO termino_logico 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_logica",18, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // termino_logico ::= exp_aritmetica IGUALDAD exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // termino_logico ::= exp_aritmetica DESIGUALDAD exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // termino_logico ::= exp_aritmetica MAYOR_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // termino_logico ::= exp_aritmetica MENOR_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // termino_logico ::= exp_aritmetica MENOR_O_IGUAL_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // termino_logico ::= exp_aritmetica MAYOR_O_IGUAL_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserTL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
              return CUP$ParserTL$do_action_part00000000(
                               CUP$ParserTL$act_num,
                               CUP$ParserTL$parser,
                               CUP$ParserTL$stack,
                               CUP$ParserTL$top);
    }
}

}
