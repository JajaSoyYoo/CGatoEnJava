
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package act5;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserTL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserTL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserTL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserTL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\207\000\002\002\004\000\002\006\004\000\002\006" +
    "\004\000\002\002\004\000\002\060\004\000\002\060\007" +
    "\000\002\060\005\000\002\060\010\000\002\003\007\000" +
    "\002\003\007\000\002\003\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\006\000\002\021\004\000\002\021" +
    "\003\000\002\021\003\000\002\021\004\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\024\016\000\002\026\016\000\002\031\016\000\002\027" +
    "\016\000\002\025\016\000\002\030\013\000\002\054\012" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\020\003\000\002\020\005\000\002\020\002\000\002\022" +
    "\004\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\004\000\002\033\003\000\002" +
    "\033\003\000\002\057\011\000\002\056\011\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\032\003" +
    "\000\002\032\003\000\002\035\007\000\002\035\007\000" +
    "\002\036\003\000\002\036\003\000\002\036\005\000\002" +
    "\036\005\000\002\037\005\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\042\007\000\002\042\007\000\002\042\007\000" +
    "\002\042\005\000\002\042\005\000\002\044\007\000\002" +
    "\044\007\000\002\044\007\000\002\044\005\000\002\046" +
    "\007\000\002\046\007\000\002\046\005\000\002\047\003" +
    "\000\002\047\003\000\002\045\007\000\002\045\007\000" +
    "\002\045\005\000\002\043\007\000\002\043\007\000\002" +
    "\043\005\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\012\011\000\002\012\015" +
    "\000\002\013\011\000\002\014\014\000\002\015\006\000" +
    "\002\016\004\000\002\016\004\000\002\062\011\000\002" +
    "\063\003\000\002\063\004\000\002\063\005\000\002\064" +
    "\010\000\002\064\007\000\002\061\007\000\002\040\007" +
    "\000\002\040\011\000\002\040\006\000\002\041\003\000" +
    "\002\041\003\000\002\041\005\000\002\041\005\000\002" +
    "\050\005\000\002\052\005\000\002\052\005\000\002\052" +
    "\005\000\002\052\005\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\055\005\000\002\055" +
    "\005\000\002\055\005\000\002\055\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\004\005\007\001\002\000\004\002\u014b\001" +
    "\002\000\004\041\u0149\001\002\000\006\006\015\007\020" +
    "\001\002\000\004\103\010\001\002\000\006\041\ufffe\042" +
    "\011\001\002\000\004\103\012\001\002\000\004\041\013" +
    "\001\002\000\010\005\007\006\ufffc\007\ufffc\001\002\000" +
    "\006\006\ufffa\007\ufffa\001\002\000\004\103\u0141\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\000\001\002\000" +
    "\004\103\021\001\002\000\014\010\032\011\024\012\035" +
    "\034\033\046\036\001\002\000\016\003\uffe9\010\uffe9\011" +
    "\uffe9\012\uffe9\034\uffe9\047\uffe9\001\002\000\020\014\357" +
    "\015\362\016\355\017\356\020\361\021\360\036\354\001" +
    "\002\000\020\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\uffca\036\uffca\001\002\000\016\003\uffea\010\uffea\011" +
    "\uffea\012\uffea\034\uffea\047\uffea\001\002\000\016\003\uffed" +
    "\010\uffed\011\uffed\012\uffed\034\uffed\047\uffed\001\002\000" +
    "\004\003\353\001\002\000\016\003\uffec\010\uffec\011\uffec" +
    "\012\uffec\034\uffec\047\uffec\001\002\000\016\003\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\034\uffeb\047\uffeb\001\002\000\020" +
    "\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\036" +
    "\uffcb\001\002\000\004\014\051\001\002\000\016\003\uffce" +
    "\010\uffce\011\uffce\012\uffce\034\uffce\047\uffce\001\002\000" +
    "\020\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\036\uffc9\001\002\000\012\010\032\011\024\012\035\034" +
    "\033\001\002\000\016\003\ufff2\010\032\011\024\012\035" +
    "\034\033\047\ufff2\001\002\000\016\003\uffee\010\uffee\011" +
    "\uffee\012\uffee\034\uffee\047\uffee\001\002\000\016\003\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\034\uffcf\047\uffcf\001\002\000" +
    "\016\003\uffef\010\uffef\011\uffef\012\uffef\034\uffef\047\uffef" +
    "\001\002\000\016\003\ufff1\010\032\011\024\012\035\034" +
    "\033\047\ufff1\001\002\000\006\003\ufff0\047\ufff0\001\002" +
    "\000\006\003\ufff3\047\ufff3\001\002\000\006\003\047\047" +
    "\050\001\002\000\010\002\ufff5\003\ufff5\047\ufff5\001\002" +
    "\000\010\002\ufff6\003\ufff6\047\ufff6\001\002\000\004\040" +
    "\052\001\002\000\004\044\053\001\002\000\004\045\054" +
    "\001\002\000\004\046\055\001\002\000\032\015\062\016" +
    "\071\017\102\020\072\021\063\024\070\026\104\027\064" +
    "\031\067\075\107\076\056\103\077\001\002\000\004\044" +
    "\347\001\002\000\040\015\uffa3\016\uffa3\017\uffa3\020\uffa3" +
    "\021\uffa3\024\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3\037" +
    "\uffa3\047\uffa3\075\uffa3\076\uffa3\103\uffa3\001\002\000\040" +
    "\015\062\016\071\017\102\020\072\021\063\024\070\026" +
    "\104\027\064\030\uffd6\031\067\037\uffd6\047\uffd6\075\107" +
    "\076\056\103\077\001\002\000\004\047\345\001\002\000" +
    "\004\103\332\001\002\000\004\103\323\001\002\000\004" +
    "\044\315\001\002\000\040\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\037\uffbb\047\uffbb\075\uffbb\076\uffbb\103\uffbb\001\002\000" +
    "\040\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\024\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\031\uffa6\037\uffa6\047\uffa6\075" +
    "\uffa6\076\uffa6\103\uffa6\001\002\000\004\044\265\001\002" +
    "\000\004\044\253\001\002\000\004\103\244\001\002\000" +
    "\004\103\220\001\002\000\040\015\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\037\uffbf\047\uffbf\075\uffbf\076\uffbf\103\uffbf\001\002" +
    "\000\040\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\024" +
    "\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\037\uffa4\047\uffa4" +
    "\075\uffa4\076\uffa4\103\uffa4\001\002\000\040\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\024\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\037\uffbd\047\uffbd\075\uffbd\076\uffbd\103" +
    "\uffbd\001\002\000\040\015\062\016\071\017\102\020\072" +
    "\021\063\024\070\026\104\027\064\030\uffd3\031\067\037" +
    "\uffd3\047\uffd3\075\107\076\056\103\077\001\002\000\010" +
    "\044\176\056\175\067\157\001\002\000\040\015\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\024\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\037\uffbc\047\uffbc\075\uffbc\076\uffbc\103" +
    "\uffbc\001\002\000\040\015\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\021\uffa5\024\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\037" +
    "\uffa5\047\uffa5\075\uffa5\076\uffa5\103\uffa5\001\002\000\004" +
    "\103\161\001\002\000\040\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\037\uffbe\047\uffbe\075\uffbe\076\uffbe\103\uffbe\001\002\000" +
    "\004\044\124\001\002\000\040\015\062\016\071\017\102" +
    "\020\072\021\063\024\070\026\104\027\064\030\uffd1\031" +
    "\067\037\uffd1\047\uffd1\075\107\076\056\103\077\001\002" +
    "\000\040\015\062\016\071\017\102\020\072\021\063\024" +
    "\070\026\104\027\064\030\uffd5\031\067\037\uffd5\047\uffd5" +
    "\075\107\076\056\103\077\001\002\000\004\044\110\001" +
    "\002\000\006\073\113\103\111\001\002\000\006\045\uffc3" +
    "\052\120\001\002\000\004\045\116\001\002\000\006\045" +
    "\uffc4\052\114\001\002\000\006\073\113\103\111\001\002" +
    "\000\004\045\uffc2\001\002\000\004\041\117\001\002\000" +
    "\040\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\024\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\037\uffc5\047\uffc5\075" +
    "\uffc5\076\uffc5\103\uffc5\001\002\000\006\073\113\103\111" +
    "\001\002\000\004\045\uffc1\001\002\000\010\030\uffd4\037" +
    "\uffd4\047\uffd4\001\002\000\010\030\uffd0\037\uffd0\047\uffd0" +
    "\001\002\000\006\015\062\103\125\001\002\000\004\067" +
    "\157\001\002\000\006\100\127\103\130\001\002\000\016" +
    "\057\150\060\144\061\145\062\143\063\151\064\146\001" +
    "\002\000\016\057\150\060\144\061\145\062\143\063\151" +
    "\064\146\001\002\000\004\041\132\001\002\000\004\103" +
    "\134\001\002\000\004\045\137\001\002\000\006\067\136" +
    "\071\135\001\002\000\004\045\uff9c\001\002\000\004\045" +
    "\uff9d\001\002\000\004\046\140\001\002\000\032\015\062" +
    "\016\071\017\102\020\072\021\063\024\070\026\104\027" +
    "\064\031\067\075\107\076\056\103\077\001\002\000\004" +
    "\047\142\001\002\000\040\015\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\021\uff9f\024\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\037\uff9f\047\uff9f\075\uff9f\076\uff9f\103\uff9f\001\002\000" +
    "\006\100\uff82\103\uff82\001\002\000\006\100\uff83\103\uff83" +
    "\001\002\000\006\100\uff81\103\uff81\001\002\000\006\100" +
    "\uff7f\103\uff7f\001\002\000\006\100\152\103\153\001\002" +
    "\000\006\100\uff84\103\uff84\001\002\000\006\100\uff80\103" +
    "\uff80\001\002\000\006\041\uff7c\045\uff7c\001\002\000\006" +
    "\041\uff7b\045\uff7b\001\002\000\006\100\155\103\156\001" +
    "\002\000\006\041\uff7e\045\uff7e\001\002\000\006\041\uff7d" +
    "\045\uff7d\001\002\000\004\041\160\001\002\000\042\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\024\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\031\uffb6\037\uffb6\047\uffb6\075\uffb6\076" +
    "\uffb6\100\uffb6\103\uffb6\001\002\000\006\041\163\056\162" +
    "\001\002\000\010\022\166\023\170\077\164\001\002\000" +
    "\040\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\024\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\037\uffaf\047\uffaf\075" +
    "\uffaf\076\uffaf\103\uffaf\001\002\000\004\044\173\001\002" +
    "\000\004\041\172\001\002\000\004\041\uffae\001\002\000" +
    "\004\041\171\001\002\000\004\041\uffad\001\002\000\040" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\024\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\037\uffb0\047\uffb0\075\uffb0" +
    "\076\uffb0\103\uffb0\001\002\000\040\015\uffb1\016\uffb1\017" +
    "\uffb1\020\uffb1\021\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\037\uffb1\047\uffb1\075\uffb1\076\uffb1\103\uffb1\001" +
    "\002\000\004\045\174\001\002\000\004\041\uffc0\001\002" +
    "\000\004\103\212\001\002\000\010\045\202\101\201\103" +
    "\200\001\002\000\004\045\210\001\002\000\006\043\206" +
    "\045\uff91\001\002\000\006\043\204\045\uff90\001\002\000" +
    "\004\041\203\001\002\000\040\015\uff92\016\uff92\017\uff92" +
    "\020\uff92\021\uff92\024\uff92\026\uff92\027\uff92\030\uff92\031" +
    "\uff92\037\uff92\047\uff92\075\uff92\076\uff92\103\uff92\001\002" +
    "\000\006\101\201\103\200\001\002\000\004\045\uff8e\001" +
    "\002\000\006\101\201\103\200\001\002\000\004\045\uff8f" +
    "\001\002\000\004\041\211\001\002\000\040\015\uff94\016" +
    "\uff94\017\uff94\020\uff94\021\uff94\024\uff94\026\uff94\027\uff94" +
    "\030\uff94\031\uff94\037\uff94\047\uff94\075\uff94\076\uff94\103" +
    "\uff94\001\002\000\004\044\213\001\002\000\006\101\201" +
    "\103\200\001\002\000\004\045\215\001\002\000\004\041" +
    "\216\001\002\000\040\015\uff93\016\uff93\017\uff93\020\uff93" +
    "\021\uff93\024\uff93\026\uff93\027\uff93\030\uff93\031\uff93\037" +
    "\uff93\047\uff93\075\uff93\076\uff93\103\uff93\001\002\000\010" +
    "\030\uffd2\037\uffd2\047\uffd2\001\002\000\006\041\222\056" +
    "\221\001\002\000\010\077\164\100\224\102\223\001\002" +
    "\000\040\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\024" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\037\uffb2\047\uffb2" +
    "\075\uffb2\076\uffb2\103\uffb2\001\002\000\014\041\241\052" +
    "\234\053\231\054\233\055\235\001\002\000\012\052\234" +
    "\053\231\054\233\055\235\001\002\000\004\041\230\001" +
    "\002\000\004\041\227\001\002\000\040\015\uffb4\016\uffb4" +
    "\017\uffb4\020\uffb4\021\uffb4\024\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\037\uffb4\047\uffb4\075\uffb4\076\uffb4\103\uffb4" +
    "\001\002\000\040\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\024\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\037\uffb3" +
    "\047\uffb3\075\uffb3\076\uffb3\103\uffb3\001\002\000\006\100" +
    "\uff87\102\uff87\001\002\000\006\100\237\102\236\001\002" +
    "\000\006\100\uff86\102\uff86\001\002\000\006\100\uff88\102" +
    "\uff88\001\002\000\006\100\uff85\102\uff85\001\002\000\004" +
    "\041\uff8b\001\002\000\004\041\uff89\001\002\000\006\100" +
    "\242\102\243\001\002\000\040\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\037\uffb5\047\uffb5\075\uffb5\076\uffb5\103\uffb5\001\002" +
    "\000\004\041\uff8a\001\002\000\004\041\uff8c\001\002\000" +
    "\006\041\246\056\245\001\002\000\006\073\250\077\164" +
    "\001\002\000\040\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\024\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\037\uffaa" +
    "\047\uffaa\075\uffaa\076\uffaa\103\uffaa\001\002\000\004\041" +
    "\252\001\002\000\004\041\251\001\002\000\040\015\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\024\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\037\uffac\047\uffac\075\uffac\076\uffac" +
    "\103\uffac\001\002\000\040\015\uffab\016\uffab\017\uffab\020" +
    "\uffab\021\uffab\024\uffab\026\uffab\027\uffab\030\uffab\031\uffab" +
    "\037\uffab\047\uffab\075\uffab\076\uffab\103\uffab\001\002\000" +
    "\006\100\127\103\130\001\002\000\004\045\255\001\002" +
    "\000\004\046\256\001\002\000\032\015\062\016\071\017" +
    "\102\020\072\021\063\024\070\026\104\027\064\031\067" +
    "\075\107\076\056\103\077\001\002\000\004\047\260\001" +
    "\002\000\042\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2" +
    "\024\uffa2\025\261\026\uffa2\027\uffa2\030\uffa2\031\uffa2\037" +
    "\uffa2\047\uffa2\075\uffa2\076\uffa2\103\uffa2\001\002\000\004" +
    "\046\262\001\002\000\032\015\062\016\071\017\102\020" +
    "\072\021\063\024\070\026\104\027\064\031\067\075\107" +
    "\076\056\103\077\001\002\000\004\047\264\001\002\000" +
    "\040\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\024\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\037\uffa1\047\uffa1\075" +
    "\uffa1\076\uffa1\103\uffa1\001\002\000\004\103\266\001\002" +
    "\000\004\045\267\001\002\000\004\046\270\001\002\000" +
    "\004\032\273\001\002\000\006\032\273\047\305\001\002" +
    "\000\006\032\uff9a\047\uff9a\001\002\000\006\100\274\103" +
    "\275\001\002\000\004\072\301\001\002\000\004\046\276" +
    "\001\002\000\032\015\062\016\071\017\102\020\072\021" +
    "\063\024\070\026\104\027\064\031\067\075\107\076\056" +
    "\103\077\001\002\000\004\047\300\001\002\000\010\032" +
    "\uff96\033\uff96\047\uff96\001\002\000\032\015\062\016\071" +
    "\017\102\020\072\021\063\024\070\026\104\027\064\031" +
    "\067\075\107\076\056\103\077\001\002\000\004\037\303" +
    "\001\002\000\004\041\304\001\002\000\010\032\uff97\033" +
    "\uff97\047\uff97\001\002\000\040\015\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\024\uff9b\026\uff9b\027\uff9b\030\uff9b\031" +
    "\uff9b\037\uff9b\047\uff9b\075\uff9b\076\uff9b\103\uff9b\001\002" +
    "\000\010\032\uff99\033\307\047\uff99\001\002\000\004\072" +
    "\311\001\002\000\006\032\uff98\047\uff98\001\002\000\032" +
    "\015\062\016\071\017\102\020\072\021\063\024\070\026" +
    "\104\027\064\031\067\075\107\076\056\103\077\001\002" +
    "\000\004\037\313\001\002\000\004\041\314\001\002\000" +
    "\006\032\uff95\047\uff95\001\002\000\006\100\127\103\130" +
    "\001\002\000\004\045\317\001\002\000\004\046\320\001" +
    "\002\000\032\015\062\016\071\017\102\020\072\021\063" +
    "\024\070\026\104\027\064\031\067\075\107\076\056\103" +
    "\077\001\002\000\004\047\322\001\002\000\040\015\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\024\uffa0\026\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\037\uffa0\047\uffa0\075\uffa0\076\uffa0" +
    "\103\uffa0\001\002\000\006\041\325\056\324\001\002\000" +
    "\006\074\327\077\164\001\002\000\040\015\uffa7\016\uffa7" +
    "\017\uffa7\020\uffa7\021\uffa7\024\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\037\uffa7\047\uffa7\075\uffa7\076\uffa7\103\uffa7" +
    "\001\002\000\004\041\331\001\002\000\004\041\330\001" +
    "\002\000\040\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\024\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\037\uffa9\047" +
    "\uffa9\075\uffa9\076\uffa9\103\uffa9\001\002\000\040\015\uffa8" +
    "\016\uffa8\017\uffa8\020\uffa8\021\uffa8\024\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\037\uffa8\047\uffa8\075\uffa8\076\uffa8" +
    "\103\uffa8\001\002\000\006\041\334\056\333\001\002\000" +
    "\006\077\164\100\335\001\002\000\042\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\024\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\037\uffb7\047\uffb7\075\uffb7\076\uffb7\100\uffb7" +
    "\103\uffb7\001\002\000\014\041\343\052\234\053\231\054" +
    "\233\055\235\001\002\000\004\041\341\001\002\000\004" +
    "\041\340\001\002\000\042\015\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\021\uffb9\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\037\uffb9\047\uffb9\075\uffb9\076\uffb9\100\uffb9\103\uffb9\001" +
    "\002\000\042\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\024\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\037\uffb8\047" +
    "\uffb8\075\uffb8\076\uffb8\100\uffb8\103\uffb8\001\002\000\004" +
    "\100\344\001\002\000\042\015\uffba\016\uffba\017\uffba\020" +
    "\uffba\021\uffba\024\uffba\026\uffba\027\uffba\030\uffba\031\uffba" +
    "\037\uffba\047\uffba\075\uffba\076\uffba\100\uffba\103\uffba\001" +
    "\002\000\004\041\uff8d\001\002\000\016\003\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\034\uffe2\047\uffe2\001\002\000\010\030" +
    "\uffd7\037\uffd7\047\uffd7\001\002\000\006\073\113\103\111" +
    "\001\002\000\004\045\351\001\002\000\004\041\352\001" +
    "\002\000\040\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\024\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\037\uffc6\047" +
    "\uffc6\075\uffc6\076\uffc6\103\uffc6\001\002\000\010\002\ufff4" +
    "\003\ufff4\047\ufff4\001\002\000\006\015\u0138\020\u0137\001" +
    "\002\000\004\103\u012d\001\002\000\004\103\u0123\001\002" +
    "\000\004\103\u011c\001\002\000\004\103\u0112\001\002\000" +
    "\004\103\u0108\001\002\000\004\103\363\001\002\000\004" +
    "\044\364\001\002\000\020\014\367\015\365\016\371\017" +
    "\366\020\374\021\375\045\uffd9\001\002\000\004\103\uffe1" +
    "\001\002\000\004\103\uffdd\001\002\000\004\103\uffdc\001" +
    "\002\000\006\043\u0106\045\uffdb\001\002\000\004\103\uffdf" +
    "\001\002\000\004\103\u0105\001\002\000\004\045\376\001" +
    "\002\000\004\103\uffe0\001\002\000\004\103\uffde\001\002" +
    "\000\004\046\377\001\002\000\032\015\062\016\071\017" +
    "\102\020\072\021\063\024\070\026\104\027\064\031\067" +
    "\075\107\076\056\103\077\001\002\000\004\030\u0101\001" +
    "\002\000\004\103\u0102\001\002\000\004\041\u0103\001\002" +
    "\000\004\047\u0104\001\002\000\016\003\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\034\uffe8\047\uffe8\001\002\000\006\043\uffd8" +
    "\045\uffd8\001\002\000\020\014\367\015\365\016\371\017" +
    "\366\020\374\021\375\045\uffd9\001\002\000\004\045\uffda" +
    "\001\002\000\004\044\u0109\001\002\000\020\014\367\015" +
    "\365\016\371\017\366\020\374\021\375\045\uffd9\001\002" +
    "\000\004\045\u010b\001\002\000\004\046\u010c\001\002\000" +
    "\032\015\062\016\071\017\102\020\072\021\063\024\070" +
    "\026\104\027\064\031\067\075\107\076\056\103\077\001" +
    "\002\000\004\030\u010e\001\002\000\004\103\u010f\001\002" +
    "\000\004\041\u0110\001\002\000\004\047\u0111\001\002\000" +
    "\016\003\uffe6\010\uffe6\011\uffe6\012\uffe6\034\uffe6\047\uffe6" +
    "\001\002\000\004\044\u0113\001\002\000\020\014\367\015" +
    "\365\016\371\017\366\020\374\021\375\045\uffd9\001\002" +
    "\000\004\045\u0115\001\002\000\004\046\u0116\001\002\000" +
    "\032\015\062\016\071\017\102\020\072\021\063\024\070" +
    "\026\104\027\064\031\067\075\107\076\056\103\077\001" +
    "\002\000\004\030\u0118\001\002\000\004\103\u0119\001\002" +
    "\000\004\041\u011a\001\002\000\004\047\u011b\001\002\000" +
    "\016\003\uffe4\010\uffe4\011\uffe4\012\uffe4\034\uffe4\047\uffe4" +
    "\001\002\000\004\044\u011d\001\002\000\020\014\367\015" +
    "\365\016\371\017\366\020\374\021\375\045\uffd9\001\002" +
    "\000\004\045\u011f\001\002\000\004\046\u0120\001\002\000" +
    "\032\015\062\016\071\017\102\020\072\021\063\024\070" +
    "\026\104\027\064\031\067\075\107\076\056\103\077\001" +
    "\002\000\004\047\u0122\001\002\000\016\003\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\034\uffe3\047\uffe3\001\002\000\004\044" +
    "\u0124\001\002\000\020\014\367\015\365\016\371\017\366" +
    "\020\374\021\375\045\uffd9\001\002\000\004\045\u0126\001" +
    "\002\000\004\046\u0127\001\002\000\032\015\062\016\071" +
    "\017\102\020\072\021\063\024\070\026\104\027\064\031" +
    "\067\075\107\076\056\103\077\001\002\000\004\030\u0129" +
    "\001\002\000\004\103\u012a\001\002\000\004\041\u012b\001" +
    "\002\000\004\047\u012c\001\002\000\016\003\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\034\uffe5\047\uffe5\001\002\000\004\044" +
    "\u012e\001\002\000\020\014\367\015\365\016\371\017\366" +
    "\020\374\021\375\045\uffd9\001\002\000\004\045\u0130\001" +
    "\002\000\004\046\u0131\001\002\000\032\015\062\016\071" +
    "\017\102\020\072\021\063\024\070\026\104\027\064\031" +
    "\067\075\107\076\056\103\077\001\002\000\004\030\u0133" +
    "\001\002\000\004\103\u0134\001\002\000\004\041\u0135\001" +
    "\002\000\004\047\u0136\001\002\000\016\003\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\034\uffe7\047\uffe7\001\002\000\004\101" +
    "\u013d\001\002\000\004\101\u0139\001\002\000\004\056\u013a" +
    "\001\002\000\004\100\u013b\001\002\000\004\041\u013c\001" +
    "\002\000\016\003\uffcd\010\uffcd\011\uffcd\012\uffcd\034\uffcd" +
    "\047\uffcd\001\002\000\004\056\u013e\001\002\000\004\102" +
    "\u013f\001\002\000\004\041\u0140\001\002\000\016\003\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\034\uffcc\047\uffcc\001\002\000" +
    "\006\007\020\046\u0143\001\002\000\004\047\u0147\001\002" +
    "\000\004\007\020\001\002\000\006\003\u0145\047\u0146\001" +
    "\002\000\004\002\ufff8\001\002\000\004\002\ufff9\001\002" +
    "\000\004\003\u0148\001\002\000\004\002\ufff7\001\002\000" +
    "\010\005\007\006\ufffd\007\ufffd\001\002\000\006\006\ufffb" +
    "\007\ufffb\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0149\000\010\002\004\006\003\060\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\016\004\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\004\060\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\021\026\023\036" +
    "\024\041\025\037\026\025\027\024\030\030\031\027\033" +
    "\042\034\022\054\021\056\033\057\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\021\045\023\036" +
    "\024\041\025\037\026\025\027\024\030\030\031\027\033" +
    "\042\034\022\054\021\056\033\057\040\001\001\000\034" +
    "\021\044\023\036\024\041\025\037\026\025\027\024\030" +
    "\030\031\027\033\042\034\022\054\021\056\033\057\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\021\043\023\036\024\041\025\037\026\025" +
    "\027\024\030\030\031\027\033\042\034\022\054\021\056" +
    "\033\057\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\060\007\105\011\057\012\065\013" +
    "\100\014\073\035\075\040\104\042\072\043\074\044\077" +
    "\045\102\046\064\062\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\345\007\105\011\057\012\065" +
    "\013\100\014\073\035\075\040\104\042\072\043\074\044" +
    "\077\045\102\046\064\062\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\216" +
    "\007\105\011\057\012\065\013\100\014\073\035\075\040" +
    "\104\042\072\043\074\044\077\045\102\046\064\062\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\005\122\007\105\011\057\012\065\013\100\014" +
    "\073\035\075\040\104\042\072\043\074\044\077\045\102" +
    "\046\064\062\056\001\001\000\036\005\121\007\105\011" +
    "\057\012\065\013\100\014\073\035\075\040\104\042\072" +
    "\043\074\044\077\045\102\046\064\062\056\001\001\000" +
    "\002\001\001\000\004\036\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\036\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\125\001\001\000\002" +
    "\001\001\000\004\055\130\001\001\000\004\010\153\001" +
    "\001\000\004\010\146\001\001\000\002\001\001\000\004" +
    "\016\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\005\140\007\105\011\057\012\065\013\100\014\073\035" +
    "\075\040\104\042\072\043\074\044\077\045\102\046\064" +
    "\062\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\166\047\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\204\001\001" +
    "\000\002\001\001\000\004\041\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\037\224\052\225\001\001\000\002\001\001\000" +
    "\004\051\237\001\001\000\004\051\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\037" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\005\256\007\105\011\057\012\065\013\100\014\073\035" +
    "\075\040\104\042\072\043\074\044\077\045\102\046\064" +
    "\062\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\262\007\105\011\057\012\065" +
    "\013\100\014\073\035\075\040\104\042\072\043\074\044" +
    "\077\045\102\046\064\062\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\063\270\064\271\001\001\000\004" +
    "\064\305\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\276\007\105" +
    "\011\057\012\065\013\100\014\073\035\075\040\104\042" +
    "\072\043\074\044\077\045\102\046\064\062\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\005\301\007" +
    "\105\011\057\012\065\013\100\014\073\035\075\040\104" +
    "\042\072\043\074\044\077\045\102\046\064\062\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\005\311\007\105\011\057" +
    "\012\065\013\100\014\073\035\075\040\104\042\072\043" +
    "\074\044\077\045\102\046\064\062\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\005\320\007\105\011\057\012\065\013\100\014\073\035" +
    "\075\040\104\042\072\043\074\044\077\045\102\046\064" +
    "\062\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\325\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\335\050\336" +
    "\001\001\000\002\001\001\000\004\051\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\371\020\372\022\367\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\377" +
    "\007\105\011\057\012\065\013\100\014\073\035\075\040" +
    "\104\042\072\043\074\044\077\045\102\046\064\062\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\017\371\020\u0106\022\367\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\371\020\u0109\022\367" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\005" +
    "\u010c\007\105\011\057\012\065\013\100\014\073\035\075" +
    "\040\104\042\072\043\074\044\077\045\102\046\064\062" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\371\020\u0113\022\367\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\005\u0116\007\105\011" +
    "\057\012\065\013\100\014\073\035\075\040\104\042\072" +
    "\043\074\044\077\045\102\046\064\062\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\371\020\u011d\022\367\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\005\u0120\007\105\011\057\012\065\013" +
    "\100\014\073\035\075\040\104\042\072\043\074\044\077" +
    "\045\102\046\064\062\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\371\020\u0124" +
    "\022\367\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\005\u0127\007\105\011\057\012\065\013\100\014\073" +
    "\035\075\040\104\042\072\043\074\044\077\045\102\046" +
    "\064\062\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\371\020\u012e\022\367\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\005\u0131\007" +
    "\105\011\057\012\065\013\100\014\073\035\075\040\104" +
    "\042\072\043\074\044\077\045\102\046\064\062\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\u0141" +
    "\001\001\000\002\001\001\000\004\004\u0143\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\004\060\u0149\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserTL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserTL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserTL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static TablaSimbolos tabla=new TablaSimbolos();
    public static Simbolo simbolo;

    public void syntax_error(Symbol s) {
        report_error("Error de sintaxis en linea: " + (s.left) + " , columna: " + (s.right + 1) + ", simbolo: " + s.value, null);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("", null);
    }

    Object resultado;


    public static int contador = 0;
    public static String ope;
    public static Boolean siono;
    public static String tempID;

    public void temp(String decimal1, String decimal2){
        int temp1 = Integer.parseInt(decimal1);
        int temp2 = Integer.parseInt(decimal2);
        String tempLabel = "t" + contador;
        System.out.println(tempLabel + " = " + decimal1 + " " + ope + " " + decimal2);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserTL$actions {
  private final ParserTL parser;

  /** Constructor */
  CUP$ParserTL$actions(ParserTL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action_part00000000(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserTL$result;

      /* select the action based on the action number */
      switch (CUP$ParserTL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaraciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		RESULT = start_val;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserTL$parser.done_parsing();
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaraciones ::= dec_usingpunto dec_namespace 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= dec_usingpunto dec_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_using ::= USING IDENTIFICADOR 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de using---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_usingpunto ::= dec_using PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_usingpunto",46, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_usingpunto ::= USING IDENTIFICADOR PUNTO IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de using con punto---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_usingpunto",46, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_usingpunto ::= dec_using PUNTO_COMA dec_usingpunto 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_usingpunto",46, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_usingpunto ::= USING IDENTIFICADOR PUNTO IDENTIFICADOR PUNTO_COMA dec_usingpunto 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_usingpunto",46, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                    System.out.println("---Declaracion de namespace---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta '}' en namespace");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_namespace ::= NAMESPACE IDENTIFICADOR dec_clase LLAVE_DERECHA error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta '{' en namespace");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de clase---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta '}' en clase");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dec_clase ::= CLASS IDENTIFICADOR cuerpo_clase error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta '{' en clase");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo_clase ::= metodos cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cuerpo_clase ::= metodos 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cuerpo_clase ::= dec_constantes 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cuerpo_clase ::= dec_constantes cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodos ::= metodo_int 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // metodos ::= metodo_char 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // metodos ::= metodo_string 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // metodos ::= metodo_float 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // metodos ::= metodo_void 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // metodos ::= metodo_bool 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // metodos ::= metodo_main 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // metodo_int ::= mod_acceso INT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION ENTERA----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_int",18, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // metodo_string ::= mod_acceso STRING IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION STRING----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_string",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // metodo_float ::= mod_acceso FLOAT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION FLOAT----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_float",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // metodo_bool ::= mod_acceso BOOL IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION BOLEANO----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_bool",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // metodo_char ::= mod_acceso CHAR IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION CARACTER----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_char",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // metodo_void ::= mod_acceso VOID IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION VACIA----------------\n\n");;
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_void",22, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // metodo_main ::= STATIC VOID MAIN PARENTESIS_IZQUIERDO PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION PRINCIPAL----------------\n\n");;
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_main",42, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-7)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_metodo ::= INT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // tipo_metodo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // tipo_metodo ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // tipo_metodo ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tipo_metodo ::= BOOL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tipo_metodo ::= VOID 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametro ::= tipo_metodo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametro",16, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo ::= estructura_control cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cuerpo ::= dec_variables 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpo ::= dec_variables cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpo ::= impresion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cuerpo ::= impresion cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cuerpo ::= llamar_funcion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cuerpo ::= llamar_funcion cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec_constantes ::= con_int 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_constantes",25, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dec_constantes ::= con_float 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_constantes",25, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // con_int ::= mod_acceso CONST INT CONSTANTE ASIGNACION NENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
                System.out.println("\n---Constante entero---\n");
            
            parser.simbolo=new Simbolo(id, "int", entero , "clase", true);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Constante agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = "+entero);
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Constante NO agregada");
            }
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("con_int",45, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // con_float ::= mod_acceso CONST FLOAT CONSTANTE ASIGNACION NDECIMAL PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String decimal = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
                System.out.println("\n---Constante flotante---\n");
            
            parser.simbolo=new Simbolo(id, "float", decimal , "clase", true);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Constante agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = "+decimal);
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Constante NO agregada");
            }
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("con_float",44, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // mod_acceso ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",26, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // mod_acceso ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",26, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // mod_acceso ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",26, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // val ::= NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",24, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // val ::= NDECIMAL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",24, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // impresion ::= CWLINE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Impresion de consola con salto de linea---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("impresion",27, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // impresion ::= CWRITE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Impresion de consola sin salto de linea---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("impresion",27, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // imprimir ::= CADENA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // imprimir ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // imprimir ::= CADENA SUMA imprimir 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // imprimir ::= IDENTIFICADOR SUMA imprimir 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lecturas ::= CRLINE PARENTESIS_IZQUIERDO PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("lecturas",29, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dec_variables ::= tipo_int 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dec_variables ::= tipo_string 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // dec_variables ::= tipo_char 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // dec_variables ::= tipo_float 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // dec_variables ::= tipo_bool 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_int ::= INT IDENTIFICADOR ASIGNACION NENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable entera inicializada--");
            
            parser.simbolo=new Simbolo(id, "int", entero , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = "+entero);
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo_int ::= INT IDENTIFICADOR ASIGNACION ope_int PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		
            System.out.println("--Variable entera inicializada con operacion--");
            if ("error".equals(resultado)) {
                System.err.println("Error division entre 0");
            } else {
                parser.simbolo = new Simbolo(id, "int", "" + resultado, "metodo", false);
                if (parser.tabla.agregar(id, parser.simbolo)) {
                    System.out.println("Variable agregada correctamente " + id);
                    System.out.println(tabla.mostrar());
                    System.out.println("");
                    parser.contador++;
                    System.out.println("t" + (parser.contador) + " = " + resultado);
                    System.out.println("" + id + " = " + "t" + (parser.contador));
                    System.out.println("");
                    tempID = id;
                } else {
                    System.out.println("Variable NO agregada");
                }
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo_int ::= INT IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable entera de lectura--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_int ::= INT IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable entera--");
            parser.simbolo=new Simbolo(id, "int", "0" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = 0");
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo_int ::= IDENTIFICADOR INCREMENTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_float ::= FLOAT IDENTIFICADOR ASIGNACION NDECIMAL PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		int flotanteleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int flotanteright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String flotante = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable flotante--");
            parser.simbolo=new Simbolo(id, "float", ""+flotante , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo_float ::= FLOAT IDENTIFICADOR ASIGNACION ope_float PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		
            System.out.println("--Variable float inicializada con operacion--");
            if("error".equals(resultado)){
                System.err.println("Error division entre 0");
            }else{
                parser.simbolo=new Simbolo(id, "float", ""+resultado , "metodo", false);
                if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
                System.out.println("");
                parser.contador++;
                System.out.println("t"+ (parser.contador) + " = "+resultado);
                System.out.println(""+id+" = " + "t" + (parser.contador));
                System.out.println("");
                tempID = id;
            }else{
                System.out.println("Variable NO agregada");
            }
            }
            
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo_float ::= FLOAT IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable flotante de lectura--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo_float ::= FLOAT IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable flotante--");
            parser.simbolo=new Simbolo(id, "float", "0" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // tipo_bool ::= BOOL IDENTIFICADOR ASIGNACION boleano PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable boleano--");
            
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_bool",36, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // tipo_bool ::= BOOL IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable boleano de lectura--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_bool",36, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // tipo_bool ::= BOOL IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable boleano--");
            
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_bool",36, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // boleano ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("boleano",37, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // boleano ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("boleano",37, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tipo_string ::= STRING IDENTIFICADOR ASIGNACION CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		Object cadena = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable cadena--");
            parser.simbolo=new Simbolo(id, "string", ""+cadena , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_string",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tipo_string ::= STRING IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable boleano de lectura--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_string",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // tipo_string ::= STRING IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable cadena--");
            parser.simbolo=new Simbolo(id, "string", "" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_string",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // tipo_char ::= CHAR IDENTIFICADOR ASIGNACION CARACTER PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		Object caracter = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable caracter--");
            parser.simbolo=new Simbolo(id, "char", ""+caracter , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_char",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tipo_char ::= CHAR IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable caracter de lectura--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_char",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tipo_char ::= CHAR IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		
            System.out.println("--Variable caracter--");
            parser.simbolo=new Simbolo(id, "char", "" , "metodo", false);
            if(parser.tabla.agregar(id, parser.simbolo)){
                System.out.println("Variable agregada correctamente " + id);
                System.out.println(tabla.mostrar());
            }else{
                System.out.println("Variable NO agregada");
            }
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_char",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // estructura_control ::= sentencia_switch 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sentencia_if ::= IF PARENTESIS_IZQUIERDO exp_log PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia if---");
                if(siono){
                    System.out.println("expresion verdadera");
                }
                else
                    System.out.println("expresion falsa");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sentencia_if ::= IF PARENTESIS_IZQUIERDO exp_log PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA ELSE LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia if con else---");
                if(siono){
                    System.out.println("expresion verdadera");
                }
                else
                    System.out.println("expresion falsa");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentencia_while ::= WHILE PARENTESIS_IZQUIERDO exp_log PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                    System.out.println("---Sentencia while---");
                    if(siono){
                    System.out.println("expresion verdadera");
                }
                else
                    System.out.println("expresion falsa");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_while",9, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentencia_for ::= FOR PARENTESIS_IZQUIERDO tipo_int exp_log PUNTO_COMA for_update PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.out.println("---Sentencia for---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_for",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-9)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // for_init ::= INT IDENTIFICADOR ASIGNACION NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_init",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // for_update ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_update",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // for_update ::= IDENTIFICADOR DECREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_update",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // sentencia_switch ::= SWITCH PARENTESIS_IZQUIERDO IDENTIFICADOR PARENTESIS_DERECHO LLAVE_IZQUIERDA lista_casos LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia switch---");
                
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_switch",48, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lista_casos ::= caso 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("lista_casos",49, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // lista_casos ::= lista_casos caso 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("lista_casos",49, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // lista_casos ::= lista_casos caso default_case 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("lista_casos",49, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // caso ::= CASE NENTERO DOS_PUNTOS cuerpo BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)).value;
		
              System.out.println("Caso: " + valor);
              
          
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("caso",50, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-5)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // caso ::= CASE IDENTIFICADOR LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)).value;
		
              String nombre = parser.tabla.consultaValor("" + id);
              System.out.println("Caso: " + nombre);
              
          
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("caso",50, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // default_case ::= DEFAULT DOS_PUNTOS cuerpo BREAK PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("Caso por defecto");
                    
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("default_case",47, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // llamar_funcion ::= IDENTIFICADOR PARENTESIS_IZQUIERDO pasar_parametros PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("---Se llama a funcion---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("llamar_funcion",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // llamar_funcion ::= IDENTIFICADOR ASIGNACION IDENTIFICADOR PARENTESIS_IZQUIERDO pasar_parametros PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("---Se llama a funcion y se asigna a variable---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("llamar_funcion",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // llamar_funcion ::= IDENTIFICADOR PARENTESIS_IZQUIERDO PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("---Se llama a funcion sin parametros---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("llamar_funcion",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // pasar_parametros ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // pasar_parametros ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // pasar_parametros ::= IDENTIFICADOR COMA pasar_parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // pasar_parametros ::= CONSTANTE COMA pasar_parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ope_int ::= NENTERO operador NENTERO 
            {
              Object RESULT =null;
		int entero1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int entero1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String entero1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int entero2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int entero2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String entero2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                temp(entero1, entero2);
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("ope_int",38, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ope_float ::= NDECIMAL operador NDECIMAL 
            {
              Object RESULT =null;
		int decimal1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int decimal1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String decimal1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int decimal2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int decimal2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String decimal2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                
                String tempLabel = "t" + parser.contador;
                resultado = Operacion.convFloat(decimal1, "" + ope, decimal2);
                
                
                System.out.println(""+tempID + " = " + tempLabel); // Asignar a la variable
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("ope_float",40, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ope_float ::= NENTERO operador NDECIMAL 
            {
              Object RESULT =null;
		int decimal1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int decimal1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String decimal1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int decimal2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int decimal2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String decimal2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                parser.contador++;
                String tempLabel = "t" + parser.contador;
                resultado = Operacion.convFloat(decimal1, "" + ope, decimal2);
                
                System.out.println(tempLabel + " = " + decimal1 + " " + ope + " " + decimal2);
                System.out.println(""+tempID + " = " + tempLabel); // Asignar a la variable
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("ope_float",40, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ope_float ::= NDECIMAL operador NENTERO 
            {
              Object RESULT =null;
		int decimal1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int decimal1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String decimal1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int decimal2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int decimal2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String decimal2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                parser.contador++;
                String tempLabel = "t" + parser.contador;
                resultado = Operacion.convFloat(decimal1, "" + ope, decimal2);
                
                System.out.println(tempLabel + " = " + decimal1 + " " + ope + " " + decimal2);
                System.out.println(""+tempID + " = " + tempLabel); // Asignar a la variable
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("ope_float",40, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ope_float ::= NENTERO operador NENTERO 
            {
              Object RESULT =null;
		int decimal1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int decimal1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String decimal1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int decimal2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int decimal2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String decimal2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                parser.contador++;
                String tempLabel = "t" + parser.contador;
                resultado = Operacion.convFloat(decimal1, "" + ope, decimal2);
                
                System.out.println(tempLabel + " = " + decimal1 + " " + ope + " " + decimal2);
                System.out.println(""+tempID + " = " + tempLabel); // Asignar a la variable
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("ope_float",40, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operador ::= SUMA 
            {
              Object RESULT =null;
		int sumaleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int sumaright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object suma = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+suma;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("operador",39, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operador ::= RESTA 
            {
              Object RESULT =null;
		int restaleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object resta = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+resta;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("operador",39, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operador ::= MULTIPLICACION 
            {
              Object RESULT =null;
		int multileft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int multiright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object multi = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+multi;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("operador",39, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operador ::= DIVISION 
            {
              Object RESULT =null;
		int divileft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int diviright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object divi = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = ""+divi;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("operador",39, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // termino_logico ::= IGUALDAD 
            {
              Object RESULT =null;
		int igualleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = "" + igual;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // termino_logico ::= DESIGUALDAD 
            {
              Object RESULT =null;
		int noigualleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int noigualright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object noigual = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = "" + noigual;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // termino_logico ::= MAYOR_QUE 
            {
              Object RESULT =null;
		int mayorleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int mayorright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object mayor = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = "" + mayor;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // termino_logico ::= MENOR_QUE 
            {
              Object RESULT =null;
		int menorleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int menorright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object menor = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = "" + menor;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // termino_logico ::= MENOR_O_IGUAL_QUE 
            {
              Object RESULT =null;
		int menigualleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int menigualright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object menigual = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = "" + menigual;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // termino_logico ::= MAYOR_O_IGUAL_QUE 
            {
              Object RESULT =null;
		int maigualleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int maigualright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		Object maigual = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		ope = "" + maigual;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // exp_log ::= NENTERO termino_logico NENTERO 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int num2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int num2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String num2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                parser.contador++;
                String tempLabel = "t" + parser.contador; 
                siono = Operacion.verifico(num1, "" + ope, num2);
                System.out.println(tempLabel + " = " + num1 + " " + ope + " " + num2);
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_log",43, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // exp_log ::= NENTERO termino_logico IDENTIFICADOR 
            {
              Object RESULT =null;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                String nombre = parser.tabla.consultaValor("" + id);
                parser.contador++;
                String tempLabel = "t" + parser.contador;
                siono = Operacion.verifico(num1, "" + ope, nombre);
                System.out.println(tempLabel + " = " + num1 + " " + ope + " " + nombre);
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_log",43, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // exp_log ::= IDENTIFICADOR termino_logico NENTERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int num1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int num1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String num1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                String nombre = parser.tabla.consultaValor("" + id);
                parser.contador++;
                String tempLabel = "t" + parser.contador;
                siono = Operacion.verifico(nombre, "" + ope, num1);
                System.out.println(tempLabel + " = " + nombre + " " + ope + " " + num1);
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_log",43, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // exp_log ::= IDENTIFICADOR termino_logico IDENTIFICADOR 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$ParserTL$stack.peek()).value;
		
                String nombre1 = parser.tabla.consultaValor("" + id1);
                String nombre2 = parser.tabla.consultaValor("" + id2);
                parser.contador++;
                String tempLabel = "t" + parser.contador;
                siono = Operacion.verifico(nombre1, "" + ope, nombre2);
                System.out.println(tempLabel + " = " + nombre1 + " " + ope + " " + nombre2);
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_log",43, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserTL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
              return CUP$ParserTL$do_action_part00000000(
                               CUP$ParserTL$act_num,
                               CUP$ParserTL$parser,
                               CUP$ParserTL$stack,
                               CUP$ParserTL$top);
    }
}

}
