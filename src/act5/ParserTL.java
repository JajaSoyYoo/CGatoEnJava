
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package act5;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserTL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserTL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserTL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserTL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\165\000\002\002\004\000\002\006\004\000\002\006" +
    "\004\000\002\002\005\000\002\002\005\000\002\003\007" +
    "\000\002\003\007\000\002\003\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\006\000\002\027\004\000\002" +
    "\027\003\000\002\027\003\000\002\027\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\016\000" +
    "\002\034\016\000\002\037\016\000\002\035\016\000\002" +
    "\033\016\000\002\036\013\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\026\003\000\002\026\005\000" +
    "\002\026\002\000\002\030\004\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\042\011\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\040\003\000\002\040\003\000\002" +
    "\044\007\000\002\044\007\000\002\045\003\000\002\045" +
    "\003\000\002\045\005\000\002\045\005\000\002\046\005" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\052\007\000\002" +
    "\052\007\000\002\052\005\000\002\054\007\000\002\054" +
    "\007\000\002\054\005\000\002\056\007\000\002\056\007" +
    "\000\002\056\005\000\002\057\003\000\002\057\003\000" +
    "\002\055\007\000\002\055\007\000\002\055\005\000\002" +
    "\053\007\000\002\053\007\000\002\053\005\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\020\011" +
    "\000\002\020\015\000\002\021\011\000\002\022\015\000" +
    "\002\023\006\000\002\024\004\000\002\024\004\000\002" +
    "\011\003\000\002\011\003\000\002\012\003\000\002\012" +
    "\005\000\002\012\005\000\002\014\003\000\002\014\005" +
    "\000\002\014\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\005\000\002" +
    "\013\005\000\002\013\005\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\047\007\000\002\047\011\000" +
    "\002\050\003\000\002\050\003\000\002\050\005\000\002" +
    "\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\004\005\006\001\002\000\004\002\u011d\001" +
    "\002\000\006\006\012\007\015\001\002\000\004\065\007" +
    "\001\002\000\006\003\010\034\011\001\002\000\006\006" +
    "\ufffd\007\ufffd\001\002\000\006\006\ufffe\007\ufffe\001\002" +
    "\000\004\065\u0115\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\065\016\001\002\000\012" +
    "\010\017\011\032\012\025\041\020\001\002\000\020\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\033\uffd3" +
    "\001\002\000\010\010\017\011\032\012\025\001\002\000" +
    "\014\003\ufff5\010\017\011\032\012\025\042\ufff5\001\002" +
    "\000\014\003\ufff0\010\ufff0\011\ufff0\012\ufff0\042\ufff0\001" +
    "\002\000\014\003\ufff1\010\ufff1\011\ufff1\012\ufff1\042\ufff1" +
    "\001\002\000\014\003\uffed\010\uffed\011\uffed\012\uffed\042" +
    "\uffed\001\002\000\020\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\033\uffd1\001\002\000\014\003\uffef\010" +
    "\uffef\011\uffef\012\uffef\042\uffef\001\002\000\014\003\ufff4" +
    "\010\017\011\032\012\025\042\ufff4\001\002\000\014\003" +
    "\uffee\010\uffee\011\uffee\012\uffee\042\uffee\001\002\000\014" +
    "\003\ufff2\010\ufff2\011\ufff2\012\ufff2\042\ufff2\001\002\000" +
    "\020\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\033\uffd2\001\002\000\004\003\u010f\001\002\000\020\014" +
    "\042\015\043\016\036\017\037\020\041\021\040\033\035" +
    "\001\002\000\004\015\u0108\001\002\000\004\065\376\001" +
    "\002\000\004\065\364\001\002\000\004\065\352\001\002" +
    "\000\004\065\340\001\002\000\004\065\331\001\002\000" +
    "\004\065\044\001\002\000\004\037\045\001\002\000\020" +
    "\014\050\015\046\016\052\017\047\020\055\021\056\040" +
    "\uffde\001\002\000\004\065\uffe6\001\002\000\004\065\uffe2" +
    "\001\002\000\004\065\uffe1\001\002\000\006\036\327\040" +
    "\uffe0\001\002\000\004\065\uffe4\001\002\000\004\065\326" +
    "\001\002\000\004\040\057\001\002\000\004\065\uffe5\001" +
    "\002\000\004\065\uffe3\001\002\000\004\041\060\001\002" +
    "\000\030\015\064\016\072\017\103\020\073\021\066\024" +
    "\071\026\105\027\065\065\101\073\110\074\061\001\002" +
    "\000\004\037\322\001\002\000\034\015\064\016\072\017" +
    "\103\020\073\021\066\024\071\026\105\027\065\030\uffdb" +
    "\042\uffdb\065\101\073\110\074\061\001\002\000\004\030" +
    "\315\001\002\000\004\065\306\001\002\000\004\037\300" +
    "\001\002\000\004\065\271\001\002\000\034\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\024\uffc3\026\uffc3\027\uffc3" +
    "\030\uffc3\042\uffc3\065\uffc3\073\uffc3\074\uffc3\001\002\000" +
    "\034\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\024\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\042\uffb1\065\uffb1\073\uffb1\074" +
    "\uffb1\001\002\000\004\037\257\001\002\000\004\065\250" +
    "\001\002\000\004\065\241\001\002\000\034\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\024\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\042\uffc7\065\uffc7\073\uffc7\074\uffc7\001\002\000" +
    "\034\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\024\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\042\uffc5\065\uffc5\073\uffc5\074" +
    "\uffc5\001\002\000\034\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf\042\uffaf\065" +
    "\uffaf\073\uffaf\074\uffaf\001\002\000\034\015\064\016\072" +
    "\017\103\020\073\021\066\024\071\026\105\027\065\030" +
    "\uffd8\042\uffd8\065\101\073\110\074\061\001\002\000\034" +
    "\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\024\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\042\uffb0\065\uffb0\073\uffb0\074\uffb0" +
    "\001\002\000\006\037\221\051\220\001\002\000\034\015" +
    "\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\024\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\042\uffc4\065\uffc4\073\uffc4\074\uffc4\001" +
    "\002\000\004\065\204\001\002\000\034\015\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\021\uffc6\024\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\042\uffc6\065\uffc6\073\uffc6\074\uffc6\001\002\000\004" +
    "\037\125\001\002\000\034\015\064\016\072\017\103\020" +
    "\073\021\066\024\071\026\105\027\065\030\uffd6\042\uffd6" +
    "\065\101\073\110\074\061\001\002\000\034\015\064\016" +
    "\072\017\103\020\073\021\066\024\071\026\105\027\065" +
    "\030\uffda\042\uffda\065\101\073\110\074\061\001\002\000" +
    "\004\037\111\001\002\000\006\065\112\070\114\001\002" +
    "\000\006\040\uffcb\045\121\001\002\000\004\040\117\001" +
    "\002\000\006\040\uffcc\045\115\001\002\000\006\065\112" +
    "\070\114\001\002\000\004\040\uffca\001\002\000\004\034" +
    "\120\001\002\000\034\015\uffcd\016\uffcd\017\uffcd\020\uffcd" +
    "\021\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\042\uffcd\065" +
    "\uffcd\073\uffcd\074\uffcd\001\002\000\006\065\112\070\114" +
    "\001\002\000\004\040\uffc9\001\002\000\006\030\uffd9\042" +
    "\uffd9\001\002\000\006\030\uffd5\042\uffd5\001\002\000\004" +
    "\015\127\001\002\000\004\034\133\001\002\000\004\065" +
    "\130\001\002\000\004\051\131\001\002\000\004\067\132" +
    "\001\002\000\004\034\uffaa\001\002\000\014\037\137\065" +
    "\143\066\144\067\141\072\134\001\002\000\032\034\uff9e" +
    "\040\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\001\002\000\032" +
    "\034\uffa5\040\uffa5\045\uffa5\046\uffa5\047\160\050\161\052" +
    "\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\001\002" +
    "\000\004\034\173\001\002\000\014\037\137\065\143\066" +
    "\144\067\141\072\134\001\002\000\032\034\uffa2\040\uffa2" +
    "\045\uffa2\046\uffa2\047\uffa2\050\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\055\uffa2\056\uffa2\057\uffa2\001\002\000\032\034\uff9d" +
    "\040\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\001\002\000\022" +
    "\045\152\046\145\052\153\053\147\054\150\055\146\056" +
    "\154\057\151\001\002\000\032\034\uff9f\040\uff9f\045\uff9f" +
    "\046\uff9f\047\uff9f\050\uff9f\052\uff9f\053\uff9f\054\uff9f\055" +
    "\uff9f\056\uff9f\057\uff9f\001\002\000\032\034\uff9c\040\uff9c" +
    "\045\uff9c\046\uff9c\047\uff9c\050\uff9c\052\uff9c\053\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\057\uff9c\001\002\000\014\037\137" +
    "\065\143\066\144\067\141\072\134\001\002\000\014\037" +
    "\137\065\143\066\144\067\141\072\134\001\002\000\014" +
    "\037\137\065\143\066\144\067\141\072\134\001\002\000" +
    "\014\037\137\065\143\066\144\067\141\072\134\001\002" +
    "\000\014\037\137\065\143\066\144\067\141\072\134\001" +
    "\002\000\014\037\137\065\143\066\144\067\141\072\134" +
    "\001\002\000\014\037\137\065\143\066\144\067\141\072" +
    "\134\001\002\000\014\037\137\065\143\066\144\067\141" +
    "\072\134\001\002\000\012\034\uff94\040\uff94\045\152\046" +
    "\145\001\002\000\012\034\uff98\040\uff98\045\152\046\145" +
    "\001\002\000\032\034\uffa4\040\uffa4\045\uffa4\046\uffa4\047" +
    "\160\050\161\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\057\uffa4\001\002\000\014\037\137\065\143\066\144\067" +
    "\141\072\134\001\002\000\014\037\137\065\143\066\144" +
    "\067\141\072\134\001\002\000\032\034\uffa0\040\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\050\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\001\002\000\032\034\uffa1\040" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\052\uffa1\053\uffa1" +
    "\054\uffa1\055\uffa1\056\uffa1\057\uffa1\001\002\000\012\034" +
    "\uff93\040\uff93\045\152\046\145\001\002\000\012\034\uff95" +
    "\040\uff95\045\152\046\145\001\002\000\012\034\uff97\040" +
    "\uff97\045\152\046\145\001\002\000\012\034\uff96\040\uff96" +
    "\045\152\046\145\001\002\000\032\034\uffa3\040\uffa3\045" +
    "\uffa3\046\uffa3\047\160\050\161\052\uffa3\053\uffa3\054\uffa3" +
    "\055\uffa3\056\uffa3\057\uffa3\001\002\000\010\040\172\045" +
    "\152\046\145\001\002\000\032\034\uff9b\040\uff9b\045\uff9b" +
    "\046\uff9b\047\uff9b\050\uff9b\052\uff9b\053\uff9b\054\uff9b\055" +
    "\uff9b\056\uff9b\057\uff9b\001\002\000\004\065\175\001\002" +
    "\000\004\040\200\001\002\000\006\062\177\064\176\001" +
    "\002\000\004\040\uffa8\001\002\000\004\040\uffa9\001\002" +
    "\000\004\041\201\001\002\000\030\015\064\016\072\017" +
    "\103\020\073\021\066\024\071\026\105\027\065\065\101" +
    "\073\110\074\061\001\002\000\004\042\203\001\002\000" +
    "\034\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab\024\uffab" +
    "\026\uffab\027\uffab\030\uffab\042\uffab\065\uffab\073\uffab\074" +
    "\uffab\001\002\000\006\034\206\051\205\001\002\000\010" +
    "\022\211\023\213\075\207\001\002\000\034\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\024\uffba\026\uffba\027\uffba" +
    "\030\uffba\042\uffba\065\uffba\073\uffba\074\uffba\001\002\000" +
    "\004\037\216\001\002\000\004\034\215\001\002\000\004" +
    "\034\uffb9\001\002\000\004\034\214\001\002\000\004\034" +
    "\uffb8\001\002\000\034\015\uffbb\016\uffbb\017\uffbb\020\uffbb" +
    "\021\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb\042\uffbb\065" +
    "\uffbb\073\uffbb\074\uffbb\001\002\000\034\015\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\024\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\042\uffbc\065\uffbc\073\uffbc\074\uffbc\001\002\000\004" +
    "\040\217\001\002\000\004\034\uffc8\001\002\000\004\065" +
    "\233\001\002\000\006\065\223\072\224\001\002\000\004" +
    "\040\231\001\002\000\006\036\227\040\uff90\001\002\000" +
    "\006\036\225\040\uff8f\001\002\000\006\065\223\072\224" +
    "\001\002\000\004\040\uff8d\001\002\000\006\065\223\072" +
    "\224\001\002\000\004\040\uff8e\001\002\000\004\034\232" +
    "\001\002\000\034\015\uff92\016\uff92\017\uff92\020\uff92\021" +
    "\uff92\024\uff92\026\uff92\027\uff92\030\uff92\042\uff92\065\uff92" +
    "\073\uff92\074\uff92\001\002\000\004\037\234\001\002\000" +
    "\006\065\223\072\224\001\002\000\004\040\236\001\002" +
    "\000\004\034\237\001\002\000\034\015\uff91\016\uff91\017" +
    "\uff91\020\uff91\021\uff91\024\uff91\026\uff91\027\uff91\030\uff91" +
    "\042\uff91\065\uff91\073\uff91\074\uff91\001\002\000\006\030" +
    "\uffd7\042\uffd7\001\002\000\006\034\243\051\242\001\002" +
    "\000\016\037\137\065\143\066\144\067\141\072\134\075" +
    "\207\001\002\000\034\015\uffbd\016\uffbd\017\uffbd\020\uffbd" +
    "\021\uffbd\024\uffbd\026\uffbd\027\uffbd\030\uffbd\042\uffbd\065" +
    "\uffbd\073\uffbd\074\uffbd\001\002\000\004\034\247\001\002" +
    "\000\010\034\246\045\152\046\145\001\002\000\034\015" +
    "\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\024\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\042\uffbf\065\uffbf\073\uffbf\074\uffbf\001" +
    "\002\000\034\015\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe" +
    "\024\uffbe\026\uffbe\027\uffbe\030\uffbe\042\uffbe\065\uffbe\073" +
    "\uffbe\074\uffbe\001\002\000\006\034\252\051\251\001\002" +
    "\000\006\070\254\075\207\001\002\000\034\015\uffb5\016" +
    "\uffb5\017\uffb5\020\uffb5\021\uffb5\024\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\042\uffb5\065\uffb5\073\uffb5\074\uffb5\001\002\000" +
    "\004\034\256\001\002\000\004\034\255\001\002\000\034" +
    "\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\024\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\042\uffb7\065\uffb7\073\uffb7\074\uffb7" +
    "\001\002\000\034\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021" +
    "\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6\042\uffb6\065\uffb6" +
    "\073\uffb6\074\uffb6\001\002\000\014\037\137\065\143\066" +
    "\144\067\141\072\134\001\002\000\004\040\261\001\002" +
    "\000\004\041\262\001\002\000\030\015\064\016\072\017" +
    "\103\020\073\021\066\024\071\026\105\027\065\065\101" +
    "\073\110\074\061\001\002\000\004\042\264\001\002\000" +
    "\036\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\024\uffae" +
    "\025\265\026\uffae\027\uffae\030\uffae\042\uffae\065\uffae\073" +
    "\uffae\074\uffae\001\002\000\004\041\266\001\002\000\030" +
    "\015\064\016\072\017\103\020\073\021\066\024\071\026" +
    "\105\027\065\065\101\073\110\074\061\001\002\000\004" +
    "\042\270\001\002\000\034\015\uffad\016\uffad\017\uffad\020" +
    "\uffad\021\uffad\024\uffad\026\uffad\027\uffad\030\uffad\042\uffad" +
    "\065\uffad\073\uffad\074\uffad\001\002\000\006\034\273\051" +
    "\272\001\002\000\006\071\275\075\207\001\002\000\034" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\024\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\042\uffb2\065\uffb2\073\uffb2\074\uffb2" +
    "\001\002\000\004\034\277\001\002\000\004\034\276\001" +
    "\002\000\034\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4" +
    "\024\uffb4\026\uffb4\027\uffb4\030\uffb4\042\uffb4\065\uffb4\073" +
    "\uffb4\074\uffb4\001\002\000\034\015\uffb3\016\uffb3\017\uffb3" +
    "\020\uffb3\021\uffb3\024\uffb3\026\uffb3\027\uffb3\030\uffb3\042" +
    "\uffb3\065\uffb3\073\uffb3\074\uffb3\001\002\000\014\037\137" +
    "\065\143\066\144\067\141\072\134\001\002\000\004\040" +
    "\302\001\002\000\004\041\303\001\002\000\030\015\064" +
    "\016\072\017\103\020\073\021\066\024\071\026\105\027" +
    "\065\065\101\073\110\074\061\001\002\000\004\042\305" +
    "\001\002\000\034\015\uffac\016\uffac\017\uffac\020\uffac\021" +
    "\uffac\024\uffac\026\uffac\027\uffac\030\uffac\042\uffac\065\uffac" +
    "\073\uffac\074\uffac\001\002\000\006\034\310\051\307\001" +
    "\002\000\016\037\137\065\143\066\144\067\141\072\134" +
    "\075\207\001\002\000\034\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\024\uffc0\026\uffc0\027\uffc0\030\uffc0\042\uffc0" +
    "\065\uffc0\073\uffc0\074\uffc0\001\002\000\004\034\314\001" +
    "\002\000\010\034\313\045\152\046\145\001\002\000\034" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\024\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\042\uffc2\065\uffc2\073\uffc2\074\uffc2" +
    "\001\002\000\034\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\042\uffc1\065\uffc1" +
    "\073\uffc1\074\uffc1\001\002\000\004\065\316\001\002\000" +
    "\004\034\317\001\002\000\004\042\320\001\002\000\014" +
    "\003\uffec\010\uffec\011\uffec\012\uffec\042\uffec\001\002\000" +
    "\006\030\uffdc\042\uffdc\001\002\000\006\065\112\070\114" +
    "\001\002\000\004\040\324\001\002\000\004\034\325\001" +
    "\002\000\034\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce" +
    "\024\uffce\026\uffce\027\uffce\030\uffce\042\uffce\065\uffce\073" +
    "\uffce\074\uffce\001\002\000\006\036\uffdd\040\uffdd\001\002" +
    "\000\020\014\050\015\046\016\052\017\047\020\055\021" +
    "\056\040\uffde\001\002\000\004\040\uffdf\001\002\000\004" +
    "\037\332\001\002\000\020\014\050\015\046\016\052\017" +
    "\047\020\055\021\056\040\uffde\001\002\000\004\040\334" +
    "\001\002\000\004\041\335\001\002\000\030\015\064\016" +
    "\072\017\103\020\073\021\066\024\071\026\105\027\065" +
    "\065\101\073\110\074\061\001\002\000\004\042\337\001" +
    "\002\000\014\003\uffe7\010\uffe7\011\uffe7\012\uffe7\042\uffe7" +
    "\001\002\000\004\037\341\001\002\000\020\014\050\015" +
    "\046\016\052\017\047\020\055\021\056\040\uffde\001\002" +
    "\000\004\040\343\001\002\000\004\041\344\001\002\000" +
    "\030\015\064\016\072\017\103\020\073\021\066\024\071" +
    "\026\105\027\065\065\101\073\110\074\061\001\002\000" +
    "\004\030\346\001\002\000\004\065\347\001\002\000\004" +
    "\034\350\001\002\000\004\042\351\001\002\000\014\003" +
    "\uffea\010\uffea\011\uffea\012\uffea\042\uffea\001\002\000\004" +
    "\037\353\001\002\000\020\014\050\015\046\016\052\017" +
    "\047\020\055\021\056\040\uffde\001\002\000\004\040\355" +
    "\001\002\000\004\041\356\001\002\000\030\015\064\016" +
    "\072\017\103\020\073\021\066\024\071\026\105\027\065" +
    "\065\101\073\110\074\061\001\002\000\004\030\360\001" +
    "\002\000\004\065\361\001\002\000\004\034\362\001\002" +
    "\000\004\042\363\001\002\000\014\003\uffe8\010\uffe8\011" +
    "\uffe8\012\uffe8\042\uffe8\001\002\000\004\037\365\001\002" +
    "\000\020\014\050\015\046\016\052\017\047\020\055\021" +
    "\056\040\uffde\001\002\000\004\040\367\001\002\000\004" +
    "\041\370\001\002\000\030\015\064\016\072\017\103\020" +
    "\073\021\066\024\071\026\105\027\065\065\101\073\110" +
    "\074\061\001\002\000\004\030\372\001\002\000\004\065" +
    "\373\001\002\000\004\034\374\001\002\000\004\042\375" +
    "\001\002\000\014\003\uffe9\010\uffe9\011\uffe9\012\uffe9\042" +
    "\uffe9\001\002\000\004\037\377\001\002\000\020\014\050" +
    "\015\046\016\052\017\047\020\055\021\056\040\uffde\001" +
    "\002\000\004\040\u0101\001\002\000\004\041\u0102\001\002" +
    "\000\030\015\064\016\072\017\103\020\073\021\066\024" +
    "\071\026\105\027\065\065\101\073\110\074\061\001\002" +
    "\000\004\030\u0104\001\002\000\004\065\u0105\001\002\000" +
    "\004\034\u0106\001\002\000\004\042\u0107\001\002\000\014" +
    "\003\uffeb\010\uffeb\011\uffeb\012\uffeb\042\uffeb\001\002\000" +
    "\004\072\u0109\001\002\000\004\051\u010a\001\002\000\006" +
    "\066\u010b\067\u010c\001\002\000\004\034\uffcf\001\002\000" +
    "\004\034\uffd0\001\002\000\004\034\u010e\001\002\000\014" +
    "\003\uffd4\010\uffd4\011\uffd4\012\uffd4\042\uffd4\001\002\000" +
    "\010\002\ufff7\003\ufff7\042\ufff7\001\002\000\006\003\ufff3" +
    "\042\ufff3\001\002\000\006\003\ufff6\042\ufff6\001\002\000" +
    "\006\003\u0113\042\u0114\001\002\000\010\002\ufff8\003\ufff8" +
    "\042\ufff8\001\002\000\010\002\ufff9\003\ufff9\042\ufff9\001" +
    "\002\000\006\007\015\041\u0117\001\002\000\004\042\u011b" +
    "\001\002\000\004\007\015\001\002\000\006\003\u0119\042" +
    "\u011a\001\002\000\004\002\ufffb\001\002\000\004\002\ufffc" +
    "\001\002\000\004\003\u011c\001\002\000\004\002\ufffa\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011b\000\006\002\004\006\003\001\001\000\002\001" +
    "\001\000\006\003\013\004\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\027\032\031\020\032\030\033\022\034" +
    "\021\035\023\036\027\037\025\042\026\043\033\001\001" +
    "\000\002\001\001\000\026\027\u0111\031\020\032\030\033" +
    "\022\034\021\035\023\036\027\037\025\042\026\043\033" +
    "\001\001\000\026\027\u0110\031\020\032\030\033\022\034" +
    "\021\035\023\036\027\037\025\042\026\043\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\027\u010f\031\020" +
    "\032\030\033\022\034\021\035\023\036\027\037\025\042" +
    "\026\043\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\052\026\053\030\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\005\062\007\106\017\061\020\067" +
    "\021\077\022\075\044\076\047\105\052\073\053\074\054" +
    "\101\055\103\056\066\001\001\000\002\001\001\000\034" +
    "\005\320\007\106\017\061\020\067\021\077\022\075\044" +
    "\076\047\105\052\073\053\074\054\101\055\103\056\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\237\007\106\017\061\020\067\021\077\022\075\044" +
    "\076\047\105\052\073\053\074\054\101\055\103\056\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\123\007\106\017\061\020\067\021\077\022" +
    "\075\044\076\047\105\052\073\053\074\054\101\055\103" +
    "\056\066\001\001\000\034\005\122\007\106\017\061\020" +
    "\067\021\077\022\075\044\076\047\105\052\073\053\074" +
    "\054\101\055\103\056\066\001\001\000\002\001\001\000" +
    "\004\045\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\045\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\012\141\014\134\015\137\016\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\170\014\134\015\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\167\015\137\001\001\000\010" +
    "\012\166\014\134\015\137\001\001\000\010\012\165\014" +
    "\134\015\137\001\001\000\010\012\164\014\134\015\137" +
    "\001\001\000\010\012\163\014\134\015\137\001\001\000" +
    "\006\014\156\015\137\001\001\000\010\012\155\014\134" +
    "\015\137\001\001\000\010\012\154\014\134\015\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\162\001\001\000\004\015\161\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\201" +
    "\007\106\017\061\020\067\021\077\022\075\044\076\047" +
    "\105\052\073\053\074\054\101\055\103\056\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\046\211\057\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\050\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\225\001\001\000\002\001" +
    "\001\000\004\050\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\244\014\134\015\137\046\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\141\014\134" +
    "\015\137\016\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\262\007\106\017\061\020\067\021\077" +
    "\022\075\044\076\047\105\052\073\053\074\054\101\055" +
    "\103\056\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\005\266\007\106\017\061\020" +
    "\067\021\077\022\075\044\076\047\105\052\073\053\074" +
    "\054\101\055\103\056\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\273\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\141\014\134" +
    "\015\137\016\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\005\303\007\106\017\061\020\067\021\077" +
    "\022\075\044\076\047\105\052\073\053\074\054\101\055" +
    "\103\056\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\311\014\134\015\137\046" +
    "\310\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\322\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\052\026\327\030\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\052\026\332\030\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\005" +
    "\335\007\106\017\061\020\067\021\077\022\075\044\076" +
    "\047\105\052\073\053\074\054\101\055\103\056\066\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\052\026\341\030\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\344\007\106\017\061" +
    "\020\067\021\077\022\075\044\076\047\105\052\073\053" +
    "\074\054\101\055\103\056\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\052\026\353" +
    "\030\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\005\356\007\106\017\061\020\067\021\077\022\075" +
    "\044\076\047\105\052\073\053\074\054\101\055\103\056" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\052\026\365\030\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\370\007\106\017" +
    "\061\020\067\021\077\022\075\044\076\047\105\052\073" +
    "\053\074\054\101\055\103\056\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\025\052\026" +
    "\377\030\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\u0102\007\106\017\061\020\067\021\077\022" +
    "\075\044\076\047\105\052\073\053\074\054\101\055\103" +
    "\056\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u010c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\u0115\001\001\000\002\001\001\000\004\004" +
    "\u0117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserTL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserTL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserTL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static TablaSimbolos tabla=new TablaSimbolos();
    public static Simbolo simbolos;

    public void syntax_error(Symbol s) {
        report_error("Error de sintaxis en linea: " + (s.left) + " , columna: " + (s.right + 1) + ", simbolo: " + s.value, null);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("", null);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserTL$actions {
  private final ParserTL parser;

  /** Constructor */
  CUP$ParserTL$actions(ParserTL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action_part00000000(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserTL$result;

      /* select the action based on the action number */
      switch (CUP$ParserTL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaraciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		RESULT = start_val;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserTL$parser.done_parsing();
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaraciones ::= dec_using dec_namespace 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= dec_using dec_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_using ::= USING IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de using---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_using ::= USING IDENTIFICADOR error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta ';'");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                    System.out.println("---Declaracion de namespace---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta '}' en namespace");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_namespace ::= NAMESPACE IDENTIFICADOR dec_clase LLAVE_DERECHA error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta '{' en namespace");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de clase---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta '}' en clase");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_clase ::= CLASS IDENTIFICADOR cuerpo_clase error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta '{' en clase");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_clase ::= metodos cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_clase ::= metodos 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo_clase ::= dec_constantes 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo_clase ::= dec_constantes cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodos ::= metodo_int 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodos ::= metodo_char 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodos ::= metodo_string 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodos ::= metodo_float 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // metodos ::= metodo_void 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // metodos ::= metodo_bool 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // metodo_int ::= mod_acceso INT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION ENTERA----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_int",24, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // metodo_string ::= mod_acceso STRING IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION STRING----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_string",26, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // metodo_float ::= mod_acceso FLOAT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION FLOAT----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_float",29, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // metodo_bool ::= mod_acceso BOOL IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION BOLEANO----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_bool",27, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // metodo_char ::= mod_acceso CHAR IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION CARACTER----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_char",25, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // metodo_void ::= mod_acceso VOID IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION VACIA----------------\n\n");;
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_void",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_metodo ::= INT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_metodo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_metodo ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_metodo ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_metodo ::= BOOL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_metodo ::= VOID 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros ::= 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametro ::= tipo_metodo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametro",22, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cuerpo ::= estructura_control cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo ::= dec_variables 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo ::= dec_variables cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo ::= impresion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo ::= impresion cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo ::= llamar_funcion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cuerpo ::= llamar_funcion cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec_constantes ::= mod_acceso CONST INT CONSTANTE ASIGNACION val PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("Declaracion de constante");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_constantes",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // mod_acceso ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // mod_acceso ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // mod_acceso ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // val ::= NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // val ::= NDECIMAL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // impresion ::= CWLINE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Impresion de consola con salto de linea---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("impresion",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // impresion ::= CWRITE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Impresion de consola sin salto de linea---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("impresion",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // imprimir ::= CADENA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // imprimir ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // imprimir ::= CADENA SUMA imprimir 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // imprimir ::= IDENTIFICADOR SUMA imprimir 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // lecturas ::= CRLINE PARENTESIS_IZQUIERDO PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("lecturas",36, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_variables ::= tipo_int 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dec_variables ::= tipo_string 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec_variables ::= tipo_char 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec_variables ::= tipo_float 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // dec_variables ::= tipo_bool 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo_int ::= INT IDENTIFICADOR ASIGNACION exp_aritmetica PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable entera--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",40, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_int ::= INT IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",40, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_int ::= INT IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",40, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_float ::= FLOAT IDENTIFICADOR ASIGNACION exp_aritmetica PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable entera--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",42, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_float ::= FLOAT IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",42, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_float ::= FLOAT IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",42, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tipo_bool ::= BOOL IDENTIFICADOR ASIGNACION boleano PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable entera--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_bool",44, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tipo_bool ::= BOOL IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_bool",44, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo_bool ::= BOOL IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_bool",44, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // boleano ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("boleano",45, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // boleano ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("boleano",45, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo_string ::= STRING IDENTIFICADOR ASIGNACION CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable entera--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_string",43, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipo_string ::= STRING IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_string",43, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipo_string ::= STRING IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_string",43, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipo_char ::= CHAR IDENTIFICADOR ASIGNACION CARACTER PUNTO_COMA 
            {
              Object RESULT =null;
		
            System.out.println("--Variable entera--");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_char",41, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // tipo_char ::= CHAR IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_char",41, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // tipo_char ::= CHAR IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_char",41, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sentencia_if ::= IF PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia if---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencia_if ::= IF PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA ELSE LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia if con else---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia_while ::= WHILE PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                    System.out.println("---Sentencia while---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_while",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia_for ::= FOR PARENTESIS_IZQUIERDO for_init PUNTO_COMA termino_logico PUNTO_COMA for_update PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.out.println("---Sentencia for---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_for",16, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // for_init ::= INT IDENTIFICADOR ASIGNACION NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_init",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // for_update ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_update",18, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // for_update ::= IDENTIFICADOR DECREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_update",18, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= exp_logica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // exp_aritmetica ::= termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exp_aritmetica ::= exp_aritmetica SUMA termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exp_aritmetica ::= exp_aritmetica RESTA termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // termino ::= termino MULTIPLICACION factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // termino ::= termino DIVISION factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // factor ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // factor ::= NDECIMAL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // factor ::= PARENTESIS_IZQUIERDO exp_aritmetica PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // exp_logica ::= termino_logico Y_LOGICO termino_logico 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_logica",9, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // exp_logica ::= termino_logico O_LOGICO termino_logico 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_logica",9, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // termino_logico ::= exp_aritmetica IGUALDAD exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // termino_logico ::= exp_aritmetica DESIGUALDAD exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // termino_logico ::= exp_aritmetica MAYOR_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // termino_logico ::= exp_aritmetica MENOR_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // termino_logico ::= exp_aritmetica MENOR_O_IGUAL_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // termino_logico ::= exp_aritmetica MAYOR_O_IGUAL_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // llamar_funcion ::= IDENTIFICADOR PARENTESIS_IZQUIERDO pasar_parametros PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("---Se llama a funcion---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("llamar_funcion",37, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // llamar_funcion ::= IDENTIFICADOR ASIGNACION IDENTIFICADOR PARENTESIS_IZQUIERDO pasar_parametros PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("---Se llama a funcion y se asigna a variable---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("llamar_funcion",37, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // pasar_parametros ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",38, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // pasar_parametros ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",38, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // pasar_parametros ::= IDENTIFICADOR COMA pasar_parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",38, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // pasar_parametros ::= CONSTANTE COMA pasar_parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",38, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserTL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
              return CUP$ParserTL$do_action_part00000000(
                               CUP$ParserTL$act_num,
                               CUP$ParserTL$parser,
                               CUP$ParserTL$stack,
                               CUP$ParserTL$top);
    }
}

}
