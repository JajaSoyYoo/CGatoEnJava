
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package act5;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserTL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserTL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserTL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserTL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\006\004\000\002\006" +
    "\004\000\002\002\005\000\002\002\005\000\002\003\007" +
    "\000\002\003\007\000\002\003\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\006\000\002\027\004\000\002" +
    "\027\003\000\002\027\003\000\002\027\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\016\000" +
    "\002\034\016\000\002\037\016\000\002\035\016\000\002" +
    "\033\016\000\002\036\013\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\026\003\000\002\026\005\000" +
    "\002\026\002\000\002\030\004\000\002\005\004\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\004" +
    "\000\002\042\011\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\044\007\000\002\044\007\000\002" +
    "\045\003\000\002\045\003\000\002\045\005\000\002\045" +
    "\005\000\002\046\005\000\002\007\007\000\002\007\005" +
    "\000\002\007\006\000\002\007\007\000\002\007\005\000" +
    "\002\007\006\000\002\041\005\000\002\041\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\020\011\000\002\020\015\000\002\021\011\000\002\022" +
    "\015\000\002\023\006\000\002\024\004\000\002\024\004" +
    "\000\002\011\003\000\002\011\003\000\002\012\003\000" +
    "\002\012\005\000\002\012\005\000\002\014\003\000\002" +
    "\014\005\000\002\014\005\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\005" +
    "\000\002\013\005\000\002\013\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\005\000\002\016\005\000\002" +
    "\016\005\000\002\016\005\000\002\047\007\000\002\047" +
    "\011\000\002\050\003\000\002\050\003\000\002\050\005" +
    "\000\002\050\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\004\005\006\001\002\000\004\002\u0105\001" +
    "\002\000\006\006\012\007\015\001\002\000\004\065\007" +
    "\001\002\000\006\003\010\034\011\001\002\000\006\006" +
    "\ufffd\007\ufffd\001\002\000\006\006\ufffe\007\ufffe\001\002" +
    "\000\004\065\375\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\065\016\001\002\000\012" +
    "\010\017\011\032\012\025\041\020\001\002\000\020\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\033\uffd3" +
    "\001\002\000\010\010\017\011\032\012\025\001\002\000" +
    "\014\003\ufff5\010\017\011\032\012\025\042\ufff5\001\002" +
    "\000\014\003\ufff0\010\ufff0\011\ufff0\012\ufff0\042\ufff0\001" +
    "\002\000\014\003\ufff1\010\ufff1\011\ufff1\012\ufff1\042\ufff1" +
    "\001\002\000\014\003\uffed\010\uffed\011\uffed\012\uffed\042" +
    "\uffed\001\002\000\020\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\033\uffd1\001\002\000\014\003\uffef\010" +
    "\uffef\011\uffef\012\uffef\042\uffef\001\002\000\014\003\ufff4" +
    "\010\017\011\032\012\025\042\ufff4\001\002\000\014\003" +
    "\uffee\010\uffee\011\uffee\012\uffee\042\uffee\001\002\000\014" +
    "\003\ufff2\010\ufff2\011\ufff2\012\ufff2\042\ufff2\001\002\000" +
    "\020\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2" +
    "\033\uffd2\001\002\000\004\003\367\001\002\000\020\014" +
    "\042\015\043\016\036\017\037\020\041\021\040\033\035" +
    "\001\002\000\014\015\063\016\072\017\100\020\073\021" +
    "\066\001\002\000\004\065\350\001\002\000\004\065\336" +
    "\001\002\000\004\065\324\001\002\000\004\065\312\001" +
    "\002\000\004\065\303\001\002\000\004\065\044\001\002" +
    "\000\004\037\045\001\002\000\020\014\050\015\046\016" +
    "\052\017\047\020\055\021\056\040\uffde\001\002\000\004" +
    "\065\uffe6\001\002\000\004\065\uffe2\001\002\000\004\065" +
    "\uffe1\001\002\000\006\036\301\040\uffe0\001\002\000\004" +
    "\065\uffe4\001\002\000\004\065\300\001\002\000\004\040" +
    "\057\001\002\000\004\065\uffe5\001\002\000\004\065\uffe3" +
    "\001\002\000\004\041\060\001\002\000\030\015\063\016" +
    "\072\017\100\020\073\021\066\024\070\026\101\027\065" +
    "\065\076\073\104\074\061\001\002\000\004\037\274\001" +
    "\002\000\034\015\063\016\072\017\100\020\073\021\066" +
    "\024\070\026\101\027\065\030\uffdb\042\uffdb\065\076\073" +
    "\104\074\061\001\002\000\006\065\uffc1\072\uffc1\001\002" +
    "\000\004\030\267\001\002\000\004\037\261\001\002\000" +
    "\006\065\uffbf\072\uffbf\001\002\000\034\015\uffb7\016\uffb7" +
    "\017\uffb7\020\uffb7\021\uffb7\024\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\042\uffb7\065\uffb7\073\uffb7\074\uffb7\001\002\000\004" +
    "\037\247\001\002\000\004\065\221\001\002\000\006\065" +
    "\uffbe\072\uffbe\001\002\000\006\065\uffc0\072\uffc0\001\002" +
    "\000\034\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\024" +
    "\uffb5\026\uffb5\027\uffb5\030\uffb5\042\uffb5\065\uffb5\073\uffb5" +
    "\074\uffb5\001\002\000\034\015\063\016\072\017\100\020" +
    "\073\021\066\024\070\026\101\027\065\030\uffd8\042\uffd8" +
    "\065\076\073\104\074\061\001\002\000\006\037\201\051" +
    "\200\001\002\000\034\015\uffb6\016\uffb6\017\uffb6\020\uffb6" +
    "\021\uffb6\024\uffb6\026\uffb6\027\uffb6\030\uffb6\042\uffb6\065" +
    "\uffb6\073\uffb6\074\uffb6\001\002\000\006\065\uffbd\072\uffbd" +
    "\001\002\000\004\037\121\001\002\000\034\015\063\016" +
    "\072\017\100\020\073\021\066\024\070\026\101\027\065" +
    "\030\uffd6\042\uffd6\065\076\073\104\074\061\001\002\000" +
    "\034\015\063\016\072\017\100\020\073\021\066\024\070" +
    "\026\101\027\065\030\uffda\042\uffda\065\076\073\104\074" +
    "\061\001\002\000\004\037\105\001\002\000\006\065\106" +
    "\070\110\001\002\000\006\040\uffcd\045\115\001\002\000" +
    "\004\040\113\001\002\000\006\040\uffce\045\111\001\002" +
    "\000\006\065\106\070\110\001\002\000\004\040\uffcc\001" +
    "\002\000\004\034\114\001\002\000\034\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\024\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\042\uffcf\065\uffcf\073\uffcf\074\uffcf\001\002\000\006" +
    "\065\106\070\110\001\002\000\004\040\uffcb\001\002\000" +
    "\006\030\uffd9\042\uffd9\001\002\000\006\030\uffd5\042\uffd5" +
    "\001\002\000\004\015\123\001\002\000\004\034\127\001" +
    "\002\000\004\065\124\001\002\000\004\051\125\001\002" +
    "\000\004\067\126\001\002\000\004\034\uffb0\001\002\000" +
    "\014\037\133\065\137\066\140\067\135\072\130\001\002" +
    "\000\032\034\uffa4\040\uffa4\045\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4" +
    "\001\002\000\032\034\uffab\040\uffab\045\uffab\046\uffab\047" +
    "\155\050\156\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab" +
    "\057\uffab\001\002\000\004\034\167\001\002\000\014\037" +
    "\133\065\137\066\140\067\135\072\130\001\002\000\032" +
    "\034\uffa8\040\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\001\002" +
    "\000\032\034\uffa3\040\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\001\002\000\022\045\145\046\141\052\147\053\142\054" +
    "\144\055\143\056\150\057\146\001\002\000\032\034\uffa5" +
    "\040\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\001\002\000\032" +
    "\034\uffa2\040\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\052" +
    "\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\001\002" +
    "\000\014\037\133\065\137\066\140\067\135\072\130\001" +
    "\002\000\014\037\133\065\137\066\140\067\135\072\130" +
    "\001\002\000\014\037\133\065\137\066\140\067\135\072" +
    "\130\001\002\000\014\037\133\065\137\066\140\067\135" +
    "\072\130\001\002\000\014\037\133\065\137\066\140\067" +
    "\135\072\130\001\002\000\014\037\133\065\137\066\140" +
    "\067\135\072\130\001\002\000\014\037\133\065\137\066" +
    "\140\067\135\072\130\001\002\000\014\037\133\065\137" +
    "\066\140\067\135\072\130\001\002\000\012\034\uff9a\040" +
    "\uff9a\045\145\046\141\001\002\000\012\034\uff9e\040\uff9e" +
    "\045\145\046\141\001\002\000\012\034\uff99\040\uff99\045" +
    "\145\046\141\001\002\000\032\034\uffaa\040\uffaa\045\uffaa" +
    "\046\uffaa\047\155\050\156\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\057\uffaa\001\002\000\014\037\133\065\137" +
    "\066\140\067\135\072\130\001\002\000\014\037\133\065" +
    "\137\066\140\067\135\072\130\001\002\000\032\034\uffa6" +
    "\040\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\052\uffa6\053" +
    "\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\001\002\000\032" +
    "\034\uffa7\040\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\052" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\001\002" +
    "\000\012\034\uff9b\040\uff9b\045\145\046\141\001\002\000" +
    "\012\034\uff9c\040\uff9c\045\145\046\141\001\002\000\012" +
    "\034\uff9d\040\uff9d\045\145\046\141\001\002\000\032\034" +
    "\uffa9\040\uffa9\045\uffa9\046\uffa9\047\155\050\156\052\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9\001\002\000" +
    "\010\040\166\045\145\046\141\001\002\000\032\034\uffa1" +
    "\040\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\001\002\000\004" +
    "\065\171\001\002\000\004\040\174\001\002\000\006\062" +
    "\173\064\172\001\002\000\004\040\uffae\001\002\000\004" +
    "\040\uffaf\001\002\000\004\041\175\001\002\000\030\015" +
    "\063\016\072\017\100\020\073\021\066\024\070\026\101" +
    "\027\065\065\076\073\104\074\061\001\002\000\004\042" +
    "\177\001\002\000\034\015\uffb1\016\uffb1\017\uffb1\020\uffb1" +
    "\021\uffb1\024\uffb1\026\uffb1\027\uffb1\030\uffb1\042\uffb1\065" +
    "\uffb1\073\uffb1\074\uffb1\001\002\000\004\065\213\001\002" +
    "\000\006\065\203\072\204\001\002\000\004\040\211\001" +
    "\002\000\006\036\207\040\uff96\001\002\000\006\036\205" +
    "\040\uff95\001\002\000\006\065\203\072\204\001\002\000" +
    "\004\040\uff93\001\002\000\006\065\203\072\204\001\002" +
    "\000\004\040\uff94\001\002\000\004\034\212\001\002\000" +
    "\034\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\024\uff98" +
    "\026\uff98\027\uff98\030\uff98\042\uff98\065\uff98\073\uff98\074" +
    "\uff98\001\002\000\004\037\214\001\002\000\006\065\203" +
    "\072\204\001\002\000\004\040\216\001\002\000\004\034" +
    "\217\001\002\000\034\015\uff97\016\uff97\017\uff97\020\uff97" +
    "\021\uff97\024\uff97\026\uff97\027\uff97\030\uff97\042\uff97\065" +
    "\uff97\073\uff97\074\uff97\001\002\000\006\030\uffd7\042\uffd7" +
    "\001\002\000\012\003\224\034\225\036\222\051\223\001" +
    "\002\000\004\065\245\001\002\000\026\022\235\023\236" +
    "\037\133\065\137\066\140\067\135\070\231\071\237\072" +
    "\130\075\233\001\002\000\034\015\uffc5\016\uffc5\017\uffc5" +
    "\020\uffc5\021\uffc5\024\uffc5\026\uffc5\027\uffc5\030\uffc5\042" +
    "\uffc5\065\uffc5\073\uffc5\074\uffc5\001\002\000\034\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\024\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\042\uffc8\065\uffc8\073\uffc8\074\uffc8\001\002" +
    "\000\006\003\227\034\230\001\002\000\034\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\024\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\042\uffc4\065\uffc4\073\uffc4\074\uffc4\001\002\000" +
    "\034\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\024\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\042\uffc7\065\uffc7\073\uffc7\074" +
    "\uffc7\001\002\000\004\034\uffbb\001\002\000\004\034\244" +
    "\001\002\000\004\037\242\001\002\000\004\034\241\001" +
    "\002\000\004\034\uffb9\001\002\000\004\034\uffb8\001\002" +
    "\000\004\034\uffba\001\002\000\010\034\uffbc\045\145\046" +
    "\141\001\002\000\034\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\024\uffc9\026\uffc9\027\uffc9\030\uffc9\042\uffc9\065" +
    "\uffc9\073\uffc9\074\uffc9\001\002\000\004\040\243\001\002" +
    "\000\004\034\uffca\001\002\000\034\015\uffc6\016\uffc6\017" +
    "\uffc6\020\uffc6\021\uffc6\024\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\042\uffc6\065\uffc6\073\uffc6\074\uffc6\001\002\000\010\003" +
    "\uffc2\034\uffc2\036\222\001\002\000\006\003\uffc3\034\uffc3" +
    "\001\002\000\014\037\133\065\137\066\140\067\135\072" +
    "\130\001\002\000\004\040\251\001\002\000\004\041\252" +
    "\001\002\000\030\015\063\016\072\017\100\020\073\021" +
    "\066\024\070\026\101\027\065\065\076\073\104\074\061" +
    "\001\002\000\004\042\254\001\002\000\036\015\uffb4\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\024\uffb4\025\255\026\uffb4" +
    "\027\uffb4\030\uffb4\042\uffb4\065\uffb4\073\uffb4\074\uffb4\001" +
    "\002\000\004\041\256\001\002\000\030\015\063\016\072" +
    "\017\100\020\073\021\066\024\070\026\101\027\065\065" +
    "\076\073\104\074\061\001\002\000\004\042\260\001\002" +
    "\000\034\015\uffb3\016\uffb3\017\uffb3\020\uffb3\021\uffb3\024" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\042\uffb3\065\uffb3\073\uffb3" +
    "\074\uffb3\001\002\000\014\037\133\065\137\066\140\067" +
    "\135\072\130\001\002\000\004\040\263\001\002\000\004" +
    "\041\264\001\002\000\030\015\063\016\072\017\100\020" +
    "\073\021\066\024\070\026\101\027\065\065\076\073\104" +
    "\074\061\001\002\000\004\042\266\001\002\000\034\015" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\024\uffb2\026\uffb2" +
    "\027\uffb2\030\uffb2\042\uffb2\065\uffb2\073\uffb2\074\uffb2\001" +
    "\002\000\004\065\270\001\002\000\004\034\271\001\002" +
    "\000\004\042\272\001\002\000\014\003\uffec\010\uffec\011" +
    "\uffec\012\uffec\042\uffec\001\002\000\006\030\uffdc\042\uffdc" +
    "\001\002\000\006\065\106\070\110\001\002\000\004\040" +
    "\276\001\002\000\004\034\277\001\002\000\034\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\024\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\042\uffd0\065\uffd0\073\uffd0\074\uffd0\001\002" +
    "\000\006\036\uffdd\040\uffdd\001\002\000\020\014\050\015" +
    "\046\016\052\017\047\020\055\021\056\040\uffde\001\002" +
    "\000\004\040\uffdf\001\002\000\004\037\304\001\002\000" +
    "\020\014\050\015\046\016\052\017\047\020\055\021\056" +
    "\040\uffde\001\002\000\004\040\306\001\002\000\004\041" +
    "\307\001\002\000\030\015\063\016\072\017\100\020\073" +
    "\021\066\024\070\026\101\027\065\065\076\073\104\074" +
    "\061\001\002\000\004\042\311\001\002\000\014\003\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\042\uffe7\001\002\000\004\037" +
    "\313\001\002\000\020\014\050\015\046\016\052\017\047" +
    "\020\055\021\056\040\uffde\001\002\000\004\040\315\001" +
    "\002\000\004\041\316\001\002\000\030\015\063\016\072" +
    "\017\100\020\073\021\066\024\070\026\101\027\065\065" +
    "\076\073\104\074\061\001\002\000\004\030\320\001\002" +
    "\000\004\065\321\001\002\000\004\034\322\001\002\000" +
    "\004\042\323\001\002\000\014\003\uffea\010\uffea\011\uffea" +
    "\012\uffea\042\uffea\001\002\000\004\037\325\001\002\000" +
    "\020\014\050\015\046\016\052\017\047\020\055\021\056" +
    "\040\uffde\001\002\000\004\040\327\001\002\000\004\041" +
    "\330\001\002\000\030\015\063\016\072\017\100\020\073" +
    "\021\066\024\070\026\101\027\065\065\076\073\104\074" +
    "\061\001\002\000\004\030\332\001\002\000\004\065\333" +
    "\001\002\000\004\034\334\001\002\000\004\042\335\001" +
    "\002\000\014\003\uffe8\010\uffe8\011\uffe8\012\uffe8\042\uffe8" +
    "\001\002\000\004\037\337\001\002\000\020\014\050\015" +
    "\046\016\052\017\047\020\055\021\056\040\uffde\001\002" +
    "\000\004\040\341\001\002\000\004\041\342\001\002\000" +
    "\030\015\063\016\072\017\100\020\073\021\066\024\070" +
    "\026\101\027\065\065\076\073\104\074\061\001\002\000" +
    "\004\030\344\001\002\000\004\065\345\001\002\000\004" +
    "\034\346\001\002\000\004\042\347\001\002\000\014\003" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\042\uffe9\001\002\000\004" +
    "\037\351\001\002\000\020\014\050\015\046\016\052\017" +
    "\047\020\055\021\056\040\uffde\001\002\000\004\040\353" +
    "\001\002\000\004\041\354\001\002\000\030\015\063\016" +
    "\072\017\100\020\073\021\066\024\070\026\101\027\065" +
    "\065\076\073\104\074\061\001\002\000\004\030\356\001" +
    "\002\000\004\065\357\001\002\000\004\034\360\001\002" +
    "\000\004\042\361\001\002\000\014\003\uffeb\010\uffeb\011" +
    "\uffeb\012\uffeb\042\uffeb\001\002\000\004\072\363\001\002" +
    "\000\004\051\364\001\002\000\024\022\235\023\236\037" +
    "\133\065\137\066\140\067\135\070\231\071\237\072\130" +
    "\001\002\000\004\034\366\001\002\000\014\003\uffd4\010" +
    "\uffd4\011\uffd4\012\uffd4\042\uffd4\001\002\000\010\002\ufff7" +
    "\003\ufff7\042\ufff7\001\002\000\006\003\ufff3\042\ufff3\001" +
    "\002\000\006\003\ufff6\042\ufff6\001\002\000\006\003\373" +
    "\042\374\001\002\000\010\002\ufff8\003\ufff8\042\ufff8\001" +
    "\002\000\010\002\ufff9\003\ufff9\042\ufff9\001\002\000\006" +
    "\007\015\041\377\001\002\000\004\042\u0103\001\002\000" +
    "\004\007\015\001\002\000\006\003\u0101\042\u0102\001\002" +
    "\000\004\002\ufffb\001\002\000\004\002\ufffc\001\002\000" +
    "\004\003\u0104\001\002\000\004\002\ufffa\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\006\002\004\006\003\001\001\000\002\001" +
    "\001\000\006\003\013\004\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\027\032\031\020\032\030\033\022\034" +
    "\021\035\023\036\027\037\025\042\026\043\033\001\001" +
    "\000\002\001\001\000\026\027\371\031\020\032\030\033" +
    "\022\034\021\035\023\036\027\037\025\042\026\043\033" +
    "\001\001\000\026\027\370\031\020\032\030\033\022\034" +
    "\021\035\023\036\027\037\025\042\026\043\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\027\367\031\020" +
    "\032\030\033\022\034\021\035\023\036\027\037\025\042" +
    "\026\043\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\361\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\052\026\053" +
    "\030\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\005\063\007\102\010\070" +
    "\017\061\020\066\021\076\022\073\044\074\047\101\001" +
    "\001\000\002\001\001\000\024\005\272\007\102\010\070" +
    "\017\061\020\066\021\076\022\073\044\074\047\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\217\007\102\010\070\017\061\020" +
    "\066\021\076\022\073\044\074\047\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\117\007\102\010\070\017\061\020\066" +
    "\021\076\022\073\044\074\047\101\001\001\000\024\005" +
    "\116\007\102\010\070\017\061\020\066\021\076\022\073" +
    "\044\074\047\101\001\001\000\002\001\001\000\004\045" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\012\135\014\130\015\133\016\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\164\014\130\015\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\163\015\133\001\001\000\010\012\162" +
    "\014\130\015\133\001\001\000\010\012\161\014\130\015" +
    "\133\001\001\000\010\012\160\014\130\015\133\001\001" +
    "\000\006\014\153\015\133\001\001\000\010\012\152\014" +
    "\130\015\133\001\001\000\010\012\151\014\130\015\133" +
    "\001\001\000\010\012\150\014\130\015\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\157\001\001\000\004\015\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\175\007\102" +
    "\010\070\017\061\020\066\021\076\022\073\044\074\047" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\205\001\001" +
    "\000\002\001\001\000\004\050\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\225" +
    "\001\001\000\002\001\001\000\014\012\237\014\130\015" +
    "\133\040\233\046\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\245\001\001\000\002\001\001\000\012\012\135\014\130" +
    "\015\133\016\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\005\252\007\102\010\070\017\061\020\066" +
    "\021\076\022\073\044\074\047\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\256" +
    "\007\102\010\070\017\061\020\066\021\076\022\073\044" +
    "\074\047\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\135\014\130\015\133\016\261\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\005\264\007\102" +
    "\010\070\017\061\020\066\021\076\022\073\044\074\047" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\274\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\052\026\301\030\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\052\026\304\030" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\307\007\102\010\070\017\061\020\066\021\076\022" +
    "\073\044\074\047\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\052\026\313\030" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\316\007\102\010\070\017\061\020\066\021\076\022" +
    "\073\044\074\047\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\052\026\325\030\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\005" +
    "\330\007\102\010\070\017\061\020\066\021\076\022\073" +
    "\044\074\047\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\025\052\026\337\030\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\005\342" +
    "\007\102\010\070\017\061\020\066\021\076\022\073\044" +
    "\074\047\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\052\026\351\030\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\354\007" +
    "\102\010\070\017\061\020\066\021\076\022\073\044\074" +
    "\047\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\237\014\130\015" +
    "\133\040\364\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\375\001\001\000\002\001\001\000\004\004\377\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserTL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserTL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserTL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        report_error("Error de sintaxis en linea: " + (s.left) + " , columna: " + (s.right + 1) + ", simbolo: " + s.value, null);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("", null);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserTL$actions {
  private final ParserTL parser;

  /** Constructor */
  CUP$ParserTL$actions(ParserTL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action_part00000000(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserTL$result;

      /* select the action based on the action number */
      switch (CUP$ParserTL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaraciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		RESULT = start_val;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserTL$parser.done_parsing();
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaraciones ::= dec_using dec_namespace 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= dec_using dec_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_using ::= USING IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de using---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_using ::= USING IDENTIFICADOR error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta ';'");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                    System.out.println("---Declaracion de namespace---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta '}' en namespace");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_namespace ::= NAMESPACE IDENTIFICADOR dec_clase LLAVE_DERECHA error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta '{' en namespace");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de clase---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta '}' en clase");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_clase ::= CLASS IDENTIFICADOR cuerpo_clase error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta '{' en clase");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_clase ::= metodos cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_clase ::= metodos 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo_clase ::= dec_constantes 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo_clase ::= dec_constantes cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodos ::= metodo_int 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodos ::= metodo_char 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodos ::= metodo_string 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodos ::= metodo_float 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // metodos ::= metodo_void 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // metodos ::= metodo_bool 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // metodo_int ::= mod_acceso INT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION ENTERA----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_int",24, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // metodo_string ::= mod_acceso STRING IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION STRING----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_string",26, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // metodo_float ::= mod_acceso FLOAT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION FLOAT----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_float",29, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // metodo_bool ::= mod_acceso BOOL IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION BOLEANO----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_bool",27, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // metodo_char ::= mod_acceso CHAR IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION CARACTER----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_char",25, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // metodo_void ::= mod_acceso VOID IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION VACIA----------------\n\n");;
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_void",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_metodo ::= INT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_metodo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_metodo ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_metodo ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_metodo ::= BOOL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_metodo ::= VOID 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros ::= 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametro ::= tipo_metodo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametro",22, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cuerpo ::= estructura_control cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo ::= dec_variables 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo ::= dec_variables cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo ::= impresion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo ::= impresion cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo ::= llamar_funcion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cuerpo ::= llamar_funcion cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec_constantes ::= mod_acceso CONST tipo_variable CONSTANTE ASIGNACION val PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("Declaracion de constante");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_constantes",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // mod_acceso ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // mod_acceso ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // mod_acceso ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // impresion ::= CWLINE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Impresion de consola con salto de linea---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("impresion",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // impresion ::= CWRITE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Impresion de consola sin salto de linea---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("impresion",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // imprimir ::= CADENA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // imprimir ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // imprimir ::= CADENA SUMA imprimir 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // imprimir ::= IDENTIFICADOR SUMA imprimir 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // lecturas ::= CRLINE PARENTESIS_IZQUIERDO PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("lecturas",36, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec_variables ::= tipo_variable IDENTIFICADOR ASIGNACION val PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("Declaracion de variable con asignacion");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dec_variables ::= tipo_variable IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("Declaracion de variable");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_variables ::= tipo_variable IDENTIFICADOR variables PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("Declaracion de multiples variables");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // dec_variables ::= tipo_variable IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("---Lectura de consola---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // dec_variables ::= tipo_variable IDENTIFICADOR error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta ';' en variable");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // dec_variables ::= tipo_variable IDENTIFICADOR variables error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta ';' en variable");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variables ::= COMA IDENTIFICADOR variables 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("variables",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variables ::= COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("variables",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_variable ::= INT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_variable ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_variable ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tipo_variable ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // tipo_variable ::= BOOL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // val ::= exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // val ::= CADENA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // val ::= CARACTER 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // val ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // val ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia_if ::= IF PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia if---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // sentencia_if ::= IF PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA ELSE LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia if con else---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_while ::= WHILE PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                    System.out.println("---Sentencia while---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_while",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia_for ::= FOR PARENTESIS_IZQUIERDO for_init PUNTO_COMA termino_logico PUNTO_COMA for_update PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.out.println("---Sentencia for---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_for",16, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // for_init ::= INT IDENTIFICADOR ASIGNACION NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_init",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // for_update ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_update",18, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // for_update ::= IDENTIFICADOR DECREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_update",18, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= exp_logica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // exp_aritmetica ::= termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // exp_aritmetica ::= exp_aritmetica SUMA termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // exp_aritmetica ::= exp_aritmetica RESTA termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // termino ::= termino MULTIPLICACION factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // termino ::= termino DIVISION factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // factor ::= NDECIMAL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // factor ::= PARENTESIS_IZQUIERDO exp_aritmetica PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // exp_logica ::= termino_logico Y_LOGICO termino_logico 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_logica",9, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // exp_logica ::= termino_logico O_LOGICO termino_logico 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_logica",9, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // termino_logico ::= exp_aritmetica IGUALDAD exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // termino_logico ::= exp_aritmetica DESIGUALDAD exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // termino_logico ::= exp_aritmetica MAYOR_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // termino_logico ::= exp_aritmetica MENOR_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // termino_logico ::= exp_aritmetica MENOR_O_IGUAL_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // termino_logico ::= exp_aritmetica MAYOR_O_IGUAL_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // llamar_funcion ::= IDENTIFICADOR PARENTESIS_IZQUIERDO pasar_parametros PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("---Se llama a funcion---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("llamar_funcion",37, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // llamar_funcion ::= IDENTIFICADOR ASIGNACION IDENTIFICADOR PARENTESIS_IZQUIERDO pasar_parametros PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("---Se llama a funcion y se asigna a variable---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("llamar_funcion",37, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // pasar_parametros ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",38, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // pasar_parametros ::= CONSTANTE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",38, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // pasar_parametros ::= IDENTIFICADOR COMA pasar_parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",38, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // pasar_parametros ::= CONSTANTE COMA pasar_parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("pasar_parametros",38, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserTL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
              return CUP$ParserTL$do_action_part00000000(
                               CUP$ParserTL$act_num,
                               CUP$ParserTL$parser,
                               CUP$ParserTL$stack,
                               CUP$ParserTL$top);
    }
}

}
