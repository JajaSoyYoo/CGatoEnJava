
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package act5;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserTL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserTL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserTL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserTL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\006\004\000\002\006" +
    "\004\000\002\002\005\000\002\002\005\000\002\003\007" +
    "\000\002\003\007\000\002\003\007\000\002\004\007\000" +
    "\002\004\007\000\002\004\006\000\002\027\004\000\002" +
    "\027\003\000\002\027\003\000\002\027\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\016\000" +
    "\002\034\016\000\002\037\016\000\002\035\016\000\002" +
    "\033\016\000\002\036\013\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\026\003\000\002\026\005\000" +
    "\002\030\004\000\002\005\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\004\000\002\005\003\000\002\005" +
    "\004\000\002\042\011\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\044\007\000\002\044\007\000" +
    "\002\045\003\000\002\045\003\000\002\045\005\000\002" +
    "\045\005\000\002\046\005\000\002\007\007\000\002\007" +
    "\005\000\002\007\006\000\002\007\007\000\002\007\005" +
    "\000\002\007\006\000\002\041\005\000\002\041\004\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\020\011\000\002\020\015\000\002\021\011\000\002" +
    "\022\015\000\002\023\006\000\002\024\004\000\002\024" +
    "\004\000\002\011\003\000\002\011\003\000\002\012\003" +
    "\000\002\012\005\000\002\012\005\000\002\014\003\000" +
    "\002\014\005\000\002\014\005\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\005\000\002\013" +
    "\005\000\002\013\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\004\005\006\001\002\000\004\002\361\001" +
    "\002\000\006\006\012\007\015\001\002\000\004\065\007" +
    "\001\002\000\006\003\010\034\011\001\002\000\006\006" +
    "\ufffd\007\ufffd\001\002\000\006\006\ufffe\007\ufffe\001\002" +
    "\000\004\065\351\001\002\000\004\002\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\065\016\001\002\000\012" +
    "\010\021\011\032\012\025\041\020\001\002\000\014\003" +
    "\ufff5\010\021\011\032\012\025\042\ufff5\001\002\000\010" +
    "\010\021\011\032\012\025\001\002\000\020\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\033\uffd6\001\002" +
    "\000\014\003\ufff0\010\ufff0\011\ufff0\012\ufff0\042\ufff0\001" +
    "\002\000\014\003\ufff1\010\ufff1\011\ufff1\012\ufff1\042\ufff1" +
    "\001\002\000\014\003\uffed\010\uffed\011\uffed\012\uffed\042" +
    "\uffed\001\002\000\020\014\uffd4\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\021\uffd4\033\uffd4\001\002\000\014\003\uffef\010" +
    "\uffef\011\uffef\012\uffef\042\uffef\001\002\000\014\003\ufff4" +
    "\010\021\011\032\012\025\042\ufff4\001\002\000\014\003" +
    "\uffee\010\uffee\011\uffee\012\uffee\042\uffee\001\002\000\014" +
    "\003\ufff2\010\ufff2\011\ufff2\012\ufff2\042\ufff2\001\002\000" +
    "\020\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\033\uffd5\001\002\000\004\003\343\001\002\000\020\014" +
    "\042\015\043\016\036\017\037\020\041\021\040\033\035" +
    "\001\002\000\014\015\064\016\072\017\077\020\073\021" +
    "\065\001\002\000\004\065\324\001\002\000\004\065\312" +
    "\001\002\000\004\065\300\001\002\000\004\065\266\001" +
    "\002\000\004\065\257\001\002\000\004\065\044\001\002" +
    "\000\004\037\045\001\002\000\016\014\050\015\046\016" +
    "\052\017\047\020\055\021\056\001\002\000\004\065\uffe6" +
    "\001\002\000\004\065\uffe2\001\002\000\004\065\uffe1\001" +
    "\002\000\006\036\255\040\uffe0\001\002\000\004\065\uffe4" +
    "\001\002\000\004\065\254\001\002\000\004\040\057\001" +
    "\002\000\004\065\uffe5\001\002\000\004\065\uffe3\001\002" +
    "\000\004\041\060\001\002\000\026\015\064\016\072\017" +
    "\077\020\073\021\065\024\070\026\100\027\066\073\102" +
    "\074\061\001\002\000\004\037\250\001\002\000\032\015" +
    "\064\016\072\017\077\020\073\021\065\024\070\026\100" +
    "\027\066\030\uffdc\042\uffdc\073\102\074\061\001\002\000" +
    "\004\030\243\001\002\000\006\065\uffc4\072\uffc4\001\002" +
    "\000\006\065\uffc2\072\uffc2\001\002\000\004\037\235\001" +
    "\002\000\032\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\024\uffba\026\uffba\027\uffba\030\uffba\042\uffba\073\uffba\074" +
    "\uffba\001\002\000\004\037\223\001\002\000\004\065\175" +
    "\001\002\000\006\065\uffc1\072\uffc1\001\002\000\006\065" +
    "\uffc3\072\uffc3\001\002\000\032\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\042" +
    "\uffb8\073\uffb8\074\uffb8\001\002\000\032\015\064\016\072" +
    "\017\077\020\073\021\065\024\070\026\100\027\066\030" +
    "\uffd9\042\uffd9\073\102\074\061\001\002\000\032\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\024\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\042\uffb9\073\uffb9\074\uffb9\001\002\000\006" +
    "\065\uffc0\072\uffc0\001\002\000\004\037\116\001\002\000" +
    "\032\015\064\016\072\017\077\020\073\021\065\024\070" +
    "\026\100\027\066\030\uffdb\042\uffdb\073\102\074\061\001" +
    "\002\000\004\037\103\001\002\000\006\065\104\070\106" +
    "\001\002\000\006\040\uffd0\045\113\001\002\000\004\040" +
    "\111\001\002\000\006\040\uffd1\045\107\001\002\000\006" +
    "\065\104\070\106\001\002\000\004\040\uffcf\001\002\000" +
    "\004\034\112\001\002\000\032\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\024\uffd2\026\uffd2\027\uffd2\030\uffd2\042" +
    "\uffd2\073\uffd2\074\uffd2\001\002\000\006\065\104\070\106" +
    "\001\002\000\004\040\uffce\001\002\000\006\030\uffda\042" +
    "\uffda\001\002\000\004\015\120\001\002\000\004\034\124" +
    "\001\002\000\004\065\121\001\002\000\004\051\122\001" +
    "\002\000\004\067\123\001\002\000\004\034\uffb3\001\002" +
    "\000\012\037\132\065\130\066\126\067\125\001\002\000" +
    "\032\034\uffa7\040\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\001" +
    "\002\000\032\034\uffa6\040\uffa6\045\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057" +
    "\uffa6\001\002\000\032\034\uffab\040\uffab\045\uffab\046\uffab" +
    "\047\uffab\050\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\057\uffab\001\002\000\032\034\uffa8\040\uffa8\045\uffa8" +
    "\046\uffa8\047\uffa8\050\uffa8\052\uffa8\053\uffa8\054\uffa8\055" +
    "\uffa8\056\uffa8\057\uffa8\001\002\000\004\034\163\001\002" +
    "\000\012\037\132\065\130\066\126\067\125\001\002\000" +
    "\022\045\146\046\141\052\150\053\142\054\144\055\143" +
    "\056\147\057\145\001\002\000\032\034\uffae\040\uffae\045" +
    "\uffae\046\uffae\047\135\050\136\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\056\uffae\057\uffae\001\002\000\012\037\132\065" +
    "\130\066\126\067\125\001\002\000\012\037\132\065\130" +
    "\066\126\067\125\001\002\000\032\034\uffa9\040\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\001\002\000\032\034\uffaa\040" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\055\uffaa\056\uffaa\057\uffaa\001\002\000\012\037" +
    "\132\065\130\066\126\067\125\001\002\000\012\037\132" +
    "\065\130\066\126\067\125\001\002\000\012\037\132\065" +
    "\130\066\126\067\125\001\002\000\012\037\132\065\130" +
    "\066\126\067\125\001\002\000\012\037\132\065\130\066" +
    "\126\067\125\001\002\000\012\037\132\065\130\066\126" +
    "\067\125\001\002\000\012\037\132\065\130\066\126\067" +
    "\125\001\002\000\012\037\132\065\130\066\126\067\125" +
    "\001\002\000\012\034\uffa2\040\uffa2\045\146\046\141\001" +
    "\002\000\012\034\uff9e\040\uff9e\045\146\046\141\001\002" +
    "\000\032\034\uffad\040\uffad\045\uffad\046\uffad\047\135\050" +
    "\136\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057\uffad" +
    "\001\002\000\012\034\uff9d\040\uff9d\045\146\046\141\001" +
    "\002\000\012\034\uff9f\040\uff9f\045\146\046\141\001\002" +
    "\000\012\034\uffa0\040\uffa0\045\146\046\141\001\002\000" +
    "\012\034\uffa1\040\uffa1\045\146\046\141\001\002\000\032" +
    "\034\uffac\040\uffac\045\uffac\046\uffac\047\135\050\136\052" +
    "\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057\uffac\001\002" +
    "\000\010\040\162\045\146\046\141\001\002\000\032\034" +
    "\uffa5\040\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\001\002\000" +
    "\004\065\165\001\002\000\004\040\170\001\002\000\006" +
    "\062\167\064\166\001\002\000\004\040\uffb1\001\002\000" +
    "\004\040\uffb2\001\002\000\004\041\171\001\002\000\026" +
    "\015\064\016\072\017\077\020\073\021\065\024\070\026" +
    "\100\027\066\073\102\074\061\001\002\000\004\042\173" +
    "\001\002\000\032\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021" +
    "\uffb4\024\uffb4\026\uffb4\027\uffb4\030\uffb4\042\uffb4\073\uffb4" +
    "\074\uffb4\001\002\000\006\030\uffd8\042\uffd8\001\002\000" +
    "\012\003\200\034\201\036\176\051\177\001\002\000\004" +
    "\065\221\001\002\000\024\022\211\023\212\037\132\065" +
    "\130\066\126\067\125\070\205\071\213\075\207\001\002" +
    "\000\032\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\024" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\042\uffc8\073\uffc8\074\uffc8" +
    "\001\002\000\032\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\024\uffcb\026\uffcb\027\uffcb\030\uffcb\042\uffcb\073\uffcb" +
    "\074\uffcb\001\002\000\006\003\203\034\204\001\002\000" +
    "\032\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\024\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\042\uffc7\073\uffc7\074\uffc7\001" +
    "\002\000\032\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca" +
    "\024\uffca\026\uffca\027\uffca\030\uffca\042\uffca\073\uffca\074" +
    "\uffca\001\002\000\004\034\uffbe\001\002\000\004\034\220" +
    "\001\002\000\004\037\216\001\002\000\004\034\215\001" +
    "\002\000\004\034\uffbc\001\002\000\004\034\uffbb\001\002" +
    "\000\004\034\uffbd\001\002\000\010\034\uffbf\045\146\046" +
    "\141\001\002\000\032\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc\042\uffcc\073" +
    "\uffcc\074\uffcc\001\002\000\004\040\217\001\002\000\004" +
    "\034\uffcd\001\002\000\032\015\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\024\uffc9\026\uffc9\027\uffc9\030\uffc9\042\uffc9" +
    "\073\uffc9\074\uffc9\001\002\000\010\003\uffc5\034\uffc5\036" +
    "\176\001\002\000\006\003\uffc6\034\uffc6\001\002\000\012" +
    "\037\132\065\130\066\126\067\125\001\002\000\004\040" +
    "\225\001\002\000\004\041\226\001\002\000\026\015\064" +
    "\016\072\017\077\020\073\021\065\024\070\026\100\027" +
    "\066\073\102\074\061\001\002\000\004\042\230\001\002" +
    "\000\034\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\024" +
    "\uffb7\025\231\026\uffb7\027\uffb7\030\uffb7\042\uffb7\073\uffb7" +
    "\074\uffb7\001\002\000\004\041\232\001\002\000\026\015" +
    "\064\016\072\017\077\020\073\021\065\024\070\026\100" +
    "\027\066\073\102\074\061\001\002\000\004\042\234\001" +
    "\002\000\032\015\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6" +
    "\024\uffb6\026\uffb6\027\uffb6\030\uffb6\042\uffb6\073\uffb6\074" +
    "\uffb6\001\002\000\012\037\132\065\130\066\126\067\125" +
    "\001\002\000\004\040\237\001\002\000\004\041\240\001" +
    "\002\000\026\015\064\016\072\017\077\020\073\021\065" +
    "\024\070\026\100\027\066\073\102\074\061\001\002\000" +
    "\004\042\242\001\002\000\032\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\021\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\042" +
    "\uffb5\073\uffb5\074\uffb5\001\002\000\004\065\244\001\002" +
    "\000\004\034\245\001\002\000\004\042\246\001\002\000" +
    "\014\003\uffec\010\uffec\011\uffec\012\uffec\042\uffec\001\002" +
    "\000\006\030\uffdd\042\uffdd\001\002\000\006\065\104\070" +
    "\106\001\002\000\004\040\252\001\002\000\004\034\253" +
    "\001\002\000\032\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3\042\uffd3\073\uffd3" +
    "\074\uffd3\001\002\000\006\036\uffde\040\uffde\001\002\000" +
    "\016\014\050\015\046\016\052\017\047\020\055\021\056" +
    "\001\002\000\004\040\uffdf\001\002\000\004\037\260\001" +
    "\002\000\016\014\050\015\046\016\052\017\047\020\055" +
    "\021\056\001\002\000\004\040\262\001\002\000\004\041" +
    "\263\001\002\000\026\015\064\016\072\017\077\020\073" +
    "\021\065\024\070\026\100\027\066\073\102\074\061\001" +
    "\002\000\004\042\265\001\002\000\014\003\uffe7\010\uffe7" +
    "\011\uffe7\012\uffe7\042\uffe7\001\002\000\004\037\267\001" +
    "\002\000\016\014\050\015\046\016\052\017\047\020\055" +
    "\021\056\001\002\000\004\040\271\001\002\000\004\041" +
    "\272\001\002\000\026\015\064\016\072\017\077\020\073" +
    "\021\065\024\070\026\100\027\066\073\102\074\061\001" +
    "\002\000\004\030\274\001\002\000\004\065\275\001\002" +
    "\000\004\034\276\001\002\000\004\042\277\001\002\000" +
    "\014\003\uffea\010\uffea\011\uffea\012\uffea\042\uffea\001\002" +
    "\000\004\037\301\001\002\000\016\014\050\015\046\016" +
    "\052\017\047\020\055\021\056\001\002\000\004\040\303" +
    "\001\002\000\004\041\304\001\002\000\026\015\064\016" +
    "\072\017\077\020\073\021\065\024\070\026\100\027\066" +
    "\073\102\074\061\001\002\000\004\030\306\001\002\000" +
    "\004\065\307\001\002\000\004\034\310\001\002\000\004" +
    "\042\311\001\002\000\014\003\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\042\uffe8\001\002\000\004\037\313\001\002\000\016" +
    "\014\050\015\046\016\052\017\047\020\055\021\056\001" +
    "\002\000\004\040\315\001\002\000\004\041\316\001\002" +
    "\000\026\015\064\016\072\017\077\020\073\021\065\024" +
    "\070\026\100\027\066\073\102\074\061\001\002\000\004" +
    "\030\320\001\002\000\004\065\321\001\002\000\004\034" +
    "\322\001\002\000\004\042\323\001\002\000\014\003\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\042\uffe9\001\002\000\004\037" +
    "\325\001\002\000\016\014\050\015\046\016\052\017\047" +
    "\020\055\021\056\001\002\000\004\040\327\001\002\000" +
    "\004\041\330\001\002\000\026\015\064\016\072\017\077" +
    "\020\073\021\065\024\070\026\100\027\066\073\102\074" +
    "\061\001\002\000\004\030\332\001\002\000\004\065\333" +
    "\001\002\000\004\034\334\001\002\000\004\042\335\001" +
    "\002\000\014\003\uffeb\010\uffeb\011\uffeb\012\uffeb\042\uffeb" +
    "\001\002\000\004\072\337\001\002\000\004\051\340\001" +
    "\002\000\022\022\211\023\212\037\132\065\130\066\126" +
    "\067\125\070\205\071\213\001\002\000\004\034\342\001" +
    "\002\000\014\003\uffd7\010\uffd7\011\uffd7\012\uffd7\042\uffd7" +
    "\001\002\000\010\002\ufff7\003\ufff7\042\ufff7\001\002\000" +
    "\006\003\ufff3\042\ufff3\001\002\000\006\003\346\042\347" +
    "\001\002\000\010\002\ufff8\003\ufff8\042\ufff8\001\002\000" +
    "\010\002\ufff9\003\ufff9\042\ufff9\001\002\000\006\003\ufff6" +
    "\042\ufff6\001\002\000\006\007\015\041\353\001\002\000" +
    "\004\042\357\001\002\000\004\007\015\001\002\000\006" +
    "\003\355\042\356\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\ufffc\001\002\000\004\003\360\001\002\000\004" +
    "\002\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\006\002\004\006\003\001\001\000\002\001" +
    "\001\000\006\003\013\004\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\027\032\031\016\032\030\033\022\034" +
    "\021\035\023\036\027\037\025\042\026\043\033\001\001" +
    "\000\026\027\347\031\016\032\030\033\022\034\021\035" +
    "\023\036\027\037\025\042\026\043\033\001\001\000\026" +
    "\027\344\031\016\032\030\033\022\034\021\035\023\036" +
    "\027\037\025\042\026\043\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\027\343\031\016" +
    "\032\030\033\022\034\021\035\023\036\027\037\025\042" +
    "\026\043\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\025\052\026\053" +
    "\030\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\005\062\007\100\010\070" +
    "\017\061\020\066\021\075\022\073\044\074\001\001\000" +
    "\002\001\001\000\022\005\246\007\100\010\070\017\061" +
    "\020\066\021\075\022\073\044\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\173\007\100\010\070\017\061\020\066\021\075\022" +
    "\073\044\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\114\007\100\010\070\017" +
    "\061\020\066\021\075\022\073\044\074\001\001\000\002" +
    "\001\001\000\004\045\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\012\132\014\133\015\126\016\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\160\014\133\015" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\137\001\001\000\004\015\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\157\015\126\001\001" +
    "\000\010\012\156\014\133\015\126\001\001\000\010\012" +
    "\155\014\133\015\126\001\001\000\010\012\154\014\133" +
    "\015\126\001\001\000\010\012\153\014\133\015\126\001" +
    "\001\000\006\014\152\015\126\001\001\000\010\012\151" +
    "\014\133\015\126\001\001\000\010\012\150\014\133\015" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\171\007\100\010\070\017" +
    "\061\020\066\021\075\022\073\044\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\201\001\001\000\002\001\001\000\014\012\213\014\133" +
    "\015\126\040\207\046\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\221\001\001\000\002\001\001\000\012\012\132\014" +
    "\133\015\126\016\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\005\226\007\100\010\070\017\061\020" +
    "\066\021\075\022\073\044\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\232\007" +
    "\100\010\070\017\061\020\066\021\075\022\073\044\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\132\014\133\015\126\016\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\240\007\100\010\070\017" +
    "\061\020\066\021\075\022\073\044\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\250\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\052" +
    "\026\255\030\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\052\026\260\030\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\005\263\007\100\010" +
    "\070\017\061\020\066\021\075\022\073\044\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\052\026\267\030\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\005\272\007\100\010\070\017" +
    "\061\020\066\021\075\022\073\044\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\025\052" +
    "\026\301\030\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\005\304\007\100\010\070\017\061\020\066" +
    "\021\075\022\073\044\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\052\026\313\030" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\005\316\007\100\010\070\017\061\020\066\021\075\022" +
    "\073\044\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\052\026\325\030\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\005\330\007" +
    "\100\010\070\017\061\020\066\021\075\022\073\044\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\213\014\133\015\126\040" +
    "\340\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\351" +
    "\001\001\000\002\001\001\000\004\004\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserTL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserTL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserTL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        report_error("Error de sintaxis en linea: " + (s.left) + " , columna: " + (s.right + 1) + ", simbolo: " + s.value, null);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("", null);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserTL$actions {
  private final ParserTL parser;

  /** Constructor */
  CUP$ParserTL$actions(ParserTL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action_part00000000(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserTL$result;

      /* select the action based on the action number */
      switch (CUP$ParserTL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaraciones EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		RESULT = start_val;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserTL$parser.done_parsing();
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaraciones ::= dec_using dec_namespace 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= dec_using dec_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec_using ::= USING IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de using---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec_using ::= USING IDENTIFICADOR error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta ';'");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                    System.out.println("---Declaracion de namespace---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA dec_clase error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta '}' en namespace");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_namespace ::= NAMESPACE IDENTIFICADOR dec_clase LLAVE_DERECHA error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta '{' en namespace");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Declaracion de clase---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA cuerpo_clase error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta '}' en clase");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_clase ::= CLASS IDENTIFICADOR cuerpo_clase error 
            {
              Object RESULT =null;
		
                System.err.println("  Error: Falta '{' en clase");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cuerpo_clase ::= metodos cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cuerpo_clase ::= metodos 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cuerpo_clase ::= dec_constantes 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cuerpo_clase ::= dec_constantes cuerpo_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo_clase",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // metodos ::= metodo_int 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // metodos ::= metodo_char 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // metodos ::= metodo_string 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // metodos ::= metodo_float 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // metodos ::= metodo_void 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // metodos ::= metodo_bool 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodos",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // metodo_int ::= mod_acceso INT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION ENTERA----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_int",24, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // metodo_string ::= mod_acceso STRING IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION STRING----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_string",26, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // metodo_float ::= mod_acceso FLOAT IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION FLOAT----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_float",29, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // metodo_bool ::= mod_acceso BOOL IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION BOLEANO----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_bool",27, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // metodo_char ::= mod_acceso CHAR IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo RETURN IDENTIFICADOR PUNTO_COMA LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION CARACTER----------------\n\n");
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_char",25, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-11)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // metodo_void ::= mod_acceso VOID IDENTIFICADOR PARENTESIS_IZQUIERDO parametros PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
            System.out.println("\n\n------------------DECLARACION DE FUNCION VACIA----------------\n\n");;
        
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("metodo_void",28, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-8)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_metodo ::= INT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_metodo ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_metodo ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo_metodo ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo_metodo ::= BOOL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipo_metodo ::= VOID 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_metodo",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parametros ::= parametro COMA parametros 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametros",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametro ::= tipo_metodo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("parametro",22, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo ::= estructura_control cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // cuerpo ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cuerpo ::= dec_variables 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cuerpo ::= dec_variables cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo ::= impresion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo ::= impresion cuerpo 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec_constantes ::= mod_acceso CONST tipo_variable CONSTANTE ASIGNACION val PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("Declaracion de constante");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_constantes",32, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mod_acceso ::= PUBLIC 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mod_acceso ::= PRIVATE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // mod_acceso ::= PROTECTED 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("mod_acceso",33, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // impresion ::= CWLINE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Impresion de consola con salto de linea---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("impresion",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // impresion ::= CWRITE PARENTESIS_IZQUIERDO imprimir PARENTESIS_DERECHO PUNTO_COMA 
            {
              Object RESULT =null;
		
                System.out.println("---Impresion de consola sin salto de linea---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("impresion",34, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // imprimir ::= CADENA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // imprimir ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // imprimir ::= CADENA SUMA imprimir 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // imprimir ::= IDENTIFICADOR SUMA imprimir 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("imprimir",35, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // lecturas ::= CRLINE PARENTESIS_IZQUIERDO PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("lecturas",36, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec_variables ::= tipo_variable IDENTIFICADOR ASIGNACION val PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("Declaracion de variable con asignacion");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dec_variables ::= tipo_variable IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("Declaracion de variable");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // dec_variables ::= tipo_variable IDENTIFICADOR variables PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("Declaracion de multiples variables");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // dec_variables ::= tipo_variable IDENTIFICADOR ASIGNACION lecturas PUNTO_COMA 
            {
              Object RESULT =null;
		
                    System.out.println("---Lectura de consola con variable---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // dec_variables ::= tipo_variable IDENTIFICADOR error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta ';' en variable");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // dec_variables ::= tipo_variable IDENTIFICADOR variables error 
            {
              Object RESULT =null;
		
                    System.err.println("  Error: Falta ';' en variable");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variables",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variables ::= COMA IDENTIFICADOR variables 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("variables",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variables ::= COMA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("variables",31, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo_variable ::= INT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo_variable ::= FLOAT 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo_variable ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_variable ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_variable ::= BOOL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_variable",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // val ::= exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // val ::= CADENA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // val ::= CARACTER 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // val ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // val ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("val",30, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencia_if ::= IF PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia if---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // sentencia_if ::= IF PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA ELSE LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                System.out.println("---Sentencia if con else---");
            
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentencia_while ::= WHILE PARENTESIS_IZQUIERDO termino_logico PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
                    System.out.println("---Sentencia while---");
                
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_while",15, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // sentencia_for ::= FOR PARENTESIS_IZQUIERDO for_init PUNTO_COMA termino_logico PUNTO_COMA for_update PARENTESIS_DERECHO LLAVE_IZQUIERDA cuerpo LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.out.println("---Sentencia for---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_for",16, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // for_init ::= INT IDENTIFICADOR ASIGNACION NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_init",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // for_update ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_update",18, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // for_update ::= IDENTIFICADOR DECREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("for_update",18, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= exp_logica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // exp_aritmetica ::= termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // exp_aritmetica ::= exp_aritmetica SUMA termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // exp_aritmetica ::= exp_aritmetica RESTA termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_aritmetica",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino ::= termino MULTIPLICACION factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // termino ::= termino DIVISION factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= NDECIMAL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= PARENTESIS_IZQUIERDO exp_aritmetica PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // exp_logica ::= termino_logico Y_LOGICO termino_logico 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_logica",9, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // exp_logica ::= termino_logico O_LOGICO termino_logico 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("exp_logica",9, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // termino_logico ::= exp_aritmetica IGUALDAD exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // termino_logico ::= exp_aritmetica DESIGUALDAD exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // termino_logico ::= exp_aritmetica MAYOR_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // termino_logico ::= exp_aritmetica MENOR_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // termino_logico ::= exp_aritmetica MENOR_O_IGUAL_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // termino_logico ::= exp_aritmetica MAYOR_O_IGUAL_QUE exp_aritmetica 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino_logico",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserTL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
              return CUP$ParserTL$do_action_part00000000(
                               CUP$ParserTL$act_num,
                               CUP$ParserTL$parser,
                               CUP$ParserTL$stack,
                               CUP$ParserTL$top);
    }
}

}
