// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/lexico/lexico_csharp.flex


/* Isaac Aaron Tovar Zavaleta - C# */

package lexico;

import java_cup.runtime.*;
/* Aqu√≠ el resto de importaciones */


@SuppressWarnings("fallthrough")
public class ScannerCS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\4\1\123\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\0\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\12\0\1\1\u01a2\0"+
    "\2\1\326\0\u0100\1";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\23\1\1\0\1\2\7\0\1\3\11\0\1\4"+
    "\1\0\1\5\1\6\57\0\1\7\2\0\1\10\2\0"+
    "\1\11\3\0\1\12\5\0\1\13\12\0\1\14\12\0"+
    "\1\15\1\0\1\16\1\0\1\17\10\0\1\20\1\21"+
    "\7\0\1\22\2\0\1\23\1\24\1\25\20\0\1\26"+
    "\2\0\1\27\4\0\1\30\3\0\1\31\1\32\1\33"+
    "\1\34\6\0\1\35\3\0\1\36\1\37\13\0\1\40"+
    "\1\0\1\41\5\0\1\42\1\0\1\43\1\0\1\44"+
    "\2\0\1\45\5\0\1\46\2\0\1\47\4\0\1\50"+
    "\2\0\1\51\1\0\1\52\1\0\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\4\0\1\64"+
    "\1\65\1\0\1\66\1\0\1\67\1\70\4\0\1\71"+
    "\1\0\1\72\1\0\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\u017a\0\u0195"+
    "\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\33\0\u0237\0\u0252"+
    "\0\u026d\0\u0288\0\u02a3\0\u02be\0\u02d9\0\u02f4\0\u030f\0\u032a"+
    "\0\u0345\0\u0360\0\u037b\0\u0396\0\u03b1\0\u03cc\0\u03e7\0\33"+
    "\0\u0402\0\u041d\0\33\0\u0438\0\u0453\0\u046e\0\u0489\0\u04a4"+
    "\0\u04bf\0\u04da\0\u04f5\0\u0510\0\u052b\0\u0546\0\u0561\0\u057c"+
    "\0\u0597\0\u05b2\0\u05cd\0\u05e8\0\u0603\0\u061e\0\u0639\0\u0654"+
    "\0\u066f\0\u068a\0\u06a5\0\u06c0\0\u06db\0\u06f6\0\u0711\0\u072c"+
    "\0\u0747\0\u0762\0\u077d\0\u0798\0\u07b3\0\u07ce\0\u07e9\0\u0804"+
    "\0\u081f\0\u083a\0\u0855\0\u0870\0\u088b\0\u08a6\0\u08c1\0\u08dc"+
    "\0\u08f7\0\u0912\0\u092d\0\u0948\0\u0963\0\u097e\0\u0999\0\u09b4"+
    "\0\33\0\u09cf\0\u09ea\0\u0a05\0\33\0\u0a20\0\u0a3b\0\u0a56"+
    "\0\u0a71\0\u0a8c\0\33\0\u0aa7\0\u0ac2\0\u0add\0\u0af8\0\u0b13"+
    "\0\u0b2e\0\u0b49\0\u0b64\0\u0b7f\0\u0b9a\0\33\0\u0bb5\0\u0bd0"+
    "\0\u0beb\0\u0c06\0\u0c21\0\u0c3c\0\u0c57\0\u0c72\0\u0c8d\0\u0ca8"+
    "\0\33\0\u0cc3\0\33\0\u0cde\0\33\0\u0cf9\0\u0d14\0\u0d2f"+
    "\0\u0d4a\0\u0d65\0\u0d80\0\u0d9b\0\u0db6\0\33\0\33\0\u0dd1"+
    "\0\u0dec\0\u0e07\0\u0e22\0\u0e3d\0\u0e58\0\u0e73\0\33\0\u0e8e"+
    "\0\u0ea9\0\33\0\33\0\33\0\u0ec4\0\u0edf\0\u0efa\0\u0f15"+
    "\0\u0f30\0\u0f4b\0\u0f66\0\u0f81\0\u0f9c\0\u0fb7\0\u0fd2\0\u0fed"+
    "\0\u1008\0\u1023\0\u103e\0\u1059\0\33\0\u1074\0\u108f\0\33"+
    "\0\u10aa\0\u10c5\0\u10e0\0\u10fb\0\33\0\u1116\0\u1131\0\u114c"+
    "\0\33\0\33\0\33\0\33\0\u1167\0\u1182\0\u119d\0\u11b8"+
    "\0\u11d3\0\u11ee\0\33\0\u1209\0\u1224\0\u123f\0\33\0\33"+
    "\0\u125a\0\u1275\0\u1290\0\u12ab\0\u12c6\0\u12e1\0\u12fc\0\u1317"+
    "\0\u1332\0\u134d\0\u1368\0\33\0\u1383\0\33\0\u139e\0\u13b9"+
    "\0\u13d4\0\u13ef\0\u140a\0\33\0\u1425\0\33\0\u1440\0\33"+
    "\0\u145b\0\u1476\0\33\0\u1491\0\u14ac\0\u14c7\0\u14e2\0\u14fd"+
    "\0\33\0\u1518\0\u1533\0\33\0\u154e\0\u1569\0\u1584\0\u159f"+
    "\0\33\0\u15ba\0\u15d5\0\33\0\u15f0\0\33\0\u160b\0\33"+
    "\0\33\0\33\0\33\0\33\0\33\0\33\0\33\0\33"+
    "\0\u1626\0\u1641\0\u165c\0\u1677\0\33\0\33\0\u1692\0\33"+
    "\0\u16ad\0\33\0\33\0\u16c8\0\u16e3\0\u16fe\0\u1719\0\33"+
    "\0\u1734\0\33\0\u174f\0\33\0\33\0\33\0\33\0\33"+
    "\0\33\0\33\0\33\0\33\0\33";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\0\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\2\2\1\13\1\2\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\3\2"+
    "\36\0\1\25\17\0\1\26\27\0\1\27\1\0\1\30"+
    "\12\0\1\31\6\0\1\32\3\0\1\33\2\0\1\34"+
    "\20\0\1\35\11\0\1\36\10\0\1\37\16\0\1\40"+
    "\1\0\1\41\6\0\1\42\1\0\1\43\14\0\1\44"+
    "\2\0\1\45\2\0\1\46\32\0\1\47\21\0\1\50"+
    "\6\0\1\51\1\52\3\0\1\53\27\0\1\54\20\0"+
    "\1\55\16\0\1\56\10\0\1\57\15\0\1\60\3\0"+
    "\1\61\1\62\6\0\1\63\17\0\1\64\2\0\1\65"+
    "\13\0\1\66\27\0\1\67\2\0\1\70\2\0\1\71"+
    "\1\72\11\0\1\73\2\0\1\74\14\0\1\75\10\0"+
    "\1\76\6\0\1\77\13\0\1\100\2\0\1\101\5\0"+
    "\1\102\21\0\1\103\5\0\1\104\23\0\1\105\44\0"+
    "\1\106\27\0\1\107\20\0\1\110\47\0\1\111\1\112"+
    "\10\0\1\113\32\0\1\114\47\0\1\115\17\0\1\116"+
    "\2\0\1\117\5\0\1\120\42\0\1\121\24\0\1\122"+
    "\36\0\1\123\34\0\1\124\13\0\1\125\45\0\1\126"+
    "\2\0\1\127\25\0\1\130\10\0\1\131\22\0\1\132"+
    "\34\0\1\133\34\0\1\134\27\0\1\135\35\0\1\136"+
    "\12\0\1\137\12\0\1\140\42\0\1\141\20\0\1\142"+
    "\30\0\1\143\25\0\1\144\50\0\1\145\14\0\1\146"+
    "\46\0\1\147\22\0\1\150\23\0\1\151\31\0\1\152"+
    "\4\0\1\153\14\0\1\154\37\0\1\155\3\0\1\156"+
    "\50\0\1\157\44\0\1\160\2\0\1\161\17\0\1\162"+
    "\22\0\1\163\32\0\1\164\7\0\1\165\41\0\1\166"+
    "\22\0\1\167\30\0\1\170\33\0\1\171\23\0\1\172"+
    "\1\173\42\0\1\174\22\0\1\175\2\0\1\176\27\0"+
    "\1\177\44\0\1\200\23\0\1\201\17\0\1\202\36\0"+
    "\1\203\30\0\1\204\50\0\1\205\33\0\1\206\32\0"+
    "\1\207\1\210\20\0\1\211\22\0\1\212\36\0\1\213"+
    "\27\0\1\214\31\0\1\215\36\0\1\216\42\0\1\217"+
    "\33\0\1\220\30\0\1\221\23\0\1\222\26\0\1\223"+
    "\36\0\1\224\26\0\1\225\36\0\1\226\44\0\1\227"+
    "\27\0\1\230\23\0\1\231\40\0\1\232\26\0\1\233"+
    "\37\0\1\234\23\0\1\235\46\0\1\236\32\0\1\237"+
    "\12\0\1\240\56\0\1\241\21\0\1\242\22\0\1\243"+
    "\52\0\1\244\31\0\1\245\23\0\1\246\37\0\1\247"+
    "\16\0\1\250\50\0\1\251\20\0\1\252\12\0\1\253"+
    "\31\0\1\254\31\0\1\255\27\0\1\256\20\0\1\257"+
    "\50\0\1\260\25\0\1\261\33\0\1\262\31\0\1\263"+
    "\37\0\1\264\13\0\1\265\27\0\1\266\45\0\1\267"+
    "\37\0\1\270\24\0\1\271\27\0\1\272\44\0\1\273"+
    "\33\0\1\274\20\0\1\275\36\0\1\276\41\0\1\277"+
    "\15\0\1\300\37\0\1\301\33\0\1\302\40\0\1\303"+
    "\20\0\1\304\42\0\1\305\25\0\1\306\22\0\1\307"+
    "\51\0\1\310\10\0\1\311\42\0\1\312\42\0\1\313"+
    "\14\0\1\314\30\0\1\315\52\0\1\316\26\0\1\317"+
    "\16\0\1\320\42\0\1\321\40\0\1\322\34\0\1\323"+
    "\16\0\1\324\32\0\1\325\50\0\1\326\26\0\1\327"+
    "\24\0\1\330\37\0\1\331\17\0\1\332\32\0\1\333"+
    "\55\0\1\334\23\0\1\335\22\0\1\336\44\0\1\337"+
    "\20\0\1\340\47\0\1\341\31\0\1\342\14\0\1\343"+
    "\26\0\1\344\47\0\1\345\15\0\1\346\45\0\1\347"+
    "\17\0\1\350\36\0\1\351\36\0\1\352\24\0\1\353"+
    "\45\0\1\354\30\0\1\355\21\0\1\356\32\0\1\357"+
    "\45\0\1\360\37\0\1\361\32\0\1\362\20\0\1\363"+
    "\43\0\1\364\33\0\1\365\12\0\1\366\45\0\1\367"+
    "\32\0\1\370\20\0\1\371\34\0\1\372\27\0\1\373"+
    "\36\0\1\374\46\0\1\375\17\0\1\376\30\0\1\377"+
    "\47\0\1\u0100\10\0\1\u0101\42\0\1\u0102\24\0\1\u0103"+
    "\53\0\1\u0104\22\0\1\u0105\41\0\1\u0106\32\0\1\u0107"+
    "\12\0\1\u0108\40\0\1\u0109\51\0\1\u010a\12\0\1\u010b"+
    "\33\0\1\u010c\22\0\1\u010d\50\0\1\u010e\17\0\1\u010f"+
    "\33\0\1\u0110\41\0\1\u0111\32\0\1\u0112\32\0\1\u0113"+
    "\41\0\1\u0114\14\0\1\u0115\32\0\1\u0116\50\0\1\u0117"+
    "\32\0\1\u0118\23\0\1\u0119\37\0\1\u011a\16\0\1\u011b"+
    "\55\0\1\u011c\7\0\1\u011d\24\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5994];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\22\1\1\0\1\11\7\0\1\1\11\0"+
    "\1\11\1\0\1\1\1\11\57\0\1\1\2\0\1\1"+
    "\2\0\1\11\3\0\1\11\5\0\1\11\12\0\1\11"+
    "\12\0\1\11\1\0\1\11\1\0\1\11\10\0\2\11"+
    "\7\0\1\11\2\0\3\11\20\0\1\11\2\0\1\11"+
    "\4\0\1\11\3\0\4\11\6\0\1\11\3\0\2\11"+
    "\13\0\1\11\1\0\1\11\5\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\1\11\5\0\1\11\2\0\1\11"+
    "\4\0\1\11\2\0\1\11\1\0\1\11\1\0\11\11"+
    "\4\0\2\11\1\0\1\11\1\0\2\11\4\0\1\11"+
    "\1\0\1\11\1\0\12\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  StringBuilder string = new StringBuilder();
  
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerCS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("ERROR Esto no es un token del lenguaje"+yytext());
            }
          // fall through
          case 69: break;
          case 2:
            { System.out.println("Es una palabra clave de conversi√≥n"); return symbol(sym.AS, yytext());
            }
          // fall through
          case 70: break;
          case 3:
            { System.out.println("Es una instrucci√≥n de bucle do-while"); return symbol(sym.DO, yytext());
            }
          // fall through
          case 71: break;
          case 4:
            { System.out.println("Es una estructura de control de flujo"); return symbol(sym.IF, yytext());
            }
          // fall through
          case 72: break;
          case 5:
            { System.out.println("Es una palabra clave utilizada en expresiones de consulta LINQ"); return symbol(sym.IN, yytext());
            }
          // fall through
          case 73: break;
          case 6:
            { System.out.println("Es una palabra clave para verificar el tipo"); return symbol(sym.IS, yytext());
            }
          // fall through
          case 74: break;
          case 7:
            { System.out.println("Es una instrucci√≥n de bucle for"); return symbol(sym.FOR, yytext());
            }
          // fall through
          case 75: break;
          case 8:
            { System.out.println("Es un tipo de dato entero"); return symbol(sym.INT, yytext());
            }
          // fall through
          case 76: break;
          case 9:
            { System.out.println("Es una palabra clave para crear nuevas instancias"); return symbol(sym.NEW, yytext());
            }
          // fall through
          case 77: break;
          case 10:
            { System.out.println("Es una palabra clave para redireccionar la salida"); return symbol(sym.OUT, yytext());
            }
          // fall through
          case 78: break;
          case 11:
            { System.out.println("Es una palabra clave para pasar par√°metros por referencia"); return symbol(sym.REF, yytext());
            }
          // fall through
          case 79: break;
          case 12:
            { System.out.println("Es una cl√°usula para intentar ejecutar c√≥digo con manejo de excepciones"); return symbol(sym.TRY, yytext());
            }
          // fall through
          case 80: break;
          case 13:
            { System.out.println("Es un tipo de dato booleano"); return symbol(sym.BOOL, yytext());
            }
          // fall through
          case 81: break;
          case 14:
            { System.out.println("Es una etiqueta en una instrucci√≥n switch"); return symbol(sym.CASE, yytext());
            }
          // fall through
          case 82: break;
          case 15:
            { System.out.println("Es un tipo de dato car√°cter"); return symbol(sym.CHAR, yytext());
            }
          // fall through
          case 83: break;
          case 16:
            { System.out.println("Es una instrucci√≥n alternativa en una estructura if"); return symbol(sym.ELSE, yytext());
            }
          // fall through
          case 84: break;
          case 17:
            { System.out.println("Es una definici√≥n de un tipo enumerado"); return symbol(sym.ENUM, yytext());
            }
          // fall through
          case 85: break;
          case 18:
            { System.out.println("Es una instrucci√≥n para saltar a una etiqueta"); return symbol(sym.GOTO, yytext());
            }
          // fall through
          case 86: break;
          case 19:
            { System.out.println("Es una palabra clave para sincronizaci√≥n de hilos"); return symbol(sym.LOCK, yytext());
            }
          // fall through
          case 87: break;
          case 20:
            { System.out.println("Es un tipo de dato entero de 64 bits"); return symbol(sym.LONG, yytext());
            }
          // fall through
          case 88: break;
          case 21:
            { System.out.println("Es un valor nulo"); return symbol(sym.NULL, yytext());
            }
          // fall through
          case 89: break;
          case 22:
            { System.out.println("Es una referencia a la instancia actual de la clase"); return symbol(sym.THIS, yytext());
            }
          // fall through
          case 90: break;
          case 23:
            { System.out.println("Es un tipo de dato entero sin signo de 32 bits"); return symbol(sym.UINT, yytext());
            }
          // fall through
          case 91: break;
          case 24:
            { System.out.println("Es un tipo de dato vac√≠o"); return symbol(sym.VOID, yytext());
            }
          // fall through
          case 92: break;
          case 25:
            { System.out.println("Es una instrucci√≥n para salir de un bucle"); return symbol(sym.BREAK, yytext());
            }
          // fall through
          case 93: break;
          case 26:
            { System.out.println("Es una cl√°usula para capturar excepciones"); return symbol(sym.CATCH, yytext());
            }
          // fall through
          case 94: break;
          case 27:
            { System.out.println("Es una definici√≥n de una clase"); return symbol(sym.CLASS, yytext());
            }
          // fall through
          case 95: break;
          case 28:
            { System.out.println("Es una constante de valor fijo"); return symbol(sym.CONST, yytext());
            }
          // fall through
          case 96: break;
          case 29:
            { System.out.println("Es un tipo de dato que representa un evento"); return symbol(sym.EVENT, yytext());
            }
          // fall through
          case 97: break;
          case 30:
            { System.out.println("Es una palabra clave para trabajar con memoria fija"); return symbol(sym.FIXED, yytext());
            }
          // fall through
          case 98: break;
          case 31:
            { System.out.println("Es un tipo de dato de punto flotante"); return symbol(sym.FLOAT, yytext());
            }
          // fall through
          case 99: break;
          case 32:
            { System.out.println("Es un tipo de dato entero con signo de 8 bits"); return symbol(sym.SBYTE, yytext());
            }
          // fall through
          case 100: break;
          case 33:
            { System.out.println("Es un tipo de dato entero de 16 bits"); return symbol(sym.SHORT, yytext());
            }
          // fall through
          case 101: break;
          case 34:
            { System.out.println("Es una instrucci√≥n para lanzar una excepci√≥n"); return symbol(sym.THROW, yytext());
            }
          // fall through
          case 102: break;
          case 35:
            { System.out.println("Es un tipo de dato entero sin signo de 64 bits"); return symbol(sym.ULONG, yytext());
            }
          // fall through
          case 103: break;
          case 36:
            { System.out.println("Es una palabra clave para importar espacios de nombres"); return symbol(sym.USING, yytext());
            }
          // fall through
          case 104: break;
          case 37:
            { System.out.println("Es un bucle de repetici√≥n"); return symbol(sym.WHILE, yytext());
            }
          // fall through
          case 105: break;
          case 38:
            { System.out.println("Es un tipo de dato de punto flotante de doble precisi√≥n"); return symbol(sym.DOUBLE, yytext());
            }
          // fall through
          case 106: break;
          case 39:
            { System.out.println("Es una declaraci√≥n de m√©todo externo"); return symbol(sym.EXTERN, yytext());
            }
          // fall through
          case 107: break;
          case 40:
            { System.out.println("Es el tipo base de todos los tipos"); return symbol(sym.OBJECT, yytext());
            }
          // fall through
          case 108: break;
          case 41:
            { System.out.println("Es una palabra clave para par√°metros variables"); return symbol(sym.PARAMS, yytext());
            }
          // fall through
          case 109: break;
          case 42:
            { System.out.println("Es un modificador de acceso p√∫blico"); return symbol(sym.PUBLIC, yytext());
            }
          // fall through
          case 110: break;
          case 43:
            { System.out.println("Es una declaraci√≥n para devolver un valor"); return symbol(sym.RETURN, yytext());
            }
          // fall through
          case 111: break;
          case 44:
            { System.out.println("Es un modificador que indica que una clase no puede ser heredada"); return symbol(sym.SEALED, yytext());
            }
          // fall through
          case 112: break;
          case 45:
            { System.out.println("Es una operaci√≥n que devuelve el tama√±o de un tipo"); return symbol(sym.SIZEOF, yytext());
            }
          // fall through
          case 113: break;
          case 46:
            { System.out.println("Es un modificador que indica que el miembro pertenece a la clase"); return symbol(sym.STATIC, yytext());
            }
          // fall through
          case 114: break;
          case 47:
            { System.out.println("Es un tipo de dato cadena de caracteres"); return symbol(sym.STRING, yytext());
            }
          // fall through
          case 115: break;
          case 48:
            { System.out.println("Es una definici√≥n de una estructura"); return symbol(sym.STRUCT, yytext());
            }
          // fall through
          case 116: break;
          case 49:
            { System.out.println("Es una estructura de control de flujo de m√∫ltiples opciones"); return symbol(sym.SWITCH, yytext());
            }
          // fall through
          case 117: break;
          case 50:
            { System.out.println("Es una operaci√≥n que devuelve el tipo de un objeto"); return symbol(sym.TYPEOF, yytext());
            }
          // fall through
          case 118: break;
          case 51:
            { System.out.println("Es un tipo de dato entero sin signo de 16 bits"); return symbol(sym.USHORT, yytext());
            }
          // fall through
          case 119: break;
          case 52:
            { System.out.println("Es un tipo de dato decimal"); return symbol(sym.DECIMAL, yytext());
            }
          // fall through
          case 120: break;
          case 53:
            { System.out.println("Es una etiqueta por defecto en una instrucci√≥n switch"); return symbol(sym.DEFAULT, yytext());
            }
          // fall through
          case 121: break;
          case 54:
            { System.out.println("Es un tipo de dato din√°mico"); return symbol(sym.DYNAMIC, yytext());
            }
          // fall through
          case 122: break;
          case 55:
            { System.out.println("Es una cl√°usula que se ejecuta despu√©s de una excepci√≥n"); return symbol(sym.FINALLY, yytext());
            }
          // fall through
          case 123: break;
          case 56:
            { System.out.println("Es una instrucci√≥n de bucle foreach"); return symbol(sym.FOREACH, yytext());
            }
          // fall through
          case 124: break;
          case 57:
            { System.out.println("Es un modificador de acceso privado"); return symbol(sym.PRIVATE, yytext());
            }
          // fall through
          case 125: break;
          case 58:
            { System.out.println("Es un modificador que permite que un m√©todo sea sobrescrito"); return symbol(sym.VIRTUAL, yytext());
            }
          // fall through
          case 126: break;
          case 59:
            { System.out.println("Es una palabra clave abstracta"); return symbol(sym.ABSTRACT, yytext());
            }
          // fall through
          case 127: break;
          case 60:
            { System.out.println("Es una instrucci√≥n para continuar con la siguiente iteraci√≥n"); return symbol(sym.CONTINUE, yytext());
            }
          // fall through
          case 128: break;
          case 61:
            { System.out.println("Es un tipo de dato que representa un m√©todo"); return symbol(sym.DELEGATE, yytext());
            }
          // fall through
          case 129: break;
          case 62:
            { System.out.println("Es una conversi√≥n expl√≠cita de tipos"); return symbol(sym.EXPLICIT, yytext());
            }
          // fall through
          case 130: break;
          case 63:
            { System.out.println("Es una conversi√≥n impl√≠cita de tipos"); return symbol(sym.IMPLICIT, yytext());
            }
          // fall through
          case 131: break;
          case 64:
            { System.out.println("Es un modificador de acceso interno"); return symbol(sym.INTERNAL, yytext());
            }
          // fall through
          case 132: break;
          case 65:
            { System.out.println("Es una definici√≥n de operador"); return symbol(sym.OPERATOR, yytext());
            }
          // fall through
          case 133: break;
          case 66:
            { System.out.println("Es una palabra clave para sobrescribir m√©todos"); return symbol(sym.OVERRIDE, yytext());
            }
          // fall through
          case 134: break;
          case 67:
            { System.out.println("Es un modificador que indica que el valor es de solo lectura"); return symbol(sym.READONLY, yytext());
            }
          // fall through
          case 135: break;
          case 68:
            { System.out.println("Es un modificador que indica que el valor puede ser cambiado por otros hilos"); return symbol(sym.VOLATILE, yytext());
            }
          // fall through
          case 136: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
