
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package act2;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserTL extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserTL() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserTL(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserTL(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\006\005\000\002\006\005\000" +
    "\002\005\007\000\002\005\007\000\002\005\007\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\010" +
    "\004\000\002\010\004\000\002\010\005\000\002\010\004" +
    "\000\002\010\003\000\002\010\003\000\002\017\003\000" +
    "\002\017\005\000\002\017\005\000\002\030\003\000\002" +
    "\030\005\000\002\030\005\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\005\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\024\011\000" +
    "\002\024\015\000\002\025\011\000\002\026\015\000\002" +
    "\031\004\000\002\031\007\000\002\031\002\000\002\020" +
    "\005\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\007\000\002\012\006\000\002\027\003" +
    "\000\002\027\003\000\002\013\007\000\002\013\006\000" +
    "\002\016\007\000\002\016\006\000\002\014\007\000\002" +
    "\014\006\000\002\015\007\000\002\015\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\010\005\007\006\010\007\012\001\002\000" +
    "\004\002\223\001\002\000\016\002\ufffc\003\ufffc\005\ufffc" +
    "\006\ufffc\007\ufffc\041\ufffc\001\002\000\004\002\000\001" +
    "\002\000\004\062\220\001\002\000\004\062\210\001\002" +
    "\000\016\002\uffff\003\uffff\005\007\006\010\007\012\041" +
    "\uffff\001\002\000\004\062\015\001\002\000\016\002\ufffb" +
    "\003\ufffb\005\ufffb\006\ufffb\007\ufffb\041\ufffb\001\002\000" +
    "\016\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd\041\ufffd" +
    "\001\002\000\006\003\016\040\017\001\002\000\032\015" +
    "\023\016\034\017\047\020\035\021\025\024\033\026\051" +
    "\027\024\036\026\062\044\063\043\064\032\001\002\000" +
    "\032\015\023\016\034\017\047\020\035\021\025\024\033" +
    "\026\051\027\024\036\026\062\044\063\043\064\032\001" +
    "\002\000\006\003\203\041\204\001\002\000\036\003\uffed" +
    "\015\023\016\034\017\047\020\035\021\025\024\033\026" +
    "\051\027\024\036\026\041\uffed\062\044\063\043\064\032" +
    "\001\002\000\036\003\uffee\015\023\016\034\017\047\020" +
    "\035\021\025\024\033\026\051\027\024\036\026\041\uffee" +
    "\062\044\063\043\064\032\001\002\000\004\062\174\001" +
    "\002\000\004\036\166\001\002\000\004\062\161\001\002" +
    "\000\012\036\026\062\044\063\043\064\032\001\002\000" +
    "\040\003\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\024\uffcf\026\uffcf\027\uffcf\033\uffcf\036\uffcf\041\uffcf\062" +
    "\uffcf\063\uffcf\064\uffcf\001\002\000\010\033\155\044\102" +
    "\045\076\001\002\000\036\003\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\024\uffe2\026\uffe2\027\uffe2\036\uffe2" +
    "\041\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002\000\032\033" +
    "\uffe5\037\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\001\002\000" +
    "\004\036\143\001\002\000\004\062\136\001\002\000\004" +
    "\062\131\001\002\000\040\003\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\024\uffce\026\uffce\027\uffce\033\uffce" +
    "\036\uffce\041\uffce\062\uffce\063\uffce\064\uffce\001\002\000" +
    "\040\003\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\024\uffcc\026\uffcc\027\uffcc\033\uffcc\036\uffcc\041\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\001\002\000\032\033\uffec\037\uffec" +
    "\044\uffec\045\uffec\046\112\047\113\051\uffec\052\uffec\053" +
    "\uffec\054\uffec\055\uffec\056\uffec\001\002\000\032\033\uffe9" +
    "\037\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\001\002\000\036" +
    "\003\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\024" +
    "\uffe0\026\uffe0\027\uffe0\036\uffe0\041\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\001\002\000\032\033\uffe4\037\uffe4\044\uffe4\045" +
    "\uffe4\046\uffe4\047\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\001\002\000\032\033\uffe6\037\uffe6\044" +
    "\uffe6\045\uffe6\046\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\055\uffe6\056\uffe6\001\002\000\040\003\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\024\uffcb\026\uffcb" +
    "\027\uffcb\033\uffcb\036\uffcb\041\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\001\002\000\036\003\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\024\uffe1\026\uffe1\027\uffe1\036\uffe1\041" +
    "\uffe1\062\uffe1\063\uffe1\064\uffe1\001\002\000\004\062\122" +
    "\001\002\000\040\003\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\024\uffcd\026\uffcd\027\uffcd\033\uffcd\036\uffcd" +
    "\041\uffcd\062\uffcd\063\uffcd\064\uffcd\001\002\000\004\036" +
    "\052\001\002\000\014\015\023\016\034\017\047\020\035" +
    "\021\025\001\002\000\004\033\054\001\002\000\020\003" +
    "\061\022\055\023\057\036\026\062\044\063\043\064\032" +
    "\001\002\000\006\033\uffd2\037\uffd2\001\002\000\022\044" +
    "\102\045\076\051\104\052\100\053\101\054\077\055\105" +
    "\056\103\001\002\000\006\033\uffd1\037\uffd1\001\002\000" +
    "\004\033\062\001\002\000\006\033\uffd0\037\uffd0\001\002" +
    "\000\006\037\uffd9\062\063\001\002\000\006\050\071\061" +
    "\072\001\002\000\004\037\065\001\002\000\004\040\066" +
    "\001\002\000\032\015\023\016\034\017\047\020\035\021" +
    "\025\024\033\026\051\027\024\036\026\062\044\063\043" +
    "\064\032\001\002\000\004\041\070\001\002\000\036\003" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\024\uffdc" +
    "\026\uffdc\027\uffdc\036\uffdc\041\uffdc\062\uffdc\063\uffdc\064" +
    "\uffdc\001\002\000\004\062\073\001\002\000\004\037\uffdb" +
    "\001\002\000\004\044\074\001\002\000\004\064\075\001" +
    "\002\000\004\037\uffda\001\002\000\012\036\026\062\044" +
    "\063\043\064\032\001\002\000\012\036\026\062\044\063" +
    "\043\064\032\001\002\000\012\036\026\062\044\063\043" +
    "\064\032\001\002\000\012\036\026\062\044\063\043\064" +
    "\032\001\002\000\012\036\026\062\044\063\043\064\032" +
    "\001\002\000\012\036\026\062\044\063\043\064\032\001" +
    "\002\000\012\036\026\062\044\063\043\064\032\001\002" +
    "\000\012\036\026\062\044\063\043\064\032\001\002\000" +
    "\012\033\uffd4\037\uffd4\044\102\045\076\001\002\000\012" +
    "\033\uffd8\037\uffd8\044\102\045\076\001\002\000\012\033" +
    "\uffd3\037\uffd3\044\102\045\076\001\002\000\032\033\uffeb" +
    "\037\uffeb\044\uffeb\045\uffeb\046\112\047\113\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002\000\012" +
    "\036\026\062\044\063\043\064\032\001\002\000\012\036" +
    "\026\062\044\063\043\064\032\001\002\000\032\033\uffe7" +
    "\037\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\001\002\000\032" +
    "\033\uffe8\037\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8\001\002" +
    "\000\012\033\uffd6\037\uffd6\044\102\045\076\001\002\000" +
    "\012\033\uffd7\037\uffd7\044\102\045\076\001\002\000\012" +
    "\033\uffd5\037\uffd5\044\102\045\076\001\002\000\032\033" +
    "\uffea\037\uffea\044\uffea\045\uffea\046\112\047\113\051\uffea" +
    "\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\001\002\000" +
    "\004\050\123\001\002\000\010\003\125\022\126\023\127" +
    "\001\002\000\004\033\130\001\002\000\040\003\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\024\uffc9\026\uffc9" +
    "\027\uffc9\033\uffc9\036\uffc9\041\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\001\002\000\004\033\uffc8\001\002\000\004\033\uffc7" +
    "\001\002\000\040\003\uffca\015\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\024\uffca\026\uffca\027\uffca\033\uffca\036\uffca" +
    "\041\uffca\062\uffca\063\uffca\064\uffca\001\002\000\004\050" +
    "\132\001\002\000\006\003\134\063\133\001\002\000\004" +
    "\033\135\001\002\000\040\003\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\024\uffc3\026\uffc3\027\uffc3\033\uffc3" +
    "\036\uffc3\041\uffc3\062\uffc3\063\uffc3\064\uffc3\001\002\000" +
    "\040\003\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\024\uffc4\026\uffc4\027\uffc4\033\uffc4\036\uffc4\041\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\001\002\000\004\050\137\001\002" +
    "\000\006\003\140\065\141\001\002\000\040\003\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\024\uffc1\026\uffc1" +
    "\027\uffc1\033\uffc1\036\uffc1\041\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\001\002\000\004\033\142\001\002\000\040\003\uffc2" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\024\uffc2\026" +
    "\uffc2\027\uffc2\033\uffc2\036\uffc2\041\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\001\002\000\020\003\061\022\055\023\057\036" +
    "\026\062\044\063\043\064\032\001\002\000\004\037\145" +
    "\001\002\000\004\040\146\001\002\000\032\015\023\016" +
    "\034\017\047\020\035\021\025\024\033\026\051\027\024" +
    "\036\026\062\044\063\043\064\032\001\002\000\004\041" +
    "\150\001\002\000\040\003\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\024\uffdf\025\151\026\uffdf\027\uffdf\036" +
    "\uffdf\041\uffdf\062\uffdf\063\uffdf\064\uffdf\001\002\000\004" +
    "\040\152\001\002\000\032\015\023\016\034\017\047\020" +
    "\035\021\025\024\033\026\051\027\024\036\026\062\044" +
    "\063\043\064\032\001\002\000\004\041\154\001\002\000" +
    "\036\003\uffde\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\024\uffde\026\uffde\027\uffde\036\uffde\041\uffde\062\uffde\063" +
    "\uffde\064\uffde\001\002\000\036\003\uffef\015\023\016\034" +
    "\017\047\020\035\021\025\024\033\026\051\027\024\036" +
    "\026\041\uffef\062\044\063\043\064\032\001\002\000\006" +
    "\003\ufff0\041\ufff0\001\002\000\010\037\160\044\102\045" +
    "\076\001\002\000\032\033\uffe3\037\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\001\002\000\004\050\162\001\002\000\006" +
    "\003\163\066\164\001\002\000\040\003\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\024\uffbf\026\uffbf\027\uffbf" +
    "\033\uffbf\036\uffbf\041\uffbf\062\uffbf\063\uffbf\064\uffbf\001" +
    "\002\000\004\033\165\001\002\000\040\003\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\024\uffc0\026\uffc0\027" +
    "\uffc0\033\uffc0\036\uffc0\041\uffc0\062\uffc0\063\uffc0\064\uffc0" +
    "\001\002\000\020\003\061\022\055\023\057\036\026\062" +
    "\044\063\043\064\032\001\002\000\004\037\170\001\002" +
    "\000\004\040\171\001\002\000\032\015\023\016\034\017" +
    "\047\020\035\021\025\024\033\026\051\027\024\036\026" +
    "\062\044\063\043\064\032\001\002\000\004\041\173\001" +
    "\002\000\036\003\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd" +
    "\021\uffdd\024\uffdd\026\uffdd\027\uffdd\036\uffdd\041\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\001\002\000\004\050\175\001\002" +
    "\000\006\003\177\064\176\001\002\000\004\033\200\001" +
    "\002\000\040\003\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5" +
    "\021\uffc5\024\uffc5\026\uffc5\027\uffc5\033\uffc5\036\uffc5\041" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\001\002\000\040\003\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\024\uffc6\026" +
    "\uffc6\027\uffc6\033\uffc6\036\uffc6\041\uffc6\062\uffc6\063\uffc6" +
    "\064\uffc6\001\002\000\006\003\ufff2\041\ufff2\001\002\000" +
    "\006\003\ufff1\041\ufff1\001\002\000\016\002\ufff3\003\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\041\ufff3\001\002\000\016\002" +
    "\ufff5\003\ufff5\005\ufff5\006\ufff5\007\ufff5\041\ufff5\001\002" +
    "\000\004\041\206\001\002\000\016\002\ufff4\003\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\041\ufff4\001\002\000\010\002\ufffe" +
    "\003\ufffe\041\ufffe\001\002\000\006\003\211\040\212\001" +
    "\002\000\010\005\007\006\010\007\012\001\002\000\010" +
    "\005\007\006\010\007\012\001\002\000\006\003\214\041" +
    "\215\001\002\000\016\002\ufff6\003\ufff6\005\ufff6\006\ufff6" +
    "\007\ufff6\041\ufff6\001\002\000\016\002\ufff8\003\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\041\ufff8\001\002\000\004\041\217" +
    "\001\002\000\016\002\ufff7\003\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\041\ufff7\001\002\000\006\003\221\033\222\001\002" +
    "\000\016\002\ufff9\003\ufff9\005\ufff9\006\ufff9\007\ufff9\041" +
    "\ufff9\001\002\000\016\002\ufffa\003\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\041\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\016\002\003\003\005\004\010\005\004\006" +
    "\013\007\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\206\004\010\005\004\006\013\007\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\010\204\011\021\012\026\013\035" +
    "\014\047\015\036\016\044\017\027\022\040\023\020\024" +
    "\030\025\045\026\041\030\037\001\001\000\036\010\017" +
    "\011\021\012\026\013\035\014\047\015\036\016\044\017" +
    "\027\022\040\023\020\024\030\025\045\026\041\030\037" +
    "\001\001\000\002\001\001\000\036\010\201\011\021\012" +
    "\026\013\035\014\047\015\036\016\044\017\027\022\040" +
    "\023\020\024\030\025\045\026\041\030\037\001\001\000" +
    "\036\010\200\011\021\012\026\013\035\014\047\015\036" +
    "\016\044\017\027\022\040\023\020\024\030\025\045\026" +
    "\041\030\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\017\156\022\040\030\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\011\052\012\026\013\035\014\047\015\036\016\044" +
    "\001\001\000\002\001\001\000\012\017\055\020\057\022" +
    "\040\030\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\010\066\011\021\012\026\013" +
    "\035\014\047\015\036\016\044\017\027\022\040\023\020" +
    "\024\030\025\045\026\041\030\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\040\030\120\001\001\000\010\017\117\022\040" +
    "\030\037\001\001\000\010\017\116\022\040\030\037\001" +
    "\001\000\010\017\115\022\040\030\037\001\001\000\006" +
    "\022\040\030\110\001\001\000\010\017\107\022\040\030" +
    "\037\001\001\000\010\017\106\022\040\030\037\001\001" +
    "\000\010\017\105\022\040\030\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\114\001\001\000\004\022\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\055\020\143\022\040\030\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\010\146" +
    "\011\021\012\026\013\035\014\047\015\036\016\044\017" +
    "\027\022\040\023\020\024\030\025\045\026\041\030\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\010\152\011\021\012\026\013\035\014\047" +
    "\015\036\016\044\017\027\022\040\023\020\024\030\025" +
    "\045\026\041\030\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\010\155\011\021\012\026\013\035\014" +
    "\047\015\036\016\044\017\027\022\040\023\020\024\030" +
    "\025\045\026\041\030\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\055\020\166\022\040\030\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\010\171\011" +
    "\021\012\026\013\035\014\047\015\036\016\044\017\027" +
    "\022\040\023\020\024\030\025\045\026\041\030\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\215" +
    "\004\010\005\004\006\013\007\012\001\001\000\014\003" +
    "\212\004\010\005\004\006\013\007\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserTL$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserTL$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserTL$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s) {
        report_error("Error de sintaxis en linea: " + (s.left) + " , columna: " + (s.right + 1) + ", simbolo: " + s.value, null);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        report_fatal_error("", null);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserTL$actions {
  private final ParserTL parser;

  /** Constructor */
  CUP$ParserTL$actions(ParserTL parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action_part00000000(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserTL$result;

      /* select the action based on the action number */
      switch (CUP$ParserTL$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)).value;
		RESULT = start_val;
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserTL$parser.done_parsing();
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaraciones 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= declaracion declaraciones 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion ::= dec_using 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion ::= dec_namespace 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= dec_clase 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("declaracion",2, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec_using ::= USING IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		
        System.out.println("---Declaracion de uso---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dec_using ::= USING IDENTIFICADOR error 
            {
              Object RESULT =null;
		
        System.err.println("Error: Se esperaba punto y coma");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_using",4, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA declaraciones LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.out.println("---Declaracion de espacio de nombre---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dec_namespace ::= NAMESPACE IDENTIFICADOR error declaraciones LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.err.println("Error: Se esperaba {");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dec_namespace ::= NAMESPACE IDENTIFICADOR LLAVE_IZQUIERDA declaraciones error 
            {
              Object RESULT =null;
		
        System.err.println("Error: Se esperaba }");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_namespace",3, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA expresiones LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.out.println("---Declaracion de clase---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dec_clase ::= CLASS IDENTIFICADOR error expresiones LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.err.println("Error: Se esperaba {");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dec_clase ::= CLASS IDENTIFICADOR LLAVE_IZQUIERDA expresiones error 
            {
              Object RESULT =null;
		
        System.err.println("Error: Se esperaba }");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_clase",5, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresiones ::= dec_variable expresiones 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresiones",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresiones ::= estructura_control expresiones 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresiones",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresiones ::= expresion PUNTO_COMA expresiones 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresiones",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresiones ::= expresion PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresiones",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresiones ::= dec_variable 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresiones",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresiones ::= estructura_control 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresiones",6, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion SUMA termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion RESTA termino 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",22, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // termino ::= termino MULTIPLICACION factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",22, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // termino ::= termino DIVISION factor 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("termino",22, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= NDECIMAL 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // factor ::= PARENTESIS_IZQUIERDO expresion PARENTESIS_DERECHO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("factor",16, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // estructura_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // estructura_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // estructura_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("estructura_control",17, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // sentencia_if ::= IF PARENTESIS_IZQUIERDO condicion PARENTESIS_DERECHO LLAVE_IZQUIERDA expresiones LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.out.println("---Sentencia if---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",18, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // sentencia_if ::= IF PARENTESIS_IZQUIERDO condicion PARENTESIS_DERECHO LLAVE_IZQUIERDA expresiones LLAVE_DERECHA ELSE LLAVE_IZQUIERDA expresiones LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.out.println("---Sentencia if con else---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_if",18, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // sentencia_while ::= WHILE PARENTESIS_IZQUIERDO condicion PARENTESIS_DERECHO LLAVE_IZQUIERDA expresiones LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.out.println("---Sentencia while---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_while",19, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-6)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sentencia_for ::= FOR PARENTESIS_IZQUIERDO dec_variable PUNTO_COMA condicion PUNTO_COMA expresion_incremento PARENTESIS_DERECHO LLAVE_IZQUIERDA expresiones LLAVE_DERECHA 
            {
              Object RESULT =null;
		
        System.out.println("---Sentencia for---");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("sentencia_for",20, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-10)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion_incremento ::= IDENTIFICADOR INCREMENTO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion_incremento",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-1)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion_incremento ::= IDENTIFICADOR ASIGNACION IDENTIFICADOR SUMA NENTERO 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion_incremento",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion_incremento ::= 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("expresion_incremento",23, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // condicion ::= expresion IGUALDAD expresion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // condicion ::= expresion DESIGUALDAD expresion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // condicion ::= expresion MENOR_QUE expresion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // condicion ::= expresion MAYOR_QUE expresion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicion ::= expresion MENOR_O_IGUAL_QUE expresion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion ::= expresion MAYOR_O_IGUAL_QUE expresion 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-2)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= error 
            {
              Object RESULT =null;
		
        System.err.println("Error en la condicion.");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("condicion",14, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // dec_variable ::= tipo_bool 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variable",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // dec_variable ::= tipo_int 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variable",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // dec_variable ::= tipo_string 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variable",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // dec_variable ::= tipo_char 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variable",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dec_variable ::= tipo_float 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("dec_variable",7, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_bool ::= BOOL IDENTIFICADOR ASIGNACION boleano PUNTO_COMA 
            {
              Object RESULT =null;
		
        System.out.println("--Variable booleana--");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_bool",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo_bool ::= BOOL IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;
		
        System.err.println("Error: falta punto y coma al final de la declaracion de variable booleana.");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_bool",8, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // boleano ::= TRUE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("boleano",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // boleano ::= FALSE 
            {
              Object RESULT =null;

              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("boleano",21, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipo_int ::= INT IDENTIFICADOR ASIGNACION NENTERO PUNTO_COMA 
            {
              Object RESULT =null;
		
        System.out.println("--Variable entera--");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",9, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipo_int ::= INT IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;
		
        System.err.println("Error: falta punto y coma al final de la declaracion de variable entera.");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_int",9, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipo_float ::= FLOAT IDENTIFICADOR ASIGNACION NDECIMAL PUNTO_COMA 
            {
              Object RESULT =null;
		
        System.out.println("--Variable flotante--");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // tipo_float ::= FLOAT IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;
		
        System.err.println("Error: falta punto y coma al final de la declaracion de variable flotante.");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_float",12, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // tipo_string ::= STRING IDENTIFICADOR ASIGNACION CADENA PUNTO_COMA 
            {
              Object RESULT =null;
		
        System.out.println("--Variable cadena--");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_string",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tipo_string ::= STRING IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;
		
        System.err.println("Error: falta punto y coma al final de la declaracion de variable cadena.");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_string",10, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tipo_char ::= CHAR IDENTIFICADOR ASIGNACION CARACTER PUNTO_COMA 
            {
              Object RESULT =null;
		
        System.out.println("--Variable caracter--");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_char",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-4)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tipo_char ::= CHAR IDENTIFICADOR ASIGNACION error 
            {
              Object RESULT =null;
		
        System.err.println("Error: falta punto y coma al final de la declaracion de variable caracter.");
    
              CUP$ParserTL$result = parser.getSymbolFactory().newSymbol("tipo_char",11, ((java_cup.runtime.Symbol)CUP$ParserTL$stack.elementAt(CUP$ParserTL$top-3)), ((java_cup.runtime.Symbol)CUP$ParserTL$stack.peek()), RESULT);
            }
          return CUP$ParserTL$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserTL$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserTL$do_action(
    int                        CUP$ParserTL$act_num,
    java_cup.runtime.lr_parser CUP$ParserTL$parser,
    java.util.Stack            CUP$ParserTL$stack,
    int                        CUP$ParserTL$top)
    throws java.lang.Exception
    {
              return CUP$ParserTL$do_action_part00000000(
                               CUP$ParserTL$act_num,
                               CUP$ParserTL$parser,
                               CUP$ParserTL$stack,
                               CUP$ParserTL$top);
    }
}

}
