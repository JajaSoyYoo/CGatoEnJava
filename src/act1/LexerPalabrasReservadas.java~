// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/act1/tokens_palabras_reservadas.flex

/*
    NOMBRES COMPLETOS ORDENADOS POR PRIMER APELLIDO
    Hernandez Cristobal Alan
*/

package act1;


@SuppressWarnings("fallthrough")
public class LexerPalabrasReservadas {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\0\1\22"+
    "\1\23\1\24\1\25\2\0\32\26\1\27\1\30\1\31"+
    "\1\0\1\32\1\0\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\26\1\44\1\26\1\45"+
    "\1\46\1\47\1\26\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\26\1\56\1\26\1\57\1\0\1\60\7\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\16\21"+
    "\1\24\1\25\1\26\1\0\1\27\2\0\1\30\1\31"+
    "\1\32\1\0\1\33\1\0\1\14\1\34\1\35\1\36"+
    "\6\21\1\37\4\21\1\40\14\21\1\41\1\32\2\0"+
    "\1\14\12\21\1\42\1\43\12\21\1\44\3\21\1\0"+
    "\1\45\1\14\1\21\1\46\1\47\1\50\4\21\1\51"+
    "\3\21\1\52\10\21\1\53\1\21\1\54\1\21\1\45"+
    "\1\14\2\21\1\55\2\21\1\56\1\57\12\21\1\60"+
    "\1\14\1\21\1\61\1\21\1\62\4\21\1\63\1\64"+
    "\1\65\1\66\1\67\1\21\1\14\1\21\1\42\1\70"+
    "\1\21\1\71\1\21\1\72\1\14\1\21\1\73\1\21"+
    "\1\14\1\21\1\74\1\14\1\21\1\0\26\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\223\0\304\0\61\0\365"+
    "\0\61\0\61\0\61\0\u0126\0\61\0\u0157\0\u0188\0\u01b9"+
    "\0\u01ea\0\61\0\u021b\0\u024c\0\u027d\0\u02ae\0\61\0\61"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\61\0\61"+
    "\0\61\0\304\0\61\0\u058d\0\u05be\0\61\0\61\0\u05ef"+
    "\0\u0620\0\u0651\0\u0188\0\u0682\0\61\0\61\0\61\0\u06b3"+
    "\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u06b3\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\61"+
    "\0\61\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40"+
    "\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0bad"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0bad\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u0620"+
    "\0\u1076\0\u10a7\0\u10a7\0\u10a7\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u10a7\0\u119c\0\u11cd\0\u11fe\0\u10a7\0\u122f\0\u1260"+
    "\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u10a7\0\u13b7"+
    "\0\u10a7\0\u13e8\0\61\0\u1419\0\u144a\0\u147b\0\u144a\0\u14ac"+
    "\0\u14dd\0\u144a\0\u144a\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2"+
    "\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u144a\0\u16f8\0\u1729"+
    "\0\u1729\0\u175a\0\u1729\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u1729"+
    "\0\u1729\0\u1729\0\u1729\0\u1729\0\u184f\0\u1880\0\u18b1\0\u18b1"+
    "\0\u18b1\0\u18e2\0\u18b1\0\u1913\0\u18b1\0\u1944\0\u1975\0\u1975"+
    "\0\u19a6\0\u19d7\0\u1a08\0\u1a08\0\u1a39\0\u1a6a\0\u1a39\0\u1a9b"+
    "\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\2"+
    "\1\30\2\26\1\31\1\32\1\33\1\34\1\35\2\26"+
    "\1\36\1\37\1\26\1\40\1\41\1\42\1\43\1\44"+
    "\1\26\1\45\1\46\1\26\1\47\1\50\62\0\2\3"+
    "\1\0\1\3\100\0\1\51\34\0\6\52\1\53\21\52"+
    "\1\54\30\52\2\55\3\0\54\55\14\0\1\56\62\0"+
    "\1\57\63\0\1\60\52\0\1\61\4\0\1\62\57\0"+
    "\1\63\1\0\1\64\63\0\1\65\60\0\1\66\60\0"+
    "\1\67\55\0\1\70\4\0\1\70\4\0\24\70\23\0"+
    "\1\70\4\0\1\70\4\0\13\70\1\71\7\70\1\72"+
    "\23\0\1\70\4\0\1\70\4\0\7\70\1\73\1\70"+
    "\1\74\12\70\23\0\1\70\4\0\1\70\4\0\4\70"+
    "\1\75\6\70\1\76\10\70\23\0\1\70\4\0\1\70"+
    "\4\0\11\70\1\77\12\70\23\0\1\70\4\0\1\70"+
    "\4\0\1\100\10\70\1\101\1\70\1\102\10\70\23\0"+
    "\1\70\4\0\1\70\4\0\5\70\1\103\4\70\1\104"+
    "\11\70\23\0\1\70\4\0\1\70\4\0\13\70\1\105"+
    "\10\70\23\0\1\70\4\0\1\70\4\0\21\70\1\106"+
    "\2\70\23\0\1\70\4\0\1\70\4\0\15\70\1\107"+
    "\2\70\1\110\3\70\23\0\1\70\4\0\1\70\4\0"+
    "\4\70\1\111\17\70\23\0\1\70\4\0\1\70\4\0"+
    "\17\70\1\112\2\70\1\113\1\70\23\0\1\70\4\0"+
    "\1\70\4\0\15\70\1\114\6\70\23\0\1\70\4\0"+
    "\1\70\4\0\10\70\1\115\2\70\1\116\10\70\23\0"+
    "\1\70\4\0\1\70\4\0\7\70\1\117\14\70\2\0"+
    "\2\52\3\0\54\52\10\0\1\120\71\0\1\121\37\0"+
    "\2\61\1\122\2\0\6\61\1\123\45\61\2\62\3\0"+
    "\54\62\17\0\1\63\1\0\1\124\60\0\1\125\4\0"+
    "\1\125\4\0\24\125\23\0\1\125\4\0\1\125\4\0"+
    "\13\125\1\126\10\125\23\0\1\125\4\0\1\125\4\0"+
    "\17\125\1\127\4\125\23\0\1\125\4\0\1\125\4\0"+
    "\1\130\23\125\23\0\1\125\4\0\1\125\4\0\1\131"+
    "\23\125\23\0\1\125\4\0\1\125\4\0\5\125\1\132"+
    "\16\125\23\0\1\125\4\0\1\125\4\0\20\125\1\133"+
    "\3\125\23\0\1\125\4\0\1\125\4\0\16\125\1\134"+
    "\5\125\23\0\1\125\4\0\1\125\4\0\11\125\1\135"+
    "\12\125\23\0\1\125\4\0\1\125\4\0\13\125\1\136"+
    "\10\125\23\0\1\125\4\0\1\125\4\0\15\125\1\137"+
    "\6\125\23\0\1\125\4\0\1\125\4\0\17\125\1\140"+
    "\4\125\23\0\1\125\4\0\1\125\4\0\12\125\1\141"+
    "\11\125\23\0\1\125\4\0\1\125\4\0\4\125\1\142"+
    "\17\125\23\0\1\125\4\0\1\125\4\0\10\125\1\143"+
    "\2\125\1\144\10\125\23\0\1\125\4\0\1\125\4\0"+
    "\1\125\1\145\22\125\23\0\1\125\4\0\1\125\4\0"+
    "\17\125\1\146\4\125\23\0\1\125\4\0\1\125\4\0"+
    "\1\147\14\125\1\150\6\125\23\0\1\125\4\0\1\125"+
    "\4\0\10\125\1\151\13\125\23\0\1\125\4\0\1\125"+
    "\4\0\20\125\1\152\2\125\1\153\23\0\1\125\4\0"+
    "\1\125\4\0\15\125\1\154\6\125\23\0\1\125\4\0"+
    "\1\125\4\0\10\125\1\155\13\125\23\0\1\125\4\0"+
    "\1\125\4\0\10\125\1\156\13\125\4\0\1\122\10\0"+
    "\1\157\45\0\2\61\1\122\2\0\6\61\1\123\4\61"+
    "\1\160\40\61\17\0\1\63\1\0\1\161\60\0\1\162"+
    "\4\0\1\162\4\0\24\162\23\0\1\162\4\0\1\162"+
    "\4\0\11\162\1\163\12\162\23\0\1\162\4\0\1\162"+
    "\4\0\4\162\1\164\17\162\23\0\1\162\4\0\1\162"+
    "\4\0\15\162\1\165\1\162\1\166\4\162\23\0\1\162"+
    "\4\0\1\162\4\0\16\162\1\167\5\162\23\0\1\162"+
    "\4\0\1\162\4\0\1\170\23\162\23\0\1\162\4\0"+
    "\1\162\4\0\1\162\1\171\22\162\23\0\1\162\4\0"+
    "\1\162\4\0\4\162\1\172\17\162\23\0\1\162\4\0"+
    "\1\162\4\0\16\162\1\173\5\162\23\0\1\162\4\0"+
    "\1\162\4\0\1\174\23\162\23\0\1\162\4\0\1\162"+
    "\4\0\4\162\1\175\17\162\23\0\1\162\4\0\1\162"+
    "\4\0\6\162\1\176\15\162\23\0\1\162\4\0\1\162"+
    "\4\0\15\162\1\177\6\162\23\0\1\162\4\0\1\162"+
    "\4\0\21\162\1\200\2\162\23\0\1\162\4\0\1\162"+
    "\4\0\17\162\1\201\4\162\23\0\1\162\4\0\1\162"+
    "\4\0\11\162\1\202\12\162\23\0\1\162\4\0\1\162"+
    "\4\0\20\162\1\203\3\162\23\0\1\162\4\0\1\162"+
    "\4\0\17\162\1\204\4\162\23\0\1\162\4\0\1\162"+
    "\4\0\10\162\1\205\13\162\23\0\1\162\4\0\1\162"+
    "\4\0\17\162\1\206\4\162\23\0\1\162\4\0\1\162"+
    "\4\0\4\162\1\207\17\162\23\0\1\162\4\0\1\162"+
    "\4\0\17\162\1\210\4\162\23\0\1\162\4\0\1\162"+
    "\4\0\3\162\1\211\20\162\23\0\1\162\4\0\1\162"+
    "\4\0\11\162\1\212\12\162\22\0\1\213\57\0\1\63"+
    "\1\0\1\214\60\0\1\215\4\0\1\215\4\0\24\215"+
    "\23\0\1\215\4\0\1\215\4\0\2\215\1\216\21\215"+
    "\23\0\1\215\4\0\1\215\4\0\16\215\1\217\5\215"+
    "\23\0\1\215\4\0\1\215\4\0\20\215\1\220\3\215"+
    "\23\0\1\215\4\0\1\215\4\0\11\215\1\221\12\215"+
    "\23\0\1\215\4\0\1\215\4\0\4\215\1\222\17\215"+
    "\23\0\1\215\4\0\1\215\4\0\17\215\1\223\4\215"+
    "\23\0\1\215\4\0\1\215\4\0\1\224\23\215\23\0"+
    "\1\215\4\0\1\215\4\0\15\215\1\225\6\215\23\0"+
    "\1\215\4\0\1\215\4\0\1\226\23\215\23\0\1\215"+
    "\4\0\1\215\4\0\4\215\1\227\17\215\23\0\1\215"+
    "\4\0\1\215\4\0\10\215\1\230\13\215\23\0\1\215"+
    "\4\0\1\215\4\0\15\215\1\231\6\215\23\0\1\215"+
    "\4\0\1\215\4\0\10\215\1\232\13\215\23\0\1\215"+
    "\4\0\1\215\4\0\12\215\1\233\11\215\23\0\1\215"+
    "\4\0\1\215\4\0\2\215\1\234\21\215\23\0\1\215"+
    "\4\0\1\215\4\0\20\215\1\235\3\215\23\0\1\215"+
    "\4\0\1\215\4\0\4\215\1\236\17\215\21\0\1\63"+
    "\1\0\1\237\60\0\1\240\4\0\1\240\4\0\24\240"+
    "\23\0\1\240\4\0\1\240\4\0\7\240\1\241\14\240"+
    "\23\0\1\240\4\0\1\240\4\0\11\240\1\242\12\240"+
    "\23\0\1\240\4\0\1\240\4\0\4\240\1\243\17\240"+
    "\23\0\1\240\4\0\1\240\4\0\2\240\1\244\21\240"+
    "\23\0\1\240\4\0\1\240\4\0\10\240\1\245\13\240"+
    "\23\0\1\240\4\0\1\240\4\0\17\240\1\246\4\240"+
    "\23\0\1\240\4\0\1\240\4\0\2\240\1\247\21\240"+
    "\23\0\1\240\4\0\1\240\4\0\2\240\1\250\21\240"+
    "\23\0\1\240\4\0\1\240\4\0\12\240\1\251\11\240"+
    "\23\0\1\240\4\0\1\240\4\0\2\240\1\252\21\240"+
    "\23\0\1\240\4\0\1\240\4\0\6\240\1\253\15\240"+
    "\23\0\1\240\4\0\1\240\4\0\7\240\1\254\14\240"+
    "\23\0\1\240\4\0\1\240\4\0\1\255\23\240\21\0"+
    "\1\63\1\0\1\256\60\0\1\257\4\0\1\257\4\0"+
    "\24\257\23\0\1\257\4\0\1\257\4\0\17\257\1\260"+
    "\4\257\23\0\1\257\4\0\1\257\4\0\7\257\1\261"+
    "\14\257\23\0\1\257\4\0\1\257\4\0\3\257\1\262"+
    "\20\257\23\0\1\257\4\0\1\257\4\0\4\257\1\263"+
    "\17\257\23\0\1\257\4\0\1\257\4\0\17\257\1\264"+
    "\4\257\23\0\1\257\4\0\1\257\4\0\11\257\1\265"+
    "\12\257\21\0\1\63\1\0\1\266\60\0\1\267\4\0"+
    "\1\267\4\0\24\267\23\0\1\267\4\0\1\267\4\0"+
    "\4\267\1\270\17\267\23\0\1\267\4\0\1\267\4\0"+
    "\4\267\1\271\17\267\21\0\1\63\1\0\1\272\60\0"+
    "\1\273\4\0\1\273\4\0\24\273\23\0\1\273\4\0"+
    "\1\273\4\0\3\273\1\274\20\273\21\0\1\63\1\0"+
    "\1\275\60\0\1\276\4\0\1\276\4\0\24\276\21\0"+
    "\1\63\1\0\1\277\60\0\1\300\4\0\1\300\4\0"+
    "\24\300\23\0\1\301\4\0\1\301\4\0\24\301\23\0"+
    "\1\302\4\0\1\302\4\0\24\302\23\0\1\303\4\0"+
    "\1\303\4\0\24\303\23\0\1\304\4\0\1\304\4\0"+
    "\24\304\23\0\1\305\4\0\1\305\4\0\24\305\23\0"+
    "\1\306\4\0\1\306\4\0\24\306\23\0\1\307\4\0"+
    "\1\307\4\0\24\307\23\0\1\310\4\0\1\310\4\0"+
    "\24\310\23\0\1\311\4\0\1\311\4\0\24\311\23\0"+
    "\1\312\4\0\1\312\4\0\24\312\23\0\1\313\4\0"+
    "\1\313\4\0\24\313\23\0\1\314\4\0\1\314\4\0"+
    "\24\314\23\0\1\315\4\0\1\315\4\0\24\315\23\0"+
    "\1\316\4\0\1\316\4\0\24\316\23\0\1\317\4\0"+
    "\1\317\4\0\24\317\23\0\1\320\4\0\1\320\4\0"+
    "\24\320\23\0\1\321\4\0\1\321\4\0\24\321\23\0"+
    "\1\322\4\0\1\322\4\0\24\322\23\0\1\323\4\0"+
    "\1\323\4\0\24\323\23\0\1\324\4\0\1\324\4\0"+
    "\24\324\23\0\1\325\4\0\1\325\4\0\24\325\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7840];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\1\1\3\11"+
    "\1\1\1\11\4\1\1\11\4\1\2\11\16\1\3\11"+
    "\1\0\1\11\2\0\2\11\1\1\1\0\1\1\1\0"+
    "\1\1\3\11\30\1\2\11\2\0\33\1\1\0\33\1"+
    "\1\11\63\1\1\0\25\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[213];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerPalabrasReservadas(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> ERROR Token no reconocido");
            }
          // fall through
          case 61: break;
          case 2:
            { /* Ignorar espacios en blanco */
            }
          // fall through
          case 62: break;
          case 3:
            { System.out.print(yytext());
            }
          // fall through
          case 63: break;
          case 4:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo modulo ");
                return TokensTL24B.SIGNO_MODULO;
            }
          // fall through
          case 64: break;
          case 5:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Parentesis de apertura ");
                return TokensTL24B.PARENTESIS_APERTURA;
            }
          // fall through
          case 65: break;
          case 6:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Parentesis de cierre ");
                return TokensTL24B.PARENTESIS_CIERRE;
            }
          // fall through
          case 66: break;
          case 7:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo multiplicacion ");
                return TokensTL24B.SIGNO_MULTIPLICACION;
            }
          // fall through
          case 67: break;
          case 8:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo mas ");
                return TokensTL24B.SIGNO_MAS;
            }
          // fall through
          case 68: break;
          case 9:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Coma ");
                return TokensTL24B.COMA;
            }
          // fall through
          case 69: break;
          case 10:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Punto ");
                return TokensTL24B.PUNTO;
            }
          // fall through
          case 70: break;
          case 11:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo division ");
                return TokensTL24B.SIGNO_DIVISION;
            }
          // fall through
          case 71: break;
          case 12:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Numero entero");
                                return TokensTL24B.NENTERO;
            }
          // fall through
          case 72: break;
          case 13:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Punto y coma ");
                 return TokensTL24B.PUNTO_COMA;
            }
          // fall through
          case 73: break;
          case 14:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo menor que ");
                return TokensTL24B.SIGNO_MENOR_QUE;
            }
          // fall through
          case 74: break;
          case 15:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo asignacion ");
                return TokensTL24B.SIGNO_ASIGNACION;
            }
          // fall through
          case 75: break;
          case 16:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo mayor que ");
                return TokensTL24B.SIGNO_MAYOR_QUE;
            }
          // fall through
          case 76: break;
          case 17:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Identificador ");
                                return TokensTL24B.IDENTIFICADOR;
            }
          // fall through
          case 77: break;
          case 18:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Corchete de apertura ");
                return TokensTL24B.CORCHETE_APERTURA;
            }
          // fall through
          case 78: break;
          case 19:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Corchete de cierre ");
                return TokensTL24B.CORCHETE_CIERRE;
            }
          // fall through
          case 79: break;
          case 20:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Llave de apertura ");                
                return TokensTL24B.LLAVE_APERTURA;
            }
          // fall through
          case 80: break;
          case 21:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Llave de cierre ");
                return TokensTL24B.LLAVE_CIERRE;
            }
          // fall through
          case 81: break;
          case 22:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo diferente ");
                return TokensTL24B.SIGNO_DIFERENTE;
            }
          // fall through
          case 82: break;
          case 23:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Cadena ");
                                return TokensTL24B.CADENA;
            }
          // fall through
          case 83: break;
          case 24:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo incremento ");
                return TokensTL24B.SIGNO_INCREMENTO;
            }
          // fall through
          case 84: break;
          case 25:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo decremento ");
                return TokensTL24B.SIGNO_DECREMENTO;
            }
          // fall through
          case 85: break;
          case 26:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Decimal ");
                                return TokensTL24B.NDECIMAL;
            }
          // fall through
          case 86: break;
          case 27:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Comentario una linea");
                                return TokensTL24B.COMENTARIOLINEA;
            }
          // fall through
          case 87: break;
          case 28:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo menor o igual que ");
                return TokensTL24B.SIGNO_MENOR_IGUAL_QUE;
            }
          // fall through
          case 88: break;
          case 29:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo igual igual ");
                return TokensTL24B.SIGNO_IGUAL_IGUAL;
            }
          // fall through
          case 89: break;
          case 30:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo mayor o igual que ");
                return TokensTL24B.SIGNO_MAYOR_IGUAL_QUE;
            }
          // fall through
          case 90: break;
          case 31:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para iteracion do");                
                return TokensTL24B.DO;
            }
          // fall through
          case 91: break;
          case 32:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de control de flujo if");                
                return TokensTL24B.IF;
            }
          // fall through
          case 92: break;
          case 33:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Caracter");
                                return TokensTL24B.CARACTER;
            }
          // fall through
          case 93: break;
          case 34:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para iteracion for");                
                return TokensTL24B.FOR;
            }
          // fall through
          case 94: break;
          case 35:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato int ");
                return TokensTL24B.INT;
            }
          // fall through
          case 95: break;
          case 36:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para una excepcion try");                
                return TokensTL24B.TRY;
            }
          // fall through
          case 96: break;
          case 37:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Comentario de varias lineas");
                                return TokensTL24B.MULTICOMENTARIO;
            }
          // fall through
          case 97: break;
          case 38:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato boolean ");                
                return TokensTL24B.BOOL;
            }
          // fall through
          case 98: break;
          case 39:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato byte ");                
                return TokensTL24B.BYTE;
            }
          // fall through
          case 99: break;
          case 40:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato char ");
                return TokensTL24B.CHAR;
            }
          // fall through
          case 100: break;
          case 41:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de control de flujo else");                
                return TokensTL24B.ELSE;
            }
          // fall through
          case 101: break;
          case 42:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato long ");                
                return TokensTL24B.LONG;
            }
          // fall through
          case 102: break;
          case 43:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Valor booleano verdadero");                
                return TokensTL24B.TRUE;
            }
          // fall through
          case 103: break;
          case 44:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato vacio ");
                return TokensTL24B.VOID;
            }
          // fall through
          case 104: break;
          case 45:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para definir clases");                
                return TokensTL24B.CLASS;
            }
          // fall through
          case 105: break;
          case 46:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Valor booleano falso");                
                return TokensTL24B.FALSE;
            }
          // fall through
          case 106: break;
          case 47:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato float ");                
                return TokensTL24B.FLOAT;
            }
          // fall through
          case 107: break;
          case 48:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para iteracion while");                
                return TokensTL24B.WHILE;
            }
          // fall through
          case 108: break;
          case 49:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para manejar excepcion catch");                
                return TokensTL24B.CATCH;
            }
          // fall through
          case 109: break;
          case 50:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato double ");                
                return TokensTL24B.DOUBLE;
            }
          // fall through
          case 110: break;
          case 51:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de visibilidad public");                
                return TokensTL24B.PUBLIC;
            }
          // fall through
          case 111: break;
          case 52:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra devolver valores return");                
                return TokensTL24B.RETURN;
            }
          // fall through
          case 112: break;
          case 53:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de comportamineto static");                
                return TokensTL24B.STATIC;
            }
          // fall through
          case 113: break;
          case 54:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Tipo de dato cadena");                
                return TokensTL24B.STRING;
            }
          // fall through
          case 114: break;
          case 55:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de control de flujo switch");                
                return TokensTL24B.SWITCH;
            }
          // fall through
          case 115: break;
          case 56:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para iteracion foreach");                
                return TokensTL24B.FOR;
            }
          // fall through
          case 116: break;
          case 57:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de visibilidad private");                
                return TokensTL24B.PRIVATE;
            }
          // fall through
          case 117: break;
          case 58:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de comportamiento virtual");                
                return TokensTL24B.VIRTUAL;
            }
          // fall through
          case 118: break;
          case 59:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de comportamiento override");                
                return TokensTL24B.OVERRIDE;
            }
          // fall through
          case 119: break;
          case 60:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de visibilidad protected");                
                return TokensTL24B.PROTECTED;
            }
          // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerPalabrasReservadas [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerPalabrasReservadas scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerPalabrasReservadas(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
