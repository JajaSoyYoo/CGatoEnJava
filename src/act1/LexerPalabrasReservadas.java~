// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/act1/tokens_palabras_reservadas.flex

/*
    NOMBRES COMPLETOS ORDENADOS POR PRIMER APELLIDO
    Hernandez Cristobal Alan
*/

package act1;


@SuppressWarnings("fallthrough")
public class LexerPalabrasReservadas {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\0\1\22"+
    "\1\23\1\24\1\25\2\0\32\26\1\27\1\30\1\31"+
    "\1\0\1\32\1\0\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\2\26\1\44\1\26\1\45"+
    "\1\46\1\47\1\26\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\26\1\56\1\26\1\57\1\0\1\60\7\0"+
    "\1\3\32\0\1\61\u01df\0\1\61\177\0\13\61\35\0"+
    "\2\3\5\0\1\61\57\0\1\61\240\0\1\61\377\0"+
    "\u0100\62";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\1\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\16\22\1\25\1\26\1\27\1\30\2\0\1\31\1\0"+
    "\1\31\1\0\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\2\41\1\15\1\42\1\43\1\44\6\22\1\45"+
    "\4\22\1\46\14\22\1\47\1\0\1\47\1\37\1\32"+
    "\1\50\1\40\3\51\1\52\1\15\12\22\1\53\1\54"+
    "\12\22\1\55\3\22\1\31\1\0\3\37\1\56\1\35"+
    "\1\15\1\22\1\57\1\60\1\61\4\22\1\62\3\22"+
    "\1\63\10\22\1\64\1\22\1\65\1\22\2\37\1\56"+
    "\1\15\2\22\1\66\2\22\1\67\1\70\12\22\1\71"+
    "\1\0\1\15\1\22\1\72\1\22\1\73\4\22\1\74"+
    "\1\75\1\76\1\77\1\100\1\22\1\37\1\15\1\22"+
    "\1\53\1\101\1\22\1\102\1\22\1\103\1\15\1\22"+
    "\1\104\1\22\1\15\1\22\1\105\1\15\1\22\1\0"+
    "\26\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\63\0\231\0\314\0\63\0\377"+
    "\0\63\0\63\0\u0132\0\u0165\0\63\0\u0198\0\u01cb\0\u01fe"+
    "\0\u0231\0\63\0\u0264\0\u0297\0\u02ca\0\u02fd\0\63\0\63"+
    "\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495"+
    "\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\63\0\63"+
    "\0\63\0\63\0\u05fa\0\u062d\0\63\0\u0660\0\u0693\0\u06c6"+
    "\0\u0132\0\63\0\63\0\u06f9\0\u01cb\0\u072c\0\u075f\0\u0792"+
    "\0\u07c5\0\u07f8\0\63\0\63\0\63\0\u082b\0\u085e\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29"+
    "\0\u082b\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e"+
    "\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\63\0\u0cc0\0\u0660"+
    "\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0792\0\63\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u0e58\0\u1089\0\u10bc\0\u10ef"+
    "\0\u1122\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u0e58"+
    "\0\u1287\0\u12ba\0\u12ed\0\u0660\0\u1320\0\u1353\0\u1386\0\u13b9"+
    "\0\63\0\u0dbf\0\u13ec\0\u141f\0\u141f\0\u141f\0\u141f\0\u1452"+
    "\0\u1485\0\u14b8\0\u14eb\0\u141f\0\u151e\0\u1551\0\u1584\0\u141f"+
    "\0\u15b7\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c"+
    "\0\u141f\0\u174f\0\u141f\0\u1782\0\u17b5\0\u17e8\0\u17e8\0\u181b"+
    "\0\u184e\0\u1881\0\u184e\0\u18b4\0\u18e7\0\u184e\0\u184e\0\u191a"+
    "\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2"+
    "\0\u1ae5\0\u184e\0\u1b18\0\u1b4b\0\u1b7e\0\u1b7e\0\u1bb1\0\u1b7e"+
    "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\u1b7e\0\u1b7e\0\u1b7e\0\u1b7e"+
    "\0\u1b7e\0\u1cb0\0\u1ce3\0\u1d16\0\u1d49\0\u1d49\0\u1d49\0\u1d7c"+
    "\0\u1d49\0\u1daf\0\u1d49\0\u1de2\0\u1e15\0\u1e15\0\u1e48\0\u1e7b"+
    "\0\u1eae\0\u1eae\0\u1ee1\0\u1f14\0\u1ee1\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\u2178\0\u21ab\0\u21de\0\u2211\0\u2244\0\u2277\0\u22aa\0\u22dd"+
    "\0\u2310\0\u2343\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\2"+
    "\1\30\2\26\1\31\1\32\1\33\1\34\1\35\2\26"+
    "\1\36\1\37\1\26\1\40\1\41\1\42\1\43\1\44"+
    "\1\26\1\45\1\46\1\26\1\47\1\50\1\2\1\4"+
    "\64\0\2\3\1\0\1\3\102\0\1\51\36\0\2\6"+
    "\1\0\3\6\1\52\21\6\1\53\32\6\2\54\1\55"+
    "\2\56\3\54\1\57\17\54\1\60\31\54\1\56\2\61"+
    "\1\0\15\61\1\0\42\61\14\0\1\62\64\0\1\63"+
    "\63\0\1\64\1\0\1\65\41\0\2\61\1\0\10\61"+
    "\1\66\4\61\1\67\42\61\1\70\4\0\12\70\1\71"+
    "\1\70\1\72\37\70\1\0\1\70\24\0\1\73\62\0"+
    "\1\74\62\0\1\75\57\0\1\76\4\0\1\76\4\0"+
    "\24\76\25\0\1\76\4\0\1\76\4\0\13\76\1\77"+
    "\7\76\1\100\25\0\1\76\4\0\1\76\4\0\7\76"+
    "\1\101\1\76\1\102\12\76\25\0\1\76\4\0\1\76"+
    "\4\0\4\76\1\103\6\76\1\104\10\76\25\0\1\76"+
    "\4\0\1\76\4\0\11\76\1\105\12\76\25\0\1\76"+
    "\4\0\1\76\4\0\1\106\10\76\1\107\1\76\1\110"+
    "\10\76\25\0\1\76\4\0\1\76\4\0\5\76\1\111"+
    "\4\76\1\112\11\76\25\0\1\76\4\0\1\76\4\0"+
    "\13\76\1\113\10\76\25\0\1\76\4\0\1\76\4\0"+
    "\21\76\1\114\2\76\25\0\1\76\4\0\1\76\4\0"+
    "\15\76\1\115\2\76\1\116\3\76\25\0\1\76\4\0"+
    "\1\76\4\0\4\76\1\117\17\76\25\0\1\76\4\0"+
    "\1\76\4\0\17\76\1\120\2\76\1\121\1\76\25\0"+
    "\1\76\4\0\1\76\4\0\15\76\1\122\6\76\25\0"+
    "\1\76\4\0\1\76\4\0\10\76\1\123\2\76\1\124"+
    "\10\76\25\0\1\76\4\0\1\76\4\0\7\76\1\125"+
    "\14\76\4\0\2\6\3\0\55\6\1\0\2\56\1\55"+
    "\5\56\1\126\17\56\1\127\34\56\1\55\5\56\1\55"+
    "\17\56\1\127\32\56\10\0\1\126\52\0\2\56\1\55"+
    "\5\56\1\130\17\56\1\127\32\56\17\0\1\64\1\0"+
    "\1\64\41\0\2\66\1\131\10\66\1\132\4\66\1\131"+
    "\42\66\2\67\1\0\2\133\13\67\1\134\41\67\1\133"+
    "\1\70\4\0\14\70\1\0\37\70\1\0\1\70\1\135"+
    "\4\136\12\135\1\137\1\135\1\140\37\135\1\136\1\135"+
    "\1\70\4\0\12\70\1\71\1\70\1\141\37\70\1\0"+
    "\1\70\21\0\1\142\4\0\1\142\4\0\24\142\25\0"+
    "\1\142\4\0\1\142\4\0\13\142\1\143\10\142\25\0"+
    "\1\142\4\0\1\142\4\0\17\142\1\144\4\142\25\0"+
    "\1\142\4\0\1\142\4\0\1\145\23\142\25\0\1\142"+
    "\4\0\1\142\4\0\1\146\23\142\25\0\1\142\4\0"+
    "\1\142\4\0\5\142\1\147\16\142\25\0\1\142\4\0"+
    "\1\142\4\0\20\142\1\150\3\142\25\0\1\142\4\0"+
    "\1\142\4\0\16\142\1\151\5\142\25\0\1\142\4\0"+
    "\1\142\4\0\11\142\1\152\12\142\25\0\1\142\4\0"+
    "\1\142\4\0\13\142\1\153\10\142\25\0\1\142\4\0"+
    "\1\142\4\0\15\142\1\154\6\142\25\0\1\142\4\0"+
    "\1\142\4\0\17\142\1\155\4\142\25\0\1\142\4\0"+
    "\1\142\4\0\12\142\1\156\11\142\25\0\1\142\4\0"+
    "\1\142\4\0\4\142\1\157\17\142\25\0\1\142\4\0"+
    "\1\142\4\0\10\142\1\160\2\142\1\161\10\142\25\0"+
    "\1\142\4\0\1\142\4\0\1\142\1\162\22\142\25\0"+
    "\1\142\4\0\1\142\4\0\17\142\1\163\4\142\25\0"+
    "\1\142\4\0\1\142\4\0\1\164\14\142\1\165\6\142"+
    "\25\0\1\142\4\0\1\142\4\0\10\142\1\166\13\142"+
    "\25\0\1\142\4\0\1\142\4\0\20\142\1\167\2\142"+
    "\1\170\25\0\1\142\4\0\1\142\4\0\15\142\1\171"+
    "\6\142\25\0\1\142\4\0\1\142\4\0\10\142\1\172"+
    "\13\142\25\0\1\142\4\0\1\142\4\0\10\142\1\173"+
    "\13\142\4\0\2\56\1\55\5\56\1\174\17\56\1\127"+
    "\32\56\13\131\1\175\47\131\2\176\1\177\10\176\1\200"+
    "\4\176\1\201\42\176\2\133\1\0\15\133\1\0\42\133"+
    "\2\134\3\0\55\134\1\0\1\70\4\0\12\70\1\202"+
    "\1\70\1\64\37\70\1\0\1\70\17\0\1\64\1\0"+
    "\1\140\41\0\1\70\4\0\12\70\1\71\1\70\1\203"+
    "\37\70\1\0\1\70\21\0\1\204\4\0\1\204\4\0"+
    "\24\204\25\0\1\204\4\0\1\204\4\0\11\204\1\205"+
    "\12\204\25\0\1\204\4\0\1\204\4\0\4\204\1\206"+
    "\17\204\25\0\1\204\4\0\1\204\4\0\15\204\1\207"+
    "\1\204\1\210\4\204\25\0\1\204\4\0\1\204\4\0"+
    "\16\204\1\211\5\204\25\0\1\204\4\0\1\204\4\0"+
    "\1\212\23\204\25\0\1\204\4\0\1\204\4\0\1\204"+
    "\1\213\22\204\25\0\1\204\4\0\1\204\4\0\4\204"+
    "\1\214\17\204\25\0\1\204\4\0\1\204\4\0\16\204"+
    "\1\215\5\204\25\0\1\204\4\0\1\204\4\0\1\216"+
    "\23\204\25\0\1\204\4\0\1\204\4\0\4\204\1\217"+
    "\17\204\25\0\1\204\4\0\1\204\4\0\6\204\1\220"+
    "\15\204\25\0\1\204\4\0\1\204\4\0\15\204\1\221"+
    "\6\204\25\0\1\204\4\0\1\204\4\0\21\204\1\222"+
    "\2\204\25\0\1\204\4\0\1\204\4\0\17\204\1\223"+
    "\4\204\25\0\1\204\4\0\1\204\4\0\11\204\1\224"+
    "\12\204\25\0\1\204\4\0\1\204\4\0\20\204\1\225"+
    "\3\204\25\0\1\204\4\0\1\204\4\0\17\204\1\226"+
    "\4\204\25\0\1\204\4\0\1\204\4\0\10\204\1\227"+
    "\13\204\25\0\1\204\4\0\1\204\4\0\17\204\1\230"+
    "\4\204\25\0\1\204\4\0\1\204\4\0\4\204\1\231"+
    "\17\204\25\0\1\204\4\0\1\204\4\0\17\204\1\232"+
    "\4\204\25\0\1\204\4\0\1\204\4\0\3\204\1\233"+
    "\20\204\25\0\1\204\4\0\1\204\4\0\11\204\1\234"+
    "\12\204\4\0\13\177\1\235\4\177\1\201\42\177\2\176"+
    "\1\177\10\176\1\132\4\176\1\236\42\176\13\177\1\175"+
    "\4\177\1\236\42\177\2\176\1\177\10\176\1\200\4\176"+
    "\1\237\42\176\1\70\4\0\12\70\1\71\1\70\1\240"+
    "\37\70\1\0\1\70\21\0\1\241\4\0\1\241\4\0"+
    "\24\241\25\0\1\241\4\0\1\241\4\0\2\241\1\242"+
    "\21\241\25\0\1\241\4\0\1\241\4\0\16\241\1\243"+
    "\5\241\25\0\1\241\4\0\1\241\4\0\20\241\1\244"+
    "\3\241\25\0\1\241\4\0\1\241\4\0\11\241\1\245"+
    "\12\241\25\0\1\241\4\0\1\241\4\0\4\241\1\246"+
    "\17\241\25\0\1\241\4\0\1\241\4\0\17\241\1\247"+
    "\4\241\25\0\1\241\4\0\1\241\4\0\1\250\23\241"+
    "\25\0\1\241\4\0\1\241\4\0\15\241\1\251\6\241"+
    "\25\0\1\241\4\0\1\241\4\0\1\252\23\241\25\0"+
    "\1\241\4\0\1\241\4\0\4\241\1\253\17\241\25\0"+
    "\1\241\4\0\1\241\4\0\10\241\1\254\13\241\25\0"+
    "\1\241\4\0\1\241\4\0\15\241\1\255\6\241\25\0"+
    "\1\241\4\0\1\241\4\0\10\241\1\256\13\241\25\0"+
    "\1\241\4\0\1\241\4\0\12\241\1\257\11\241\25\0"+
    "\1\241\4\0\1\241\4\0\2\241\1\260\21\241\25\0"+
    "\1\241\4\0\1\241\4\0\20\241\1\261\3\241\25\0"+
    "\1\241\4\0\1\241\4\0\4\241\1\262\17\241\4\0"+
    "\13\177\1\235\4\177\1\237\42\177\13\236\1\263\47\236"+
    "\1\70\4\0\12\70\1\71\1\70\1\264\37\70\1\0"+
    "\1\70\21\0\1\265\4\0\1\265\4\0\24\265\25\0"+
    "\1\265\4\0\1\265\4\0\7\265\1\266\14\265\25\0"+
    "\1\265\4\0\1\265\4\0\11\265\1\267\12\265\25\0"+
    "\1\265\4\0\1\265\4\0\4\265\1\270\17\265\25\0"+
    "\1\265\4\0\1\265\4\0\2\265\1\271\21\265\25\0"+
    "\1\265\4\0\1\265\4\0\10\265\1\272\13\265\25\0"+
    "\1\265\4\0\1\265\4\0\17\265\1\273\4\265\25\0"+
    "\1\265\4\0\1\265\4\0\2\265\1\274\21\265\25\0"+
    "\1\265\4\0\1\265\4\0\2\265\1\275\21\265\25\0"+
    "\1\265\4\0\1\265\4\0\12\265\1\276\11\265\25\0"+
    "\1\265\4\0\1\265\4\0\2\265\1\277\21\265\25\0"+
    "\1\265\4\0\1\265\4\0\6\265\1\300\15\265\25\0"+
    "\1\265\4\0\1\265\4\0\7\265\1\301\14\265\25\0"+
    "\1\265\4\0\1\265\4\0\1\302\23\265\4\0\13\236"+
    "\1\303\4\236\1\0\42\236\1\70\4\0\12\70\1\71"+
    "\1\70\1\304\37\70\1\0\1\70\21\0\1\305\4\0"+
    "\1\305\4\0\24\305\25\0\1\305\4\0\1\305\4\0"+
    "\17\305\1\306\4\305\25\0\1\305\4\0\1\305\4\0"+
    "\7\305\1\307\14\305\25\0\1\305\4\0\1\305\4\0"+
    "\3\305\1\310\20\305\25\0\1\305\4\0\1\305\4\0"+
    "\4\305\1\311\17\305\25\0\1\305\4\0\1\305\4\0"+
    "\17\305\1\312\4\305\25\0\1\305\4\0\1\305\4\0"+
    "\11\305\1\313\12\305\4\0\13\236\1\303\47\236\1\70"+
    "\4\0\12\70\1\71\1\70\1\314\37\70\1\0\1\70"+
    "\21\0\1\315\4\0\1\315\4\0\24\315\25\0\1\315"+
    "\4\0\1\315\4\0\4\315\1\316\17\315\25\0\1\315"+
    "\4\0\1\315\4\0\4\315\1\317\17\315\4\0\1\70"+
    "\4\0\12\70\1\71\1\70\1\320\37\70\1\0\1\70"+
    "\21\0\1\321\4\0\1\321\4\0\24\321\25\0\1\321"+
    "\4\0\1\321\4\0\3\321\1\322\20\321\4\0\1\70"+
    "\4\0\12\70\1\71\1\70\1\323\37\70\1\0\1\70"+
    "\21\0\1\324\4\0\1\324\4\0\24\324\4\0\1\70"+
    "\4\0\12\70\1\71\1\70\1\325\37\70\1\0\1\70"+
    "\21\0\1\326\4\0\1\326\4\0\24\326\25\0\1\327"+
    "\4\0\1\327\4\0\24\327\25\0\1\330\4\0\1\330"+
    "\4\0\24\330\25\0\1\331\4\0\1\331\4\0\24\331"+
    "\25\0\1\332\4\0\1\332\4\0\24\332\25\0\1\333"+
    "\4\0\1\333\4\0\24\333\25\0\1\334\4\0\1\334"+
    "\4\0\24\334\25\0\1\335\4\0\1\335\4\0\24\335"+
    "\25\0\1\336\4\0\1\336\4\0\24\336\25\0\1\337"+
    "\4\0\1\337\4\0\24\337\25\0\1\340\4\0\1\340"+
    "\4\0\24\340\25\0\1\341\4\0\1\341\4\0\24\341"+
    "\25\0\1\342\4\0\1\342\4\0\24\342\25\0\1\343"+
    "\4\0\1\343\4\0\24\343\25\0\1\344\4\0\1\344"+
    "\4\0\24\344\25\0\1\345\4\0\1\345\4\0\24\345"+
    "\25\0\1\346\4\0\1\346\4\0\24\346\25\0\1\347"+
    "\4\0\1\347\4\0\24\347\25\0\1\350\4\0\1\350"+
    "\4\0\24\350\25\0\1\351\4\0\1\351\4\0\24\351"+
    "\25\0\1\352\4\0\1\352\4\0\24\352\25\0\1\353"+
    "\4\0\1\353\4\0\24\353\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[9078];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\1\11\1\1\2\11"+
    "\2\1\1\11\4\1\1\11\4\1\2\11\16\1\4\11"+
    "\2\0\1\11\1\0\1\1\1\0\1\1\2\11\7\1"+
    "\3\11\30\1\1\11\1\0\6\1\1\11\36\1\1\0"+
    "\3\1\1\11\61\1\1\0\41\1\1\0\25\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerPalabrasReservadas(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> ERROR Token no reconocido");
            }
          // fall through
          case 70: break;
          case 2:
            { /* Ignorar espacios en blanco */
            }
          // fall through
          case 71: break;
          case 3:
            { System.out.print(yytext());
            }
          // fall through
          case 72: break;
          case 4:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> ERROR: Cadena no cerrada");
                                return TokensTL24B.ERROR;
            }
          // fall through
          case 73: break;
          case 5:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo modulo ");
                return TokensTL24B.SIGNO_MODULO;
            }
          // fall through
          case 74: break;
          case 6:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Parentesis de apertura ");
                return TokensTL24B.PARENTESIS_APERTURA;
            }
          // fall through
          case 75: break;
          case 7:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Parentesis de cierre ");
                return TokensTL24B.PARENTESIS_CIERRE;
            }
          // fall through
          case 76: break;
          case 8:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo multiplicacion ");
                return TokensTL24B.SIGNO_MULTIPLICACION;
            }
          // fall through
          case 77: break;
          case 9:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo mas ");
                return TokensTL24B.SIGNO_MAS;
            }
          // fall through
          case 78: break;
          case 10:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Coma ");
                return TokensTL24B.COMA;
            }
          // fall through
          case 79: break;
          case 11:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Punto ");
                return TokensTL24B.PUNTO;
            }
          // fall through
          case 80: break;
          case 12:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo division ");
                return TokensTL24B.SIGNO_DIVISION;
            }
          // fall through
          case 81: break;
          case 13:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Numero entero");
                                return TokensTL24B.NENTERO;
            }
          // fall through
          case 82: break;
          case 14:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Punto y coma ");
                 return TokensTL24B.PUNTO_COMA;
            }
          // fall through
          case 83: break;
          case 15:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo menor que ");
                return TokensTL24B.SIGNO_MENOR_QUE;
            }
          // fall through
          case 84: break;
          case 16:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo asignacion ");
                return TokensTL24B.SIGNO_ASIGNACION;
            }
          // fall through
          case 85: break;
          case 17:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo mayor que ");
                return TokensTL24B.SIGNO_MAYOR_QUE;
            }
          // fall through
          case 86: break;
          case 18:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Identificador ");
                                return TokensTL24B.IDENTIFICADOR;
            }
          // fall through
          case 87: break;
          case 19:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Corchete de apertura ");
                return TokensTL24B.CORCHETE_APERTURA;
            }
          // fall through
          case 88: break;
          case 20:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Corchete de cierre ");
                return TokensTL24B.CORCHETE_CIERRE;
            }
          // fall through
          case 89: break;
          case 21:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Llave de apertura ");                
                return TokensTL24B.LLAVE_APERTURA;
            }
          // fall through
          case 90: break;
          case 22:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Llave de cierre ");
                return TokensTL24B.LLAVE_CIERRE;
            }
          // fall through
          case 91: break;
          case 23:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo diferente ");
                return TokensTL24B.SIGNO_DIFERENTE;
            }
          // fall through
          case 92: break;
          case 24:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Cadena ");
                                return TokensTL24B.CADENA;
            }
          // fall through
          case 93: break;
          case 25:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> ERROR: Caracter no cerrado o mal formado");
                                return TokensTL24B.ERROR;
            }
          // fall through
          case 94: break;
          case 26:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                            System.out.println(yytext()+" -> ERROR: Comentario no bien formado ");
                            return TokensTL24B.ERROR;
            }
          // fall through
          case 95: break;
          case 27:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo incremento ");
                return TokensTL24B.SIGNO_INCREMENTO;
            }
          // fall through
          case 96: break;
          case 28:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo decremento ");
                return TokensTL24B.SIGNO_DECREMENTO;
            }
          // fall through
          case 97: break;
          case 29:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                 System.out.println(yytext()+" -> ERROR: Decimal mal formado (mas de un punto en el numero)");
                 return TokensTL24B.ERROR;
            }
          // fall through
          case 98: break;
          case 30:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                 System.out.println(yytext()+" -> ERROR: Decimal mal formado (sin digitos antes del punto)");
                 return TokensTL24B.ERROR;
            }
          // fall through
          case 99: break;
          case 31:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                        System.out.println(yytext()+" -> ERROR: Comentario de bloque no cerrado ");
                        return TokensTL24B.ERROR;
            }
          // fall through
          case 100: break;
          case 32:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Comentario una linea");
                                return TokensTL24B.COMENTARIOLINEA;
            }
          // fall through
          case 101: break;
          case 33:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                            System.out.println(yytext()+" -> ERROR: Numero entero mal formado");
                            return TokensTL24B.ERROR;
            }
          // fall through
          case 102: break;
          case 34:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo menor o igual que ");
                return TokensTL24B.SIGNO_MENOR_IGUAL_QUE;
            }
          // fall through
          case 103: break;
          case 35:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo igual igual ");
                return TokensTL24B.SIGNO_IGUAL_IGUAL;
            }
          // fall through
          case 104: break;
          case 36:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo mayor o igual que ");
                return TokensTL24B.SIGNO_MAYOR_IGUAL_QUE;
            }
          // fall through
          case 105: break;
          case 37:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para iteracion do");                
                return TokensTL24B.DO;
            }
          // fall through
          case 106: break;
          case 38:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de control de flujo if");                
                return TokensTL24B.IF;
            }
          // fall through
          case 107: break;
          case 39:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Caracter");
                                return TokensTL24B.CARACTER;
            }
          // fall through
          case 108: break;
          case 40:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                            System.out.println(yytext()+" -> ERROR: Comentario de linea no cerrado ");
                            return TokensTL24B.ERROR;
            }
          // fall through
          case 109: break;
          case 41:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                 System.out.println(yytext()+" -> ERROR: Decimal mal formado (sin digitos despues del punto)");
                 return TokensTL24B.ERROR;
            }
          // fall through
          case 110: break;
          case 42:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Decimal ");
                                return TokensTL24B.NDECIMAL;
            }
          // fall through
          case 111: break;
          case 43:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para iteracion for");                
                return TokensTL24B.FOR;
            }
          // fall through
          case 112: break;
          case 44:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato int ");
                return TokensTL24B.INT;
            }
          // fall through
          case 113: break;
          case 45:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para una excepcion try");                
                return TokensTL24B.TRY;
            }
          // fall through
          case 114: break;
          case 46:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Comentario de bloque");
                                return TokensTL24B.MULTICOMENTARIO;
            }
          // fall through
          case 115: break;
          case 47:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato boolean ");                
                return TokensTL24B.BOOL;
            }
          // fall through
          case 116: break;
          case 48:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato byte ");                
                return TokensTL24B.BYTE;
            }
          // fall through
          case 117: break;
          case 49:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato char ");
                return TokensTL24B.CHAR;
            }
          // fall through
          case 118: break;
          case 50:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de control de flujo else");                
                return TokensTL24B.ELSE;
            }
          // fall through
          case 119: break;
          case 51:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato long ");                
                return TokensTL24B.LONG;
            }
          // fall through
          case 120: break;
          case 52:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Valor booleano verdadero");                
                return TokensTL24B.TRUE;
            }
          // fall through
          case 121: break;
          case 53:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato vacio ");
                return TokensTL24B.VOID;
            }
          // fall through
          case 122: break;
          case 54:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para definir clases");                
                return TokensTL24B.CLASS;
            }
          // fall through
          case 123: break;
          case 55:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Valor booleano falso");                
                return TokensTL24B.FALSE;
            }
          // fall through
          case 124: break;
          case 56:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato float ");                
                return TokensTL24B.FLOAT;
            }
          // fall through
          case 125: break;
          case 57:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para iteracion while");                
                return TokensTL24B.WHILE;
            }
          // fall through
          case 126: break;
          case 58:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para manejar excepcion catch");                
                return TokensTL24B.CATCH;
            }
          // fall through
          case 127: break;
          case 59:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato double ");                
                return TokensTL24B.DOUBLE;
            }
          // fall through
          case 128: break;
          case 60:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de visibilidad public");                
                return TokensTL24B.PUBLIC;
            }
          // fall through
          case 129: break;
          case 61:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra devolver valores return");                
                return TokensTL24B.RETURN;
            }
          // fall through
          case 130: break;
          case 62:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de comportamineto static");                
                return TokensTL24B.STATIC;
            }
          // fall through
          case 131: break;
          case 63:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Tipo de dato cadena");                
                return TokensTL24B.STRING;
            }
          // fall through
          case 132: break;
          case 64:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de control de flujo switch");                
                return TokensTL24B.SWITCH;
            }
          // fall through
          case 133: break;
          case 65:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para iteracion foreach");                
                return TokensTL24B.FOR;
            }
          // fall through
          case 134: break;
          case 66:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de visibilidad private");                
                return TokensTL24B.PRIVATE;
            }
          // fall through
          case 135: break;
          case 67:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de comportamiento virtual");                
                return TokensTL24B.VIRTUAL;
            }
          // fall through
          case 136: break;
          case 68:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de comportamiento override");                
                return TokensTL24B.OVERRIDE;
            }
          // fall through
          case 137: break;
          case 69:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de visibilidad protected");                
                return TokensTL24B.PROTECTED;
            }
          // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerPalabrasReservadas [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerPalabrasReservadas scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerPalabrasReservadas(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
