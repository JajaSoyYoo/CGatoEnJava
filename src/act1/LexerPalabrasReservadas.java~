// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/act1/tokens_palabras_reservadas.flex

/*
    NOMBRES COMPLETOS ORDENADOS POR PRIMER APELLIDO
    Hernandez Cristobal Alan
*/

package act1;


@SuppressWarnings("fallthrough")
public class LexerPalabrasReservadas {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\2\0\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\12\17\1\0\1\20\1\21"+
    "\1\22\1\23\2\0\32\24\1\25\1\26\1\27\1\0"+
    "\1\30\1\0\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\2\24\1\42\1\24\1\43\1\44"+
    "\1\45\1\24\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\24\1\54\1\24\1\55\1\0\1\56\7\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\1\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\16\21\1\24"+
    "\1\25\1\26\1\0\1\27\1\0\1\30\1\31\1\32"+
    "\1\0\1\14\1\33\1\34\1\35\6\21\1\36\4\21"+
    "\1\37\14\21\1\32\1\14\12\21\1\40\1\41\12\21"+
    "\1\42\3\21\1\14\1\21\1\43\1\44\1\45\4\21"+
    "\1\46\3\21\1\47\10\21\1\50\1\21\1\51\1\21"+
    "\1\14\2\21\1\52\2\21\1\53\1\54\12\21\1\55"+
    "\1\14\1\21\1\56\1\21\1\57\4\21\1\60\1\61"+
    "\1\62\1\63\1\64\1\21\1\14\1\21\1\40\1\65"+
    "\1\21\1\66\1\21\1\67\1\14\1\21\1\70\1\21"+
    "\1\14\1\21\1\71\1\14\1\21\1\0\26\21";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\57\0\215\0\274\0\57\0\57"+
    "\0\57\0\57\0\353\0\57\0\u011a\0\u0149\0\57\0\u0178"+
    "\0\57\0\u01a7\0\u01d6\0\u0205\0\u0234\0\57\0\57\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\57\0\57\0\57"+
    "\0\274\0\57\0\u04f5\0\57\0\57\0\u0524\0\u0149\0\u0553"+
    "\0\57\0\57\0\57\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e"+
    "\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0582\0\u0787"+
    "\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\u098c\0\57\0\u09bb\0\u09ea\0\u0a19\0\u0a48"+
    "\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0"+
    "\0\u09ea\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u09ea\0\u0dc5\0\u0df4\0\u0e23\0\u0e52"+
    "\0\u0e81\0\u0e81\0\u0e81\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d"+
    "\0\u0e81\0\u0f6c\0\u0f9b\0\u0fca\0\u0e81\0\u0ff9\0\u1028\0\u1057"+
    "\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u0e81\0\u1171\0\u0e81"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u11fe\0\u125c\0\u128b\0\u11fe"+
    "\0\u11fe\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4"+
    "\0\u1403\0\u1432\0\u1461\0\u11fe\0\u1490\0\u14bf\0\u14bf\0\u14ee"+
    "\0\u14bf\0\u151d\0\u154c\0\u157b\0\u15aa\0\u14bf\0\u14bf\0\u14bf"+
    "\0\u14bf\0\u14bf\0\u15d9\0\u1608\0\u1637\0\u1637\0\u1637\0\u1666"+
    "\0\u1637\0\u1695\0\u1637\0\u16c4\0\u16f3\0\u16f3\0\u1722\0\u1751"+
    "\0\u1780\0\u1780\0\u17af\0\u17de\0\u17af\0\u180d\0\u183c\0\u186b"+
    "\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3"+
    "\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b"+
    "\0\u1b8a\0\u1bb9\0\57";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\2\1\27\2\25"+
    "\1\30\1\31\1\32\1\33\1\34\2\25\1\35\1\36"+
    "\1\25\1\37\1\40\1\41\1\42\1\43\1\25\1\44"+
    "\1\45\1\25\1\46\1\47\60\0\2\3\76\0\1\50"+
    "\34\0\5\51\1\52\20\51\1\53\30\51\12\0\1\54"+
    "\60\0\1\55\61\0\1\56\54\0\1\57\1\0\1\60"+
    "\61\0\1\61\56\0\1\62\56\0\1\63\53\0\1\64"+
    "\4\0\1\64\4\0\24\64\21\0\1\64\4\0\1\64"+
    "\4\0\13\64\1\65\7\64\1\66\21\0\1\64\4\0"+
    "\1\64\4\0\7\64\1\67\1\64\1\70\12\64\21\0"+
    "\1\64\4\0\1\64\4\0\4\64\1\71\6\64\1\72"+
    "\10\64\21\0\1\64\4\0\1\64\4\0\11\64\1\73"+
    "\12\64\21\0\1\64\4\0\1\64\4\0\1\74\10\64"+
    "\1\75\1\64\1\76\10\64\21\0\1\64\4\0\1\64"+
    "\4\0\5\64\1\77\4\64\1\100\11\64\21\0\1\64"+
    "\4\0\1\64\4\0\13\64\1\101\10\64\21\0\1\64"+
    "\4\0\1\64\4\0\21\64\1\102\2\64\21\0\1\64"+
    "\4\0\1\64\4\0\15\64\1\103\2\64\1\104\3\64"+
    "\21\0\1\64\4\0\1\64\4\0\4\64\1\105\17\64"+
    "\21\0\1\64\4\0\1\64\4\0\17\64\1\106\2\64"+
    "\1\107\1\64\21\0\1\64\4\0\1\64\4\0\15\64"+
    "\1\110\6\64\21\0\1\64\4\0\1\64\4\0\10\64"+
    "\1\111\2\64\1\112\10\64\21\0\1\64\4\0\1\64"+
    "\4\0\7\64\1\113\14\64\2\0\2\51\2\0\53\51"+
    "\17\0\1\114\54\0\1\57\1\0\1\115\56\0\1\116"+
    "\4\0\1\116\4\0\24\116\21\0\1\116\4\0\1\116"+
    "\4\0\13\116\1\117\10\116\21\0\1\116\4\0\1\116"+
    "\4\0\17\116\1\120\4\116\21\0\1\116\4\0\1\116"+
    "\4\0\1\121\23\116\21\0\1\116\4\0\1\116\4\0"+
    "\1\122\23\116\21\0\1\116\4\0\1\116\4\0\5\116"+
    "\1\123\16\116\21\0\1\116\4\0\1\116\4\0\20\116"+
    "\1\124\3\116\21\0\1\116\4\0\1\116\4\0\16\116"+
    "\1\125\5\116\21\0\1\116\4\0\1\116\4\0\11\116"+
    "\1\126\12\116\21\0\1\116\4\0\1\116\4\0\13\116"+
    "\1\127\10\116\21\0\1\116\4\0\1\116\4\0\15\116"+
    "\1\130\6\116\21\0\1\116\4\0\1\116\4\0\17\116"+
    "\1\131\4\116\21\0\1\116\4\0\1\116\4\0\12\116"+
    "\1\132\11\116\21\0\1\116\4\0\1\116\4\0\4\116"+
    "\1\133\17\116\21\0\1\116\4\0\1\116\4\0\10\116"+
    "\1\134\2\116\1\135\10\116\21\0\1\116\4\0\1\116"+
    "\4\0\1\116\1\136\22\116\21\0\1\116\4\0\1\116"+
    "\4\0\17\116\1\137\4\116\21\0\1\116\4\0\1\116"+
    "\4\0\1\140\14\116\1\141\6\116\21\0\1\116\4\0"+
    "\1\116\4\0\10\116\1\142\13\116\21\0\1\116\4\0"+
    "\1\116\4\0\20\116\1\143\2\116\1\144\21\0\1\116"+
    "\4\0\1\116\4\0\15\116\1\145\6\116\21\0\1\116"+
    "\4\0\1\116\4\0\10\116\1\146\13\116\21\0\1\116"+
    "\4\0\1\116\4\0\10\116\1\147\13\116\17\0\1\57"+
    "\1\0\1\150\56\0\1\151\4\0\1\151\4\0\24\151"+
    "\21\0\1\151\4\0\1\151\4\0\11\151\1\152\12\151"+
    "\21\0\1\151\4\0\1\151\4\0\4\151\1\153\17\151"+
    "\21\0\1\151\4\0\1\151\4\0\15\151\1\154\1\151"+
    "\1\155\4\151\21\0\1\151\4\0\1\151\4\0\16\151"+
    "\1\156\5\151\21\0\1\151\4\0\1\151\4\0\1\157"+
    "\23\151\21\0\1\151\4\0\1\151\4\0\1\151\1\160"+
    "\22\151\21\0\1\151\4\0\1\151\4\0\4\151\1\161"+
    "\17\151\21\0\1\151\4\0\1\151\4\0\16\151\1\162"+
    "\5\151\21\0\1\151\4\0\1\151\4\0\1\163\23\151"+
    "\21\0\1\151\4\0\1\151\4\0\4\151\1\164\17\151"+
    "\21\0\1\151\4\0\1\151\4\0\6\151\1\165\15\151"+
    "\21\0\1\151\4\0\1\151\4\0\15\151\1\166\6\151"+
    "\21\0\1\151\4\0\1\151\4\0\21\151\1\167\2\151"+
    "\21\0\1\151\4\0\1\151\4\0\17\151\1\170\4\151"+
    "\21\0\1\151\4\0\1\151\4\0\11\151\1\171\12\151"+
    "\21\0\1\151\4\0\1\151\4\0\20\151\1\172\3\151"+
    "\21\0\1\151\4\0\1\151\4\0\17\151\1\173\4\151"+
    "\21\0\1\151\4\0\1\151\4\0\10\151\1\174\13\151"+
    "\21\0\1\151\4\0\1\151\4\0\17\151\1\175\4\151"+
    "\21\0\1\151\4\0\1\151\4\0\4\151\1\176\17\151"+
    "\21\0\1\151\4\0\1\151\4\0\17\151\1\177\4\151"+
    "\21\0\1\151\4\0\1\151\4\0\3\151\1\200\20\151"+
    "\21\0\1\151\4\0\1\151\4\0\11\151\1\201\12\151"+
    "\17\0\1\57\1\0\1\202\56\0\1\203\4\0\1\203"+
    "\4\0\24\203\21\0\1\203\4\0\1\203\4\0\2\203"+
    "\1\204\21\203\21\0\1\203\4\0\1\203\4\0\16\203"+
    "\1\205\5\203\21\0\1\203\4\0\1\203\4\0\20\203"+
    "\1\206\3\203\21\0\1\203\4\0\1\203\4\0\11\203"+
    "\1\207\12\203\21\0\1\203\4\0\1\203\4\0\4\203"+
    "\1\210\17\203\21\0\1\203\4\0\1\203\4\0\17\203"+
    "\1\211\4\203\21\0\1\203\4\0\1\203\4\0\1\212"+
    "\23\203\21\0\1\203\4\0\1\203\4\0\15\203\1\213"+
    "\6\203\21\0\1\203\4\0\1\203\4\0\1\214\23\203"+
    "\21\0\1\203\4\0\1\203\4\0\4\203\1\215\17\203"+
    "\21\0\1\203\4\0\1\203\4\0\10\203\1\216\13\203"+
    "\21\0\1\203\4\0\1\203\4\0\15\203\1\217\6\203"+
    "\21\0\1\203\4\0\1\203\4\0\10\203\1\220\13\203"+
    "\21\0\1\203\4\0\1\203\4\0\12\203\1\221\11\203"+
    "\21\0\1\203\4\0\1\203\4\0\2\203\1\222\21\203"+
    "\21\0\1\203\4\0\1\203\4\0\20\203\1\223\3\203"+
    "\21\0\1\203\4\0\1\203\4\0\4\203\1\224\17\203"+
    "\17\0\1\57\1\0\1\225\56\0\1\226\4\0\1\226"+
    "\4\0\24\226\21\0\1\226\4\0\1\226\4\0\7\226"+
    "\1\227\14\226\21\0\1\226\4\0\1\226\4\0\11\226"+
    "\1\230\12\226\21\0\1\226\4\0\1\226\4\0\4\226"+
    "\1\231\17\226\21\0\1\226\4\0\1\226\4\0\2\226"+
    "\1\232\21\226\21\0\1\226\4\0\1\226\4\0\10\226"+
    "\1\233\13\226\21\0\1\226\4\0\1\226\4\0\17\226"+
    "\1\234\4\226\21\0\1\226\4\0\1\226\4\0\2\226"+
    "\1\235\21\226\21\0\1\226\4\0\1\226\4\0\2\226"+
    "\1\236\21\226\21\0\1\226\4\0\1\226\4\0\12\226"+
    "\1\237\11\226\21\0\1\226\4\0\1\226\4\0\2\226"+
    "\1\240\21\226\21\0\1\226\4\0\1\226\4\0\6\226"+
    "\1\241\15\226\21\0\1\226\4\0\1\226\4\0\7\226"+
    "\1\242\14\226\21\0\1\226\4\0\1\226\4\0\1\243"+
    "\23\226\17\0\1\57\1\0\1\244\56\0\1\245\4\0"+
    "\1\245\4\0\24\245\21\0\1\245\4\0\1\245\4\0"+
    "\17\245\1\246\4\245\21\0\1\245\4\0\1\245\4\0"+
    "\7\245\1\247\14\245\21\0\1\245\4\0\1\245\4\0"+
    "\3\245\1\250\20\245\21\0\1\245\4\0\1\245\4\0"+
    "\4\245\1\251\17\245\21\0\1\245\4\0\1\245\4\0"+
    "\17\245\1\252\4\245\21\0\1\245\4\0\1\245\4\0"+
    "\11\245\1\253\12\245\17\0\1\57\1\0\1\254\56\0"+
    "\1\255\4\0\1\255\4\0\24\255\21\0\1\255\4\0"+
    "\1\255\4\0\4\255\1\256\17\255\21\0\1\255\4\0"+
    "\1\255\4\0\4\255\1\257\17\255\17\0\1\57\1\0"+
    "\1\260\56\0\1\261\4\0\1\261\4\0\24\261\21\0"+
    "\1\261\4\0\1\261\4\0\3\261\1\262\20\261\17\0"+
    "\1\57\1\0\1\263\56\0\1\264\4\0\1\264\4\0"+
    "\24\264\17\0\1\57\1\0\1\265\56\0\1\266\4\0"+
    "\1\266\4\0\24\266\21\0\1\267\4\0\1\267\4\0"+
    "\24\267\21\0\1\270\4\0\1\270\4\0\24\270\21\0"+
    "\1\271\4\0\1\271\4\0\24\271\21\0\1\272\4\0"+
    "\1\272\4\0\24\272\21\0\1\273\4\0\1\273\4\0"+
    "\24\273\21\0\1\274\4\0\1\274\4\0\24\274\21\0"+
    "\1\275\4\0\1\275\4\0\24\275\21\0\1\276\4\0"+
    "\1\276\4\0\24\276\21\0\1\277\4\0\1\277\4\0"+
    "\24\277\21\0\1\300\4\0\1\300\4\0\24\300\21\0"+
    "\1\301\4\0\1\301\4\0\24\301\21\0\1\302\4\0"+
    "\1\302\4\0\24\302\21\0\1\303\4\0\1\303\4\0"+
    "\24\303\21\0\1\304\4\0\1\304\4\0\24\304\21\0"+
    "\1\305\4\0\1\305\4\0\24\305\21\0\1\306\4\0"+
    "\1\306\4\0\24\306\21\0\1\307\4\0\1\307\4\0"+
    "\24\307\21\0\1\310\4\0\1\310\4\0\24\310\21\0"+
    "\1\311\4\0\1\311\4\0\24\311\21\0\1\312\4\0"+
    "\1\312\4\0\24\312\21\0\1\313\4\0\1\313\4\0"+
    "\24\313\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7144];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\2\1\4\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\4\1\2\11\16\1\3\11"+
    "\1\0\1\11\1\0\2\11\1\1\1\0\1\1\3\11"+
    "\30\1\1\11\150\1\1\0\25\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerPalabrasReservadas(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> ERROR Token no reconocido");
            }
          // fall through
          case 58: break;
          case 2:
            { /* Ignorar espacios en blanco */
            }
          // fall through
          case 59: break;
          case 3:
            { System.out.print(yytext());
            }
          // fall through
          case 60: break;
          case 4:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo modulo ");
                return TokensTL24B.SIGNO_MODULO;
            }
          // fall through
          case 61: break;
          case 5:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Parentesis de apertura ");
                return TokensTL24B.PARENTESIS_APERTURA;
            }
          // fall through
          case 62: break;
          case 6:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Parentesis de cierre ");
                return TokensTL24B.PARENTESIS_CIERRE;
            }
          // fall through
          case 63: break;
          case 7:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo multiplicacion ");
                return TokensTL24B.SIGNO_MULTIPLICACION;
            }
          // fall through
          case 64: break;
          case 8:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo mas ");
                return TokensTL24B.SIGNO_MAS;
            }
          // fall through
          case 65: break;
          case 9:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Coma ");
                return TokensTL24B.COMA;
            }
          // fall through
          case 66: break;
          case 10:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Punto ");
                return TokensTL24B.PUNTO;
            }
          // fall through
          case 67: break;
          case 11:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo division ");
                return TokensTL24B.SIGNO_DIVISION;
            }
          // fall through
          case 68: break;
          case 12:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Numero entero");
                                return TokensTL24B.NENTERO;
            }
          // fall through
          case 69: break;
          case 13:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Punto y coma ");
                 return TokensTL24B.PUNTO_COMA;
            }
          // fall through
          case 70: break;
          case 14:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo menor que ");
                return TokensTL24B.SIGNO_MENOR_QUE;
            }
          // fall through
          case 71: break;
          case 15:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo asignacion ");
                return TokensTL24B.SIGNO_ASIGNACION;
            }
          // fall through
          case 72: break;
          case 16:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo mayor que ");
                return TokensTL24B.SIGNO_MAYOR_QUE;
            }
          // fall through
          case 73: break;
          case 17:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Identificador ");
                                return TokensTL24B.IDENTIFICADOR;
            }
          // fall through
          case 74: break;
          case 18:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Corchete de apertura ");
                return TokensTL24B.CORCHETE_APERTURA;
            }
          // fall through
          case 75: break;
          case 19:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Corchete de cierre ");
                return TokensTL24B.CORCHETE_CIERRE;
            }
          // fall through
          case 76: break;
          case 20:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Llave de apertura ");                
                return TokensTL24B.LLAVE_APERTURA;
            }
          // fall through
          case 77: break;
          case 21:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Llave de cierre ");
                return TokensTL24B.LLAVE_CIERRE;
            }
          // fall through
          case 78: break;
          case 22:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo diferente ");
                return TokensTL24B.SIGNO_DIFERENTE;
            }
          // fall through
          case 79: break;
          case 23:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Cadena ");
                                return TokensTL24B.CADENA;
            }
          // fall through
          case 80: break;
          case 24:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo incremento ");
                return TokensTL24B.SIGNO_INCREMENTO;
            }
          // fall through
          case 81: break;
          case 25:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo decremento ");
                return TokensTL24B.SIGNO_DECREMENTO;
            }
          // fall through
          case 82: break;
          case 26:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                                System.out.println(yytext()+" -> Decimal ");
                                return TokensTL24B.NDECIMAL;
            }
          // fall through
          case 83: break;
          case 27:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo menor o igual que ");
                return TokensTL24B.SIGNO_MENOR_IGUAL_QUE;
            }
          // fall through
          case 84: break;
          case 28:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo igual igual ");
                return TokensTL24B.SIGNO_IGUAL_IGUAL;
            }
          // fall through
          case 85: break;
          case 29:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Signo mayor o igual que ");
                return TokensTL24B.SIGNO_MAYOR_IGUAL_QUE;
            }
          // fall through
          case 86: break;
          case 30:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para iteracion do");                
                return TokensTL24B.DO;
            }
          // fall through
          case 87: break;
          case 31:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de control de flujo if");                
                return TokensTL24B.IF;
            }
          // fall through
          case 88: break;
          case 32:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para iteracion for");                
                return TokensTL24B.FOR;
            }
          // fall through
          case 89: break;
          case 33:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato int ");
                return TokensTL24B.INT;
            }
          // fall through
          case 90: break;
          case 34:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para una excepcion try");                
                return TokensTL24B.TRY;
            }
          // fall through
          case 91: break;
          case 35:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato boolean ");                
                return TokensTL24B.BOOL;
            }
          // fall through
          case 92: break;
          case 36:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato byte ");                
                return TokensTL24B.BYTE;
            }
          // fall through
          case 93: break;
          case 37:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato char ");
                return TokensTL24B.CHAR;
            }
          // fall through
          case 94: break;
          case 38:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de control de flujo else");                
                return TokensTL24B.ELSE;
            }
          // fall through
          case 95: break;
          case 39:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato long ");                
                return TokensTL24B.LONG;
            }
          // fall through
          case 96: break;
          case 40:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Valor booleano verdadero");                
                return TokensTL24B.TRUE;
            }
          // fall through
          case 97: break;
          case 41:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato vacio ");
                return TokensTL24B.VOID;
            }
          // fall through
          case 98: break;
          case 42:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para definir clases");                
                return TokensTL24B.CLASS;
            }
          // fall through
          case 99: break;
          case 43:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Valor booleano falso");                
                return TokensTL24B.FALSE;
            }
          // fall through
          case 100: break;
          case 44:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato float ");                
                return TokensTL24B.FLOAT;
            }
          // fall through
          case 101: break;
          case 45:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para iteracion while");                
                return TokensTL24B.WHILE;
            }
          // fall through
          case 102: break;
          case 46:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para manejar excepcion catch");                
                return TokensTL24B.CATCH;
            }
          // fall through
          case 103: break;
          case 47:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" -> Tipo de dato double ");                
                return TokensTL24B.DOUBLE;
            }
          // fall through
          case 104: break;
          case 48:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de visibilidad public");                
                return TokensTL24B.PUBLIC;
            }
          // fall through
          case 105: break;
          case 49:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra devolver valores return");                
                return TokensTL24B.RETURN;
            }
          // fall through
          case 106: break;
          case 50:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de comportamineto static");                
                return TokensTL24B.STATIC;
            }
          // fall through
          case 107: break;
          case 51:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Tipo de dato cadena");                
                return TokensTL24B.STRING;
            }
          // fall through
          case 108: break;
          case 52:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de control de flujo switch");                
                return TokensTL24B.SWITCH;
            }
          // fall through
          case 109: break;
          case 53:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra para iteracion foreach");                
                return TokensTL24B.FOR;
            }
          // fall through
          case 110: break;
          case 54:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de visibilidad private");                
                return TokensTL24B.PRIVATE;
            }
          // fall through
          case 111: break;
          case 55:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de comportamiento virtual");                
                return TokensTL24B.VIRTUAL;
            }
          // fall through
          case 112: break;
          case 56:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de comportamiento override");                
                return TokensTL24B.OVERRIDE;
            }
          // fall through
          case 113: break;
          case 57:
            { System.out.print("Linea:"+(yyline+1)+", Columna:"+(yycolumn+1)+"\t");
                System.out.println(yytext()+" ->  Palabra de visibilidad protected");                
                return TokensTL24B.PROTECTED;
            }
          // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerPalabrasReservadas [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerPalabrasReservadas scanner = null;
        java.io.FileInputStream stream = null;
        java.io.Reader reader = null;
        try {
          stream = new java.io.FileInputStream(argv[i]);
          reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerPalabrasReservadas(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
        finally {
          if (reader != null) {
            try {
              reader.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
          if (stream != null) {
            try {
              stream.close();
            }
            catch (java.io.IOException e) {
              System.out.println("IO error closing file \""+argv[i]+"\"");
              System.out.println(e);
            }
          }
        }
      }
    }
  }


}
