
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 12 22:12:01 CST 2024
//----------------------------------------------------

package demo_cup;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 12 22:12:01 CST 2024
  */
public class ParserDemo extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserDemo() {super();}

  /** Constructor which sets the default scanner. */
  public ParserDemo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserDemo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\005\005" +
    "\000\002\005\007\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\016\004\004\005\005\006\016\007\017\010" +
    "\011\011\006\001\002\000\004\015\ufff9\001\002\000\004" +
    "\015\ufff8\001\002\000\004\015\ufff5\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\000\001\002\000\004\015\ufff6" +
    "\001\002\000\004\002\ufffd\001\002\000\004\002\ufffe\001" +
    "\002\000\004\015\021\001\002\000\004\002\020\001\002" +
    "\000\004\015\ufffa\001\002\000\004\015\ufff7\001\002\000" +
    "\004\002\001\001\002\000\006\013\022\014\023\001\002" +
    "\000\004\015\024\001\002\000\004\002\ufffc\001\002\000" +
    "\004\014\025\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\016\002\014\003\007\004\006\005\012\006" +
    "\011\007\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserDemo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserDemo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserDemo$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserDemo$actions {
  private final ParserDemo parser;

  /** Constructor */
  CUP$ParserDemo$actions(ParserDemo parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserDemo$do_action(
    int                        CUP$ParserDemo$act_num,
    java_cup.runtime.lr_parser CUP$ParserDemo$parser,
    java.util.Stack            CUP$ParserDemo$stack,
    int                        CUP$ParserDemo$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserDemo$result;

      /* select the action based on the action number */
      switch (CUP$ParserDemo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_dato ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          return CUP$ParserDemo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_dato ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          return CUP$ParserDemo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_dato ::= CHAR 
            {
              Object RESULT =null;

              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          return CUP$ParserDemo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_dato ::= LONG 
            {
              Object RESULT =null;

              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          return CUP$ParserDemo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo_dato ::= INT 
            {
              Object RESULT =null;

              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          return CUP$ParserDemo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_dato ::= BYTE 
            {
              Object RESULT =null;

              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("tipo_dato",5, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          return CUP$ParserDemo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec_variables ::= tipo_dato ID COMA ID PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("dec_variables",3, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.elementAt(CUP$ParserDemo$top-4)), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          return CUP$ParserDemo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec_variables ::= tipo_dato ID PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("dec_variables",3, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.elementAt(CUP$ParserDemo$top-2)), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          return CUP$ParserDemo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= dec_constantes 
            {
              Object RESULT =null;

              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          return CUP$ParserDemo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones ::= dec_variables 
            {
              Object RESULT =null;

              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          return CUP$ParserDemo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sentencias ::= instrucciones 
            {
              Object RESULT =null;

              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("sentencias",0, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          return CUP$ParserDemo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sentencias ::= declaraciones 
            {
              Object RESULT =null;

              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("sentencias",0, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          return CUP$ParserDemo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sentencias EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.elementAt(CUP$ParserDemo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.elementAt(CUP$ParserDemo$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserDemo$stack.elementAt(CUP$ParserDemo$top-1)).value;
		RESULT = start_val;
              CUP$ParserDemo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.elementAt(CUP$ParserDemo$top-1)), ((java_cup.runtime.Symbol)CUP$ParserDemo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserDemo$parser.done_parsing();
          return CUP$ParserDemo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

